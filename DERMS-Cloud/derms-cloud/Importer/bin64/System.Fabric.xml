<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Fabric</name>
    </assembly>
    <members>
        <member name="T:System.Fabric.Query.ApplicationNameResult">
            <summary>
            <para>Describes an application name.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ApplicationNameResult.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceNameResult">
            <summary>
            <para>Describes an service name.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceNameResult.ServiceName">
            <summary>
            <para>Gets the name of the service.</para>
            </summary>
            <value>
            <para>The name of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.LoadedPartitionInformationResult">
            <summary>
            Represents partition information.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResult.#ctor(System.Uri,System.Guid,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the LoadedPartitionInformationResult class.
            </summary>
            <param name="serviceName">Name of the service this partition belongs to.</param>
            <param name="partitionId">Id of the partition.</param>
            <param name="metricName">Name of the metric for which this information is provided.</param>
            <param name="load">Load for metric.</param>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResult.CreateFromNative(System.Fabric.Interop.NativeTypes.FABRIC_LOADED_PARTITION_INFORMATION_QUERY_RESULT_ITEM)">
            <summary>
            Initializes a new instance from native object.
            </summary>
            <param name="nativeParameter">Represents native object.</param>
            <returns>New instance of LoadedPartitionInformationResult.</returns>
        </member>
        <member name="P:System.Fabric.Query.LoadedPartitionInformationResult.ServiceName">
            <summary>
            Gets or sets name of the service this partition belongs to.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.LoadedPartitionInformationResult.PartitionId">
            <summary>
            Gets or sets id of the partition.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.LoadedPartitionInformationResult.MetricName">
            <summary>
            Gets or sets name of the metric for which this information is
            provided.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.LoadedPartitionInformationResult.Load">
            <summary>
            Gets or sets load for metric.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResult.ToString">
            <summary>
            Returns string representation of the object.
            </summary>
            <returns>String representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Query.LoadedPartitionInformationResultList">
            <summary>
            Represents data structure that contains top/least loaded partitions for
            a certain metric.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResultList.#ctor">
            <summary>
            Default constructor for LoadedPartitionInformationResultList.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResultList.#ctor(System.Collections.Generic.IList{System.Fabric.Query.LoadedPartitionInformationResult})">
            <summary>
            Constructor for LoadedPartitionInformationResultList.
            </summary>
            <param name="list">Sorted list of LoadedPartitionInformationResult.</param>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResultList.CreateFromNativeListResult(System.Fabric.Interop.NativeClient.IFabricGetGetLoadedPartitionInfoListResult)">
            <summary>
            Initializes a new instance from native object.
            </summary>
            <param name="nativeResult">Represents native object.</param>
            <returns>New instance of LoadedPartitionInformationResultList.</returns>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResultList.CreateFromNative(System.Fabric.Interop.NativeTypes.FABRIC_LOADED_PARTITION_INFORMATION_QUERY_RESULT_LIST*,System.Fabric.Interop.NativeTypes.FABRIC_PAGING_STATUS*)">
            <summary>
            Initializes a new instance from native object.
            </summary>
            <param name="nativeList">Represents native object of items.</param>
            <param name="nativePagingStatus">Represents native object of paging status.</param>
            <returns>New instance of LoadedPartitionInformationResultList.</returns>
        </member>
        <member name="M:System.Fabric.Query.LoadedPartitionInformationResultList.ToString">
            <summary>
            Returns string representation of the object.
            </summary>
            <returns>String representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Query.UpdatePartitionLoadResult">
            <summary>
            <para>Specifies the output per partition of the query
            <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.UpdatePartitionLoadAsync(System.Fabric.Description.UpdatePartitionLoadQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
            that contains integer representation of the ErrorCode with the corresponding partition ID.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UpdatePartitionLoadResult.#ctor(System.Guid,System.Int32)">
            <summary>
                Constructor for UpdatePartitionLoadResult
            </summary>
            <param name="partitionId">Partition ID.</param>
            <param name="partitionErrorCode">Error Code representing output for updating load for a current partition.</param>
        </member>
        <member name="P:System.Fabric.Query.UpdatePartitionLoadResult.PartitionId">
            <summary>
            <para> The partition ID. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Guid" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UpdatePartitionLoadResult.PartitionErrorCode">
            <summary>
            <para> Error Code representing output for updating load for a current partition. </para>
            </summary>
            <value>
            <para>Returns error code in the int representation.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.UpdatePartitionLoadResultList">
            <summary>
            <para>Represents the list of <see cref="T:System.Fabric.Query.UpdatePartitionLoadResult" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.UpdatePartitionLoadAsync(System.Fabric.Description.UpdatePartitionLoadQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UpdatePartitionLoadResultList.#ctor">
            <summary>
            <para> Creates a list of partition load update results. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.TestCommandStatus">
            <summary>
            This class represents the status of a test command.  Calling <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)"/> returns an IList of this type of object.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.TestCommandStatus.OperationId">
            <summary>
            The OperationId of the test command.  This Guid was provided by the user when starting the test operation.
            </summary>
            <value>A Guid representing the OperationId.</value>        
        </member>
        <member name="P:System.Fabric.Query.TestCommandStatus.State">
            <summary>
            The current state of the test command.
            </summary>
            <value>A TestCommandProgressState with the current state.</value>
        </member>
        <member name="P:System.Fabric.Query.TestCommandStatus.TestCommandType">
            <summary>
            The type of the test command.
            </summary>
            <value>A TestCommandType object.</value>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatus.ToString">
            <summary>
            Formats OperationId, State, and ActionType into a string.
            </summary>
            <value>The formatted string.</value>
        </member>
        <member name="T:System.Fabric.Query.TestCommandStateFilter">
            <summary>
            This is used when calling GetTestCommandStatusListAsync(), and indicates the filter to use on TestCommandState's.    Multiple filter values may be specified.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Default">
            <summary>
            The default filter.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.All">
            <summary>
            Indicates not to do any filtering on TestCommandState.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Running">
            <summary>
            This filter selects Running test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.RollingBack">
            <summary>
            This filter selects RollingBack test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.CompletedSuccessfully">
            <summary>
            This filter selects Completed test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Failed">
            <summary>
            This filter selects Failed test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Cancelled">
            <summary>
            This filter selects Cancelled test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.ForceCancelled">
            <summary>
            This filter selects ForceCancelled test commands.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.TestCommandTypeFilter">
            <summary>
            This is used when calling GetTestCommandStatusListAsync(), and indicates the filter to use on TestCommandType's.    Multiple filter values may be specified.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.Default">
            <summary>
            The default filter.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.All">
            <summary>
            Indicates to not do any filtering on TestCommandType.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.PartitionDataLoss">
            <summary>
            Indicates to select test commands of TestCommandType PartitionDataLoss.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.PartitionQuorumLoss">
            <summary>
            Indicates to select test commands of TestCommandType PartitionQuorumLoss.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.PartitionRestart">
            <summary>
            Indicates to select test commands of TestCommandType PartitionRestart.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.NodeTransition">
            <summary>
            Indicates to select test commands of TestCommandType for node transitions.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationDefinitionKind">
            <summary>
            <para>Specifies the application definition kind.</para>
            <para>Specifies the mechanism the user used to define a Service Fabric application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationDefinitionKind.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationDefinitionKind.ServiceFabricApplicationDescription">
            <summary>
            <para>Indicates that the application is defined by <see cref="T:System.Fabric.Description.ApplicationDescription"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationDefinitionKind.Compose">
            <summary>
            <para>Indicates that the application is defined by compose file(s).</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationDefinitionKind.MeshApplicationDescription">
            <summary>
            <para>Indicates that the application is defined by Mesh application description.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationTypeDefinitionKind">
            <summary>
            <para>Specifies the application type definition kind.</para>
            <para>Specifies mechanism user used to define a Service Fabric application type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeDefinitionKind.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeDefinitionKind.ServiceFabricApplicationPackage">
            <summary>
            <para>Indicates that the application type is defined and created by a Service Fabric application package provided by the user.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeDefinitionKind.Compose">
            <summary>
            <para>Indicates that the application type is defined and created implicitly as part of a compose deployment.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeDefinitionKind.MeshApplicationDescription">
            <summary>
            <para>Indicates that the application type is defined and created implicitly as part of a Mesh application deployment.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationList">
            <summary>
            <para>Represents the list of <see cref="T:System.Fabric.Query.Application" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationList.#ctor">
            <summary>
            <para> Creates an application list. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Application">
            <summary>
            <para>Describes an application instance which is characterized by application-name, application-type, application-parameters, 
            health-state etc.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationName">
            <summary>
            <para>Gets the name of the application as a URI.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationTypeName">
            <summary>
            <para>Gets the application type name as specified in the Application Manifest.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationTypeVersion">
            <summary>
            <para>Gets the application type version as specified in the Application Manifest.</para>
            </summary>
            <value>
            <para>The application type version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationStatus">
            <summary>
            <para>Gets the status of the application as <see cref="T:System.Fabric.Query.ApplicationStatus" />.</para>
            </summary>
            <value>
            <para>The status of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.HealthState">
            <summary>
            <para>Gets the aggregated health state of the application as <see cref="T:System.Fabric.Health.HealthState" />. </para>
            </summary>
            <value>
            <para>The aggregated health of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationParameters">
             <summary>
             <para>Gets the list of <see cref="T:System.Fabric.Description.ApplicationParameter" />'s of the application that have been overridden by the user at the time of application-creation or through application upgrades. Note, this parameter list does not include
             the parameters that still have default values from the application manifest. To find out the parameters of the application that still have default values from the manifest, one could use the ApplicationParameters returned by the <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)">GetApplication</see> query and
             the DefaultParameters returned by the <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)">GetApplicationType</see> query; the parameters that still have default values from the manifest can be found by excluding all parameters in the ApplicationParameters list from the DefaultParameters list.</para>
             </summary>
             <value>
             <para>The overridden parameters of the application.</para>
             </value>
             <example>
             <para> Following example shows how to get the overridden parameters and the paramters that still have default values from the application manifest.</para>
             <code language="c#">
                // Custom comparer for ApplicationParameter class to compare if two application parameters have the same name.
                class ApplicationParameterNameComparer : IEqualityComparer&lt;ApplicationParameter&gt;
                {
                    // Here we consider two ApplicationParameters are equal if they have the same name.
                    // In general though, two application parameters should be considered equal only if their names and their values are equal.
                    public bool Equals(ApplicationParameter x, ApplicationParameter y)
                    {
                        return x.Name.Equals(y.Name);
                    }
            
                    public int GetHashCode(ApplicationParameter applicationParameter)
                    {
                        return applicationParameter.Name.GetHashCode();
                    }
                }
                 
                using (var fabricClient = new FabricClient(clientConnectionString))
                {
                    ApplicationList applicationList = await fabricClient.QueryManager.GetApplicationListAsync(applicationUri);
            
                    Application application = applicationList.First();
            
                    // If no parameters have been overridden during application creation or through application upgrade, then overridenParameters would be empty.
                    ApplicationParameterList overridenParameters = application.ApplicationParameters;
            
                    ApplicationTypeList applicationTypeList = await fabricClient.QueryManager.GetApplicationTypeListAsync(application.ApplicationTypeName);
            
                    ApplicationType applicationType = applicationTypeList.First();
            
                    ApplicationParameterList parametersFromApplicationManifest = applicationType.DefaultParameters;
            
                    // If no parameters have been overridden during application creation or through application upgrade, then parametersStillHavingDefaultValues would be equal to parametersFromApplicationManifest.
                    IEnumerable&lt;ApplicationParameter&gt; parametersStillHavingDefaultValues = parametersFromApplicationManifest.Except(overridenParameters, new ApplicationParameterNameComparer());
                }
             </code>
             </example>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationDefinitionKind">
            <summary>
            <para>Gets the definition kind.</para>
            </summary>
            <value>
            <para>The definition kind which contains one of the values defined in the
            enumeration <see cref="P:System.Fabric.Query.Application.ApplicationDefinitionKind" />.</para>
            <para>Specifies the mechanism the user used to define a Service Fabric application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.UpgradeTypeVersion">
            <summary>
            <para>Deprecated: Do not use. See <see cref="T:System.Fabric.ApplicationUpgradeProgress" /> instead.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.UpgradeParameters">
            <summary>
            <para>Deprecated: Do not use. See <see cref="T:System.Fabric.ApplicationUpgradeProgress" /> instead.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.ApplicationParameterList" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ManagedApplicationIdentity">
            <summary>
            Application identity
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationStatus">
            <summary>
            Specifies the status of the application.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Ready">
            <summary>
            Ready.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Upgrading">
            <summary>
            Currently being upgraded.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Creating">
            <summary>
            Currently being created.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Deleting">
            <summary>
            Currently being deleted.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Failed">
            <summary>
            Creation or deletion was terminated due to persistent failures.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationTypeList">
            <summary>
            <para>Represents the list of the <see cref="T:System.Fabric.Query.ApplicationType" /> retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.IndexOf(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Returns the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item in the list.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Insert(System.Int32,System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Inserts an item into this list at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index from the list.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ApplicationTypeList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The specified index.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Add(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Adds an item to this list.</para>
            </summary>
            <param name="item">
            <para>The item to add in the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Clear">
            <summary>
            <para>Removes all items from this list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Contains(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Returns true if the specified item is in the list.</para>
            </summary>
            <param name="item">
            <para>The specified item in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified item is in the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)">
            <summary>
            <para>Copies items from this list to the specified array starting at the specified index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional array that is the destination of elements copied from <see cref="T:System.Fabric.Query.ApplicationTypeList" />. The 
            array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ApplicationTypeList.Count">
            <summary>
            <para>Gets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationTypeList.IsReadOnly">
            <summary>
            <para>Gets or sets a value whether the list can only be modified if this property is false.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can only be modified; otherwise <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Remove(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Removes the specified item from the list.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.GetEnumerator">
            <summary>
            <para>Returns an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.ApplicationType">
            <summary>
            <para>Represents an application type.</para>
            </summary>
            <remarks>
                <para>
                    An application type is a categorization of an application and consists of a bundle of service types.
                    Details are described in this <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-application-model">document</see>.
                </para>
                <para>
                    An application type contains all that is needed for
                    a functioning application, such as the code packages for the services it encompasses. It also contains
                    an application manifest. When an application is instantiated from an application type, the application manifest
                    associated with the application type can be overridden. The application type must be uploaded before an application
                    can be created.
                </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.ApplicationTypeName">
            <summary>
            <para>Gets the application type name.</para>
            </summary>
            <value>
            <para>The application type name which is defined in the application manifest. This value, in conjunction
            with the application type version create a unique identifier for the application type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.ApplicationTypeVersion">
            <summary>
            <para>Gets the application type version.</para>
            </summary>
            <value>
            <para>The application type version which is defined in the application manifest. This value, in conjunction
            with the application type name create a unique identifier for the application type. This value need not
            be numerical in value.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.Status">
            <summary>
            <para>Gets the application type status.</para>
            </summary>
            <value>
            <para>The application type status which contains one of the values defined in the
            enumeration <see cref="M:System.Fabric.Query.ApplicationTypeStatus.#ctor" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.StatusDetails">
            <summary>
            <para>Gets the application type status details.</para>
            </summary>
            <value>
            <para>The application type status details. This contains information pertaining to provisioning of this application type.
            During provision, this contains progress information. Should provisioning fail, this provides the error message.
            This field is left blank otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.DefaultParameters">
            <summary>
            <para>Gets the default application parameters defined in the application manifest.</para>
            </summary>
            <value>
            <para>The default application parameters defined in the application manifest. 
            When an application is instantiated from this application type, these are the parameters used
            unless they are overridden. For details <see cref="T:System.Fabric.Description.ApplicationParameter"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.ApplicationTypeDefinitionKind">
            <summary>
            <para>Gets the definition kind.</para>
            </summary>
            <value>
            <para>The definition kind which contains one of the values defined in the
            enumeration <see cref="P:System.Fabric.Query.ApplicationType.ApplicationTypeDefinitionKind" />.</para>
            <para>Specifies the mechanism the user userd to define a Service Fabric application type.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ApplicationTypeStatus">
            <summary>
            Specifies the status of the application type.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeStatus.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeStatus.Provisioning">
            <summary>
            Currently being provisioned.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeStatus.Available">
            <summary>
            Currently available for use.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeStatus.Unprovisioning">
            <summary>
            Currently being unprovisioned.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationTypeStatus.Failed">
            <summary>
            Unavailable for use due to provisioning failure.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ClusterLoadInformation">
            <summary>
            <para>Represents the cluster load information.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ClusterLoadInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.ClusterLoadInformation" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ClusterLoadInformation.LastBalancingStartTimeUtc">
            <summary>
            <para>Gets the starting time (in UTC) of last resource balancing run.</para>
            </summary>
            <value>
            <para>The starting time of last resource balancing run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ClusterLoadInformation.LastBalancingEndTimeUtc">
            <summary>
            <para>Gets the end time (in UTC) of last resource balancing run.</para>
            </summary>
            <value>
            <para>The end time of last resource balancing run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ClusterLoadInformation.LoadMetricInformationList">
            <summary>
            <para>Gets a list of load metrics information object. Each entry is for a certain metrics.</para>
            </summary>
            <value>
            <para>A list of load metrics information object.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.ClusterLoadInformation.ToString">
            <summary>
            <para>
            Pretty print out details of <see cref="T:System.Fabric.Query.ClusterLoadInformation" />.
            </para>
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Query.ClusterLoadInformation"/>.</returns>
            <example>
            LastBalancingStartTimeUtc : 11/9/2015 8:40:35 PM
            LastBalancingEndTimeUtc   : 11/9/2015 8:40:35 PM
            LoadMetricInformation     :
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action    : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                ClusterLoad           : 1
                ClusterRemainingCapacity : 0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                ClusterRemainingBufferedCapacity : 0
                ClusterCapacityViolation : True
                MinNodeLoadValue      : 0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MaxNodeLoadValue      : 1
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
            </example>
        </member>
        <member name="T:System.Fabric.Query.LocalNetworkInformation">
            <summary>
            <para>Describes information of a local container network</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.LocalNetworkInformation.NetworkName">
            <summary>
            <para>Gets name of the container network.</para>
            </summary>
            <value>
            <para>Name of the container network.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LocalNetworkInformation.NetworkConfiguration">
            <summary>
            <para>Gets configuration of the container network.</para>
            </summary>
            <value>
            <para>Configuration of the container network.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LocalNetworkInformation.NetworkStatus">
            <summary>
            <para>Gets status of the container network.</para>
            </summary>
            <value>
            <para>Status of the container network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeLoadInformation">
            <summary>
            <para>Represents the data structure that holds a summary of all metrics and their load on a certain node.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.NodeLoadInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.NodeLoadInformation" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadInformation.NodeName">
            <summary>
            <para>Gets the name of the node.</para>
            </summary>
            <value>
            <para>The name of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadInformation.NodeLoadMetricInformationList">
            <summary>
            <para>Gets the list that contains metrics and their load information on a node.</para>
            </summary>
            <value>
            <para>The list that contains metrics and their load information on a node.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.PartitionLoadInformation">
            <summary>
            <para>Represents the partition load information.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PartitionLoadInformation.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Query.PartitionLoadInformation" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.PartitionLoadInformation.PartitionId">
            <summary>
            <para>Gets the partition ID. This command can be used as piping purpose.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PartitionLoadInformation.PrimaryLoadMetricReports">
            <summary>
            <para>Gets the list of load reports for primary role of this partition.</para>
            </summary>
            <value>
            <para>The list of load reports for primary role of this partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PartitionLoadInformation.SecondaryLoadMetricReports">
            <summary>
            <para>Gets the list of load reports for secondary role of this partition.</para>
            </summary>
            <value>
            <para>The list of load reports for secondary role of this partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ReplicaLoadInformation">
            <summary>
            <para>Represents the data structure that contains metric load information for a replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ReplicaLoadInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.ReplicaLoadInformation" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ReplicaLoadInformation.PartitionId">
            <summary>
            <para>Gets the partition Identifier.</para>
            </summary>
            <value>
            <para>The partition Identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ReplicaLoadInformation.ReplicaOrInstanceId">
            <summary>
            <para>Gets the replica Identifer (stateful service), or instanceId (stateless service).</para>
            </summary>
            <value>
            <para>The replica Identifier (stateful service), or instanceId (stateless service).</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ReplicaLoadInformation.LoadMetricReports">
            <summary>
            <para>Gets a list of metric and their load for a replica.</para>
            </summary>
            <value>
            <para>The list of metric and their load for a replica.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.UnplacedReplicaInformation">
            <summary>
            <para>
            Contains information for an unplaced replica.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.ServiceName">
            <summary>
            <para> 
            Gets the name of the service whose replica could not be placed.
            </para>
            </summary>
            <value>
            <para> The string to which ServiceName will be set. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.PartitionId">
            <summary>
            <para> 
            Gets the Partition Id (as a Guid) of the service whose replica could not be placed.
            </para>
            </summary>
            <value>
            <para> The Guid to which PartitionId will be set. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.UnplacedReplicaReasons">
            <summary>
            <para> 
            Gets the reasons (as a list of strings) why a service's replicas could not be placed.
            </para>
            </summary>
            <value>
            <para>The reasons why service replicas could not be placed.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.UnplacedReplicaInformation.#ctor(System.String,System.Guid,System.Collections.Generic.IList{System.String})">
            <summary>
            <para> 
            Constructor that creates an object of UnplacedReplicaInformation.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service whose replica could not be placed. </para>
            </param>
            <param name="partitionId">
            <para>The Partition Id (as a Guid) of the service whose replica could not be placed. </para>
            </param>
            <param name="reasonsList">
            <para>The reasons (as a list of strings) why a service's replicas could not be placed. </para>
            </param>
        </member>
        <member name="T:System.Fabric.Query.ApplicationLoadInformation">
            <summary>
            <para> Describes the load of an application instance that is retrieved using
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationLoadInformationAsync(System.String)" />
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationLoadInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.ApplicationLoadInformation" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadInformation.Name">
            <summary>
            Gets or sets the name of the application.
            </summary>
            <value>
            The name of the application.
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadInformation.MinimumNodes">
            <summary>
            Gets the minimum number of nodes for this application.
            </summary>
            <value>
            <para>
            Number of nodes where Service Fabric will reserve Capacity in the cluster for this Application instance.
            This value is equal to <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes"/> that was set when the application was created or updated.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadInformation.MaximumNodes">
            <summary>
            Gets the maximum number of nodes where this application can be instantiated.
            </summary>
            <value>
            <para>
            Number of nodes this application is allowed to span.
            This value is equal to <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes" /> that was set when application was created or updated.
            </para>
            </value>
            <remarks>
            For applications that do not have application capacity defined this value will be zero.
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadInformation.NodeCount">
            <summary>
            Gets the number of nodes on which this application is instantiated.
            </summary>
            <value>
            <para>
            The number of nodes on which this application is currently instantiated.
            </para>
            </value>
            <remarks>
            For applications that do not have application capacity defined this value will be zero.
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadInformation.ApplicationLoadMetricInformation">
            <summary>
            Gets the list of loads per metric for this application instance.
            </summary>
            <value>
            The list of loads per metric for for this application instance. For each metric that was defined in 
            <see cref="F:System.Fabric.Description.ApplicationDescription.Metrics"/> when application was created or updated there will be one instance of
            <see cref="T:System.Fabric.Query.ApplicationLoadMetricInformation"/> in this list.
            </value>
            <remarks>
            For applications that do not have application capacity defined this list will be empty.
            </remarks>
        </member>
        <member name="M:System.Fabric.Query.ApplicationLoadInformation.ToString">
            <summary>
            <para>
            Pretty print out details of <see cref="T:System.Fabric.Query.ApplicationLoadInformation" />.
            </para>
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Query.ApplicationLoadInformation"/>.</returns>
            <example>
            "ApplicationName": "fabric:/LoadBalancingAppType",
            "MinimumNodes": 0,
            "MaximumNodes": 0,
            "NodeCount": 0,
            "ApplicationLoadMetricInformation": [],
            </example>
        </member>
        <member name="T:System.Fabric.Query.CodePackageEntryPoint">
            <summary>
            <para>Represents a code package entry point.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.EntryPointLocation">
            <summary>
            <para>Gets the entry point location.</para>
            </summary>
            <value>
            <para>The entry point location.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.ProcessId">
            <summary>
            <para>Gets the process ID.</para>
            </summary>
            <value>
            <para>The process ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.RunAsUserName">
            <summary>
            <para>Gets the run as user name.</para>
            </summary>
            <value>
            <para>The run as user name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.Statistics">
            <summary>
            <para>Gets the statistics.</para>
            </summary>
            <value>
            <para>The statistics.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.EntryPointStatus">
            <summary>
            <para>Gets the entry point status.</para>
            </summary>
            <value>
            <para>The entry point status.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.NextActivationUtc">
            <summary>
            <para>Gets the next activation UTC.</para>
            </summary>
            <value>
            <para>The next activation UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.CodePackageInstanceId">
            <summary>
            <para>
            Gets the code package instance id.
            </para>
            </summary>
            <value>
            <para>The code package instance id.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.CodePackageUsageStatistics">
            <summary>
            <para>Represents code package usage statistics.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.CodePackageUsageStatistics.#ctor(System.DateTime,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Key/Value pair of various code package metrics.</para>
            </summary>
            <value>
            <para>Key/Value pair of various code package metrics.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageUsageStatistics.CodePackageStats">
            <summary>
            <para>Key/Value pair of various code package metrics.</para>
            </summary>
            <value>
            <para>Key/Value pair of various code package metrics.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageUsageStatistics.TimeRead">
            <summary>
            <para>The time when the container stats were measured.</para>
            </summary>
            <value>
            <para>The time when the container stats were measured.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.CodePackageEntryPointStatistics">
            <summary>
            <para>Represents a code package entry point statistic.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastExitCode">
            <summary>
            <para>Gets the exit code.</para>
            </summary>
            <value>
            <para>The last exit code.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastActivationUtc">
            <summary>
            <para>Gets the last activation time in UTC.</para>
            </summary>
            <value>
            <para>The last activation time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastExitUtc">
            <summary>
            <para>Gets the last exit time in UTC.</para>
            </summary>
            <value>
            <para>The last exit time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastSuccessfulActivationUtc">
            <summary>
            <para>Gets the last successful activation time in UTC.</para>
            </summary>
            <value>
            <para>The last successful activation time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastSuccessfulExitUtc">
            <summary>
            <para>Gets the last successful exit time in UTC.</para>
            </summary>
            <value>
            <para>The last successful exit time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ActivationCount">
            <summary>
            <para>Gets the activation count.</para>
            </summary>
            <value>
            <para>The activation count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ActivationFailureCount">
            <summary>
            <para>Gets the activation failure count.</para>
            </summary>
            <value>
            <para>The activation failure count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ContinuousActivationFailureCount">
            <summary>
            <para>Gets the continuous activation failure count.</para>
            </summary>
            <value>
            <para>The continuous activation failure count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ExitCount">
            <summary>
            <para>Gets the exit count.</para>
            </summary>
            <value>
            <para>The exit count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ExitFailureCount">
            <summary>
            <para>Gets the exit failure count.</para>
            </summary>
            <value>
            <para>The exit failure count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ContinuousExitFailureCount">
            <summary>
            <para>Gets the continuous exit failure count.</para>
            </summary>
            <value>
            <para>The continuous exit failure count.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedApplicationList">
            <summary>
            <para>Represents the list of <see cref="T:System.Fabric.Query.DeployedApplication" /> objects.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.IndexOf(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specific item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Insert(System.Int32,System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplicationList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The item location.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Add(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Adds the specified item to the list</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Clear">
            <summary>
            <para>Removes all items from the list</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Contains(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Indicates a flag that specifies whether the list contains a specific item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specific item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.CopyTo(System.Fabric.Query.DeployedApplication[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array of index where the items will be copied to.</para>
            </param>
            <param name="arrayIndex">
            <para>The array index.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplicationList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplicationList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list can be modified.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can be modified; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Remove(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Remove the specified item from this list</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The item enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.DeployedApplication">
            <summary>
            <para>Describes an instance of an application’s service host running on a Service Fabric Node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.ApplicationTypeName">
            <summary>
            <para>Gets the application type name.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.DeployedApplicationStatus">
            <summary>
            <para>Gets the status of the deployed application instance.</para>
            </summary>
            <value>
            <para>The status of the deployed application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.WorkDirectory">
            <summary>
            <para>Gets the work directory path used by the deployed application instance.</para>
            </summary>
            <value>
            <para>The work directory path used by the deployed application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.LogDirectory">
            <summary>
            <para>Gets the log directory path used by the deployed application instance.</para>
            </summary>
            <value>
            <para>The log directory path used by the deployed application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.TempDirectory">
            <summary>
            <para>Gets the temp directory path used by the deployed application instance.</para>
            </summary>
            <value>
            <para>The temp directory path used by the deployed application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.HealthState">
            <summary>
            <para>Gets the aggregated health state of the deployed application instance.</para>
            </summary>
            <value>
                <para>The aggregated health state of the deployed application instance.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedCodePackageList">
            <summary>
            <para>Represents this list that can be modified only if this property is false.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.IndexOf(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified index of the item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Insert(System.Int32,System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackageList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The specified index of the item.</para>
            </param>
            <returns>
            <para>The deployed item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Add(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to be added.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Contains(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Returns true if the specified item is in the list.</para>
            </summary>
            <param name="item">
            <para>The specified item that contained in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains the specified item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.CopyTo(System.Fabric.Query.DeployedCodePackage[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional array.</para>
            </param>
            <param name="arrayIndex">
            <para>The index in the destination array to start copying.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackageList.Count">
            <summary>
            <para>Gets or sets a value that indicates the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackageList.IsReadOnly">
            <summary>
            <para>Gets or sets a value that indicates whether this list can be modified only if this property is false.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can only be modified; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Remove(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Removes the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.DeployedCodePackage">
            <summary>
            <para>Represents a deployed code package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.CodePackageName">
            <summary>
            <para>Gets the code package name.</para>
            </summary>
            <value>
            <para>The code package name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.CodePackageVersion">
            <summary>
            <para>Gets the code package version.</para>
            </summary>
            <value>
            <para>The code package version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.SetupEntryPoint">
            <summary>
            <para>Gets the setup entry point.</para>
            </summary>
            <value>
            <para>The setup entry point.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            A string representing <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package.
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of
            <see cref="P:System.Fabric.Query.DeployedCodePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.RunFrequencyInterval">
            <summary>
            <para>Gets the run frequency interval.</para>
            </summary>
            <value>
            <para>The run frequency interval.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.DeployedCodePackageStatus">
            <summary>
            <para>Gets the code package status.</para>
            </summary>
            <value>
            <para>The status of the deployed code package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.HostType">
            <summary>
            <para>Get the <see cref="T:System.Fabric.HostType"/> for main entry point.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.HostType"/> of main entry point.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.HostIsolationMode">
            <summary>
            <para>Get the <see cref="T:System.Fabric.HostIsolationMode"/> for main entry point.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.HostIsolationMode"/> of main entry point.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.EntryPoint">
            <summary>
            <para>Gets the main entry point.</para>
            </summary>
            <value>
            <para>The main entry point.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.CodePackageUsageStatistics">
            <summary>
            <para>Get the <see cref="T:System.Fabric.Query.CodePackageUsageStatistics"/> Code package package statistics.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Query.CodePackageUsageStatistics"/> Code package package statistics.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedNetworkCodePackageList">
            <summary>
            <para>Represents one page of <see cref="T:System.Fabric.Query.DeployedNetworkCodePackage" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkCodePackageListAsync(System.Fabric.Description.DeployedNetworkCodePackageQueryDescription)" />. Paged lists consist
            of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedNetworkCodePackage">
            <summary>
            <para>Describes a deployed code package in a container network.</para>
            </summary>    
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.ApplicationName">
            <summary>
            <para>Gets the URI name of the application instance.</para>
            </summary>
            <value>
            <para>The URI name of the application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.NetworkName">
            <summary>
            <para>Gets the network name where the code package is running.</para>
            </summary>
            <value>
            <para>The network name where the code package is running.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.CodePackageName">
            <summary>
            <para>Gets the code package name.</para>
            </summary>
            <value>
            <para>The code package name.</para>
            </value>        
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.CodePackageVersion">
            <summary>
            <para>Gets the code package version.</para>
            </summary>
            <value>
            <para>The code package version.</para>
            </value>        
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            A string representing <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package. 
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Query.DeployedCodePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.ContainerAddress">
            <summary>
            <para>Gets the address of the container in the container network.</para>
            </summary>
            <value>
            <para>The address of the container in the container network.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedNetworkCodePackage.ContainerId">
            <summary>
            <para>Gets the id of the container.</para>
            </summary>
            <value>
            <para>The id of the container.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedNetworkList">
            <summary>
            <para>Represents one page of <see cref="T:System.Fabric.Query.DeployedNetwork" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkListAsync(System.Fabric.Description.DeployedNetworkQueryDescription)" />. Paged lists consist
            of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedNetwork">
            <summary>
            <para>Describes a container network deployed to a node.</para>
            </summary>    
        </member>
        <member name="P:System.Fabric.Query.DeployedNetwork.NetworkName">
            <summary>
            <para>Gets the name of the network.</para>
            </summary>
            <value>
            <para>The name of the network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServicePackageList">
            <summary>
            <para>Represents a list of <see cref="T:System.Fabric.Query.DeployedServicePackage" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.IndexOf(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Gets the index of the specified item in this list</para>
            </summary>
            <param name="item">
            <para>The item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Insert(System.Int32,System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which <paramref name="item" /> should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackageList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to get.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Add(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Contains(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Indicates whether the specified item is in the list.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified item is in the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.CopyTo(System.Fabric.Query.DeployedServicePackage[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The destination of the items copied from the list.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in <paramref name="array" /> at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackageList.Count">
            <summary>
            <para>Gets the number of items in this list</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackageList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Remove(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Removes the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The item to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if successfully removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.DeployedServicePackage">
            <summary>
            <para>
            Describes a deployed service package. This can be obtained by using query
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> or query
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription)"/>
            which return a list of <see cref="T:System.Fabric.Query.DeployedServicePackage"/> on a given node.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            A string representing ActivationId of deployed service package.
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.ServiceManifestVersion">
            <summary>
            <para>Gets the service manifest version.</para>
            </summary>
            <value>
            <para>The service manifest version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.DeployedServicePackageStatus">
            <summary>
            <para>Gets the deployed service package status.</para>
            </summary>
            <value>
            <para>The status of the deployed service package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.HealthState">
            <summary>
            <para>Gets the aggregated health state of the deployed service package instance.</para>
            </summary>
            <value>
                <para>The health state is Unknown unless explicitly queried for in <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription)"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceReplicaDetail">
            <summary>
            <para>Represents a replica running in the code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaDetail.#ctor(System.Fabric.Query.ServiceKind)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Query.DeployedServiceReplicaDetail" /> object with specified service kind.
            </para>
            </summary>
            <param name="serviceKind">
            <para>The type of the service</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ServiceKind">
            <summary>
            <para>
            Gets the type of the service 
            </para>
            </summary>
            <value>
            <para>The service kind representing the type of the service this replica belongs to</para>
            </value>
            <remarks>
            <para>
            Based on the value of this property this object can be
            downcasted to DeployedStatefulServiceReplicaDetail or DeployedStatelessServiceInstanceDetail
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ServiceName">
            <summary>
            <para>Gets or sets the service name to which this replica belongs.</para>
            </summary>
            <value>
            <para>The service name to which this replica belongs.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.PartitionId">
            <summary>
            <para>Gets or sets the partition id associated with this replica.</para>
            </summary>
            <value>
            <para>The partition id associated with this replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.CurrentServiceOperation">
            <summary>
            <para>Gets or sets the current API call that is being executed on the replica.</para>
            </summary>
            <value>
            <para>The current API call that is being executed on the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.CurrentServiceOperationStartTimeUtc">
            <summary>
            <para>Gets or sets the start time of the current service operation in UTC format.</para>
            </summary>
            <value>
            <para>The start time of the current service operation in UTC format.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ReportedLoad">
            <summary>
            <para>Gets or sets the load reported by this replica.</para>
            </summary>
            <value>
            <para>The load reported by this replica.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceReplicaList">
            <summary>
            <para>Contains list of deployed service replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.IndexOf(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Gets the index of specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Insert(System.Int32,System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaList.Item(System.Int32)">
            <summary>
            <para>Gets an element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index.</para>
            </param>
            <returns>
            <para>The element at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Add(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be added to the collection.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Contains(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item exists; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.CopyTo(System.Fabric.Query.DeployedServiceReplica[],System.Int32)">
            <summary>
            <para>Copies items from this list to the specified array starting at the specified index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from  
            HYPERLINK "http://msdn.microsoft.com/en-us/library/system.collections.icollection(v=vs.110).aspx" collection. The Array 
            must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaList.Count">
            <summary>
            <para>Gets the number of service replica.</para>
            </summary>
            <value>
            <para>The number of service replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the collection is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Remove(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if successfully removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Retrieves an enumerator that iterates through the collection.</para>
            </summary>
            <returns>
            <para>An enumerator that iterates through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceReplica">
            <summary>
            <para>Represents the view of a replica on a node.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplica.#ctor(System.Fabric.Query.ServiceKind)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedServiceReplica"/> class.</para>
            </summary>
            <param name="kind">
              <para>The service kind.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceKind">
            <summary>
            <para>The type of the replica (Stateful or Stateless).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceKind" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceName">
            <summary>
            <para>The name of the service.</para>
            </summary>
            <value>
            <para>The name of the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceTypeName">
            <summary>
            <para>The name of the service type.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestVersion">
            <summary>
            <para>The version of the service manifest.</para>
            </summary>
            <value>
            <para>The version of the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.CodePackageName">
            <summary>
            <para>The name of the code package that hosts this replica.</para>
            </summary>
            <value>
            <para>The name of the code package that hosts this replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.Partitionid">
            <summary>
            <para>The partition id for this replia.</para>
            </summary>
            <value>
            <para>The partition id for this replia.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestName">
            <summary>
            <para>The name of the service package that contains the code package hosting this replica.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServicePackageActivationId">
            <summary>
            The ActivationId of service package.
            </summary>
            <value>
            <para>
            A string representing ActivationId of deployed service package.
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of
            <see cref="P:System.Fabric.Query.DeployedServiceReplica.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            <remarks>
            This can have null value if <see cref="P:System.Fabric.Query.DeployedServiceReplica.ReplicaStatus"/> is other than <see cref="F:System.Fabric.Query.ServiceReplicaStatus.InBuild"/>,
            <see cref="F:System.Fabric.Query.ServiceReplicaStatus.Standby"/> or <see cref="F:System.Fabric.Query.ServiceReplicaStatus.Ready"/>.
            </remarks>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ReplicaStatus">
            <summary>
            <para>The status of the replica.</para>
            </summary>
            <value>
            <para>The status of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.Address">
            <summary>
            <para>The last address returned by the replica in Open or ChangeRole.</para>
            </summary>
            <value>
            <para>The last address returned by the replica in Open or ChangeRole.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.HostProcessId">
            <summary>
            <para>The host process id.</para>
            <value>This will be zero if the replica is down.</value>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestVersion_">
            <summary>
            Internal property to access ServiceManifestVersion with #pragma warning disable around the accessor
            This is because even though the property is obsolete, product and unit test code still needs to validate it is correct
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceTypeList">
            <summary>
            <para>Represents a list of <see cref="T:System.Fabric.Query.DeployedServiceType" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.IndexOf(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The item in the list.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Insert(System.Int32,System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceTypeList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Add(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Contains(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Indicates a flag that specifies whether the list contains a specific item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specific item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.CopyTo(System.Fabric.Query.DeployedServiceType[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array.</para>
            </param>
            <param name="arrayIndex">
            <para>The starting index of the array.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceTypeList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceTypeList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list can be modified.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can be modified; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Remove(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Remove the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.ServiceTypeRegistrationStatus">
            <summary>
            <para>Specifies the service type registration status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.Disabled">
            <summary>
            <para>Service type is disabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.NotRegistered">
            <summary>
            <para>Service type is not registered.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.Registered">
            <summary>
            <para>Service type is registered.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceType">
            <summary>
            <para>Represents a deployed service type.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.ServiceTypeName">
            <summary>
            <para>Gets the service type name.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.CodePackageName">
            <summary>
            <para>Gets the code package name.</para>
            </summary>
            <value>
            <para>The code package name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The name of the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            A string representing ActivationId of deployed service package.
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of
            <see cref="P:System.Fabric.Query.DeployedServiceType.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.ServiceTypeRegistrationStatus">
            <summary>
            <para>Gets the service type registration status.</para>
            </summary>
            <value>
            <para>The status of the service type registration.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatefulServiceReplicaDetail">
            <summary>
            <para>Represents the information about a stateful replica running in a code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedStatefulServiceReplicaDetail" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.ReplicaId">
            <summary>
            <para>Gets the replica ID of this replica.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.CurrentReplicatorOperation">
            <summary>
            <para>Gets the current APIs running on the replicator.</para>
            </summary>
            <value>
            <para>The current APIs running on the replicator.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.ReadStatus">
            <summary>
            <para>Gets the current read status for this replica.</para>
            </summary>
            <value>
            <para>The current read status for this replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.WriteStatus">
            <summary>
            <para>Gets the current write status of the replica.</para>
            </summary>
            <value>
            <para>The current write status of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.ReplicatorStatus">
            <summary>
            <para>Gets the information about the replicator if the replica is using the Service Fabric Replicator</para>
            </summary>
            <value>
            <para>The replicator status.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.ReplicaStatus">
            <summary>
            Gets a value indicating the status of the current replica.
            </summary>
            <value>The replica status.</value>
            <remarks>Currently, only replicas of type <see cref="T:System.Fabric.KeyValueStoreReplica" /> will produce query status details.</remarks>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.DeployedServiceReplica">
            <summary>
            <para>Gets additonal details about the deployed service replica like replica role, host processId, information about reconfiguration.</para>
            <value>Replica Detail.</value>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatefulServiceReplica">
            <summary>
            <para>Represents a deployed stateful service replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatefulServiceReplica.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedStatefulServiceReplica" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplica.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplica.ReplicaRole">
            <summary>
            <para>Gets the current replica role.</para>
            </summary>
            <value>
            <para>The replica role.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplica.ReconfigurationInformation">
            <summary>
            <para>Gets additional information about the current reconfiguration like previous configuration role,
             reconfiguration type, reconfiguration phase and reconfiguration start date time.</para>
            <value>Reconfiguration Information.</value>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatelessServiceInstanceDetail">
            <summary>
            <para>Represents the information about a stateless instance running in a code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatelessServiceInstanceDetail.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedStatelessServiceInstanceDetail" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatelessServiceInstanceDetail.InstanceId">
            <summary>
            <para>Gets or sets the instance identifier of this instance.</para>
            </summary>
            <value>
            <para>The instance identifier of this instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatelessServiceInstanceDetail.DeployedServiceReplicaInstance">
            <summary>
            <para>Gets additonal details about deployed service instance like host process id, code package name.</para>
            <value>Replica Detail.</value>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatelessServiceInstance">
            <summary>
            <para>Represents a deployed stateless service instance.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatelessServiceInstance.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Query.DeployedStatelessServiceInstance" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatelessServiceInstance.InstanceId">
            <summary>
            <para>Gets the instance ID.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ComposeDeploymentStatusWrapper">
            <summary>
            Specifies the status of the compose application.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Provisioning">
            <summary>
            The application type is being provisioned at background.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Creating">
            <summary>
            The application is being created at background.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Ready">
            <summary>
            The docker compose application creation or upgrade is completed.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Unprovisioning">
            <summary>
            The application type is being unprovisioned at background..
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Deleting">
            <summary>
            The application is being deleted at background.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Failed">
            <summary>
            Creation or deletion was terminated due to persistent failures.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ComposeDeploymentStatusWrapper.Upgrading">
            <summary>
            The deployment is being upgraded.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricCodeVersion">
            <summary>
            <para>Represents a provisioned Service Fabric code (MSI) version retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync(System.String)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersion.CodeVersion">
            <summary>
            <para>Gets the product version of Service Fabric.</para>
            </summary>
            <value>
            <para>The product version of Service Fabric.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricCodeVersionList">
            <summary>
            <para>Represents a list of provisioned Service Fabric code versions retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.IndexOf(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Insert(System.Int32,System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The location where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersionList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Add(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to be added to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Contains(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Indicates whether the list contains a specified item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specified item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.CopyTo(System.Fabric.Query.ProvisionedFabricCodeVersion[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array of items to copy.</para>
            </param>
            <param name="arrayIndex">
            <para>The index where the array of items will be copied to.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersionList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersionList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list is read only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Remove(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Remove the specified item from this list</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricConfigVersion">
            <summary>
            <para>Represents a provisioned Service Fabric configuration (Cluster Manifest) version retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersion.ConfigVersion">
            <summary>
            <para>Gets the configuration version.</para>
            </summary>
            <value>
            <para>The configuration version.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricConfigVersionList">
            <summary>
            <para>Represents the list of provisioned Service Fabric configuration (Cluster Manifest) versions retrieved by 
            calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync(System.String)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.IndexOf(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Returns the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item to locate in the list.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Insert(System.Int32,System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Inserts the specified item into this list at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item from the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersionList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The specified index.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Add(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Adds the specified item to this list.</para>
            </summary>
            <param name="item">
            <para>The specified item to add in the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Clear">
            <summary>
            <para>Removes all items from this list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Contains(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Returns true if the specified item is contained in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item that is contained in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified item is contained in this list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.CopyTo(System.Fabric.Query.ProvisionedFabricConfigVersion[],System.Int32)">
            <summary>
            <para>Copies items from this list to the specified array at the specified index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional array that is the destination of elements copied from <see cref="T:System.Fabric.Query.ProvisionedFabricConfigVersionList" />. 
            The array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersionList.Count">
            <summary>
            <para>Gets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersionList.IsReadOnly">
            <summary>
            <para>Gets a value that indicates whether the list can be modified only if this property is false.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can be modified only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Remove(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Removes the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.GetEnumerator">
            <summary>
            <para>Returns an enumerator to the items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to the items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator to the items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to the items in this list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.LoadMetricReport">
            <summary>
            <para>Represents the load metric report.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadMetricReport.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.LoadMetricReport" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricReport.Name">
            <summary>
            <para>Gets the name of the metric.</para>
            </summary>
            <value>
            <para>The name of the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricReport.Value">
            <summary>
            <para>Gets the value of the load for the metric.</para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.LoadMetricReport.CurrentValue"/>.
            </para>
            </summary>
            <value>
            <para>The value of the load for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricReport.CurrentValue">
            <summary>
            <para>Gets the value of the load for the metric.</para>
            </summary>
            <value>
            <para>The value of the load for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricReport.LastReportedUtc">
            <summary>
            <para>Gets the UTC time when the load is reported.</para>
            </summary>
            <value>
            <para>The UTC time when the load is reported.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.LoadMetricInformation">
            <summary>
            <para>Represents the load metric information.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadMetricInformation.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Query.LoadMetricInformation"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Name">
            <summary>
            <para>Gets the name of the metric.</para>
            </summary>
            <value>
            <para>The name of the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedBefore">
            <summary>
            <para>Gets a value that indicates whether the metrics is balanced or not before resource balancer run.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the metrics is balanced or not before resource balancer run; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedAfter">
            <summary>
            <para>Gets a value that indicates whether the metrics is balanced or not after resource balancer run.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the metrics is balanced or not after resource balancer run; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationBefore">
            <summary>
            <para>Gets the standard average deviation of the metrics before resource balancer run.</para>
            </summary>
            <value>
            <para>The standard average deviation of the metrics before resource balancer run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationAfter">
            <summary>
            <para>Gets the standard average deviation of the metrics after resource balancer run.</para>
            </summary>
            <value>
            <para>The standard average deviation of the metrics after resource balancer run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.BalancingThreshold">
            <summary>
            <para>Gets he balancing threshold for a certain metric.</para>
            </summary>
            <value>
            <para>The balancing threshold for a certain metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Action">
            <summary>
            <para>Gets the current action being taken with regard to this metric. Examples could be placement, balancing, and constraint checks.</para>
            </summary>
            <value>
            <para>The current action being taken with regard to this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ActivityThreshold">
            <summary>
            <para>Gets the Activity Threshold specified for this metric in the system Cluster Manifest.</para>
            </summary>
            <value>
            <para>The Activity Threshold specified for this metric in the system Cluster Manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterCapacity">
            <summary>
            <para>Gets the total cluster capacity for a given metric, determined by summing the capacity for the metric across all nodes.</para>
            </summary>
            <value>
            <para>The total cluster capacity for a given metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterLoad">
            <summary>
            <para>Gets the total cluster load for a specific metric within the cluster</para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.LoadMetricInformation.CurrentClusterLoad"/>.
            </para>
            </summary>
            <value>
            <para>The total cluster load.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.CurrentClusterLoad">
            <summary>
            <para>Gets the total cluster load for a specific metric within the cluster.</para>
            </summary>
            <value>
            <para>The total cluster load.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingCapacity">
            <summary>
            <para>Gets remaining capacity for the metric in the cluster. Remaining capacity is defined as the current Cluster Capacity 
            minus the current Cluster Load.</para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.LoadMetricInformation.ClusterCapacityRemaining"/>.
            </para>
            </summary>
            <value>
            <para>The remaining capacity for the metric in the cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterCapacityRemaining">
            <summary>
            <para>Gets remaining capacity for the metric in the cluster. Remaining capacity is defined as the current Cluster Capacity 
            minus the current Cluster Load.</para>
            </summary>
            <value>
            <para>The remaining capacity for the metric in the cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsClusterCapacityViolation">
            <summary>
            <para>Gets whether the metric is currently over capacity in the cluster.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the metric is currently over capacity in the cluster; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.NodeBufferPercentage">
            <summary>
            <para>
            Gets the reserved percentage of total node capacity for this metric
            </para>
            </summary>
            <value>
            <para>The reserved percentage of total node capacity for this metric</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterBufferedCapacity">
            <summary>
            <para>
            The reserved percentage of cluster total capacity for this metric
            </para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.LoadMetricInformation.BufferedClusterCapacityRemaining"/>.
            </para>
            </summary>
            <value>
            <para>ClusterBufferedCapacity property gets/sets the value of the long field, _clusterBufferedCapacity.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.BufferedClusterCapacityRemaining">
            <summary>
            <para>
            The reserved percentage of cluster total capacity for this metric
            </para>
            </summary>
            <value>
            <para>Remaining capacity in the cluster excluding the reserved space.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingBufferedCapacity">
            <summary>
            <para>
            Gets the remaining percentage of cluster total capacity for this metric
            </para>
            </summary>
            <value>
            <para>The remaining percentage of cluster total capacity for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadValue">
            <summary>
            <para>
            Gets the minimum load on any node for this metric.
            </para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.LoadMetricInformation.MinimumNodeLoad"/>.
            </para>
            </summary>
            <value>
            <para>The minimum load on any node for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinimumNodeLoad">
            <summary>
            <para>
            Gets the minimum load on any node for this metric.
            </para>
            </summary>
            <value>
            <para>The minimum load on any node for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadNodeId">
            <summary>
            <para>
            Gets the node id of the node with the minimum load for this metric
            </para>
            </summary>
            <value>
            <para>The node id of the node with the minimum load for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadValue">
            <summary>
            <para>
            Gets the maximum load on any node for this metric.
            </para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.LoadMetricInformation.MaximumNodeLoad"/>.
            </para>
            </summary>
            <value>
            <para>The maximum load on any node for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaximumNodeLoad">
            <summary>
            <para>
            Gets the maximum load on any node for this metric.
            </para>
            </summary>
            <value>
            <para>The maximum load on any node for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadNodeId">
            <summary>
            <para>
            Gets the node id of the node with the maximum load for this metric
            </para>
            </summary>
            <value>
            <para>The node id of the node with the maximum load for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.PlannedLoadRemoval">
            <summary>
            <para>Gets the total load of the replicas that are planned to be removed in the future within the cluster.</para>
            </summary>
            <value>
            <para>
            This value represents the load of the replicas that are planned to be removed in the future.
            There are two cases where "PlannedLoadRemoval" kind of load will be reported:
            1) Replicas that are currently being moving to other nodes
            2) Replicas that are currently being dropped but still use the load on the source node
            </para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.LoadMetricInformation.ToString">
            <summary>
            <para>
            Pretty print out each field of <see cref="T:System.Fabric.Query.LoadMetricInformation" />.
            </para>
            </summary>
            <returns>
            <para>A string representing the load metric information.</para>
            </returns>
            <example>
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action    : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                CurrentClusterLoad    : 1.0
                ClusterCapacityRemaining : 0.0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                BufferedClusterCapacityRemaining : 0.0
                ClusterCapacityViolation : True
                MaximumNodeLoad       : 1.0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MinimumNodeLoad       : 0.0
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
                PlannedLoadRemoval    : 0.0
            </example>
        </member>
        <member name="T:System.Fabric.Query.NetworkApplication">
            <summary>
            <para>Describes an application in a container network.</para>
            </summary>    
        </member>
        <member name="P:System.Fabric.Query.NetworkApplication.ApplicationName">
            <summary>
            <para>Gets the name of the application as a URI.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NetworkNode">
            <summary>
            <para>Describes a node in a container network.</para>
            </summary>    
        </member>
        <member name="P:System.Fabric.Query.NetworkNode.NodeName">
            <summary>
            <para>Gets the name of the node.</para>
            </summary>
            <value>
            <para>The name of the node.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ApplicationNetwork">
            <summary>
            <para>Describes a container network that an application is a member of.</para>
            </summary>    
        </member>
        <member name="P:System.Fabric.Query.ApplicationNetwork.NetworkName">
            <summary>
            <para>Gets the name of the network.</para>
            </summary>
            <value>
            <para>The name of the network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NetworkInformation">
            <summary>
            <para>Describes the base class for network information.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NetworkInformation.NetworkType">
            <summary>
            <para>Gets type of the container network.</para>
            </summary>
            <value>
            <para>Type of the container network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeLoadMetricInformation">
            <summary>
            <para>Represents data structure that contains load information for a certain metric on a node.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.NodeLoadMetricInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.NodeLoadMetricInformation" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.Name">
            <summary>
            <para>Gets the name of the metric.</para>
            </summary>
            <value>
            <para>The name of the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeCapacity">
            <summary>
            <para>Gets the total capacity on the node for the metric.</para>
            </summary>
            <value>
            <para>The total capacity on the node for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeLoad">
            <summary>
            <para>Gets the current load on the node for a metric.</para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.NodeLoadMetricInformation.CurrentNodeLoad"/>.
            </para>
            </summary>
            <value>
            <para>The current load on the node for a metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.CurrentNodeLoad">
            <summary>
            <para>>Gets the current load on the node for a metric.</para>
            </summary>
            <value>
            <para>The current load on the node for a metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeRemainingCapacity">
            <summary>
            <para>Gets the remaining capacity on the node for the metric.</para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.NodeLoadMetricInformation.NodeCapacityRemaining"/>.
            </para>
            </summary>
            <value>
            <para>The remaining capacity on the node for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeCapacityRemaining">
            <summary>
            <para>Gets the remaining capacity on the node for the metric.</para>
            </summary>
            <value>
            <para>The remaining capacity on the node for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.IsCapacityViolation">
            <summary>
            <para>Gets a value that indicates whether there is a capacity violation for the metric on the given node.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if there is a capacity violation for the metric on the given node; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeBufferedCapacity">
            <summary>
            <para>Gets a value that indicates the capacity which is not reserved by NodeBufferPercentage.</para>
            </summary>
            <value>
            <para>The capacity which is not reserved by NodeBufferPercentage for this metric on the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeRemainingBufferedCapacity">
            <summary>
            <para>Gets a value that indicates the remaining capacity which is not reserved by NodeBufferPercentage.</para>
            <para>
            In future releases of Service Fabric this parameter will be deprecated in favor of
            <see cref="P:System.Fabric.Query.NodeLoadMetricInformation.BufferedNodeCapacityRemaining"/>.
            </para>
            </summary>
            <value>
            <para>The remaining capacity which is not reserved by NodeBufferPercentage for this metric on the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.BufferedNodeCapacityRemaining">
            <summary>
            <para>Gets a value that indicates the remaining capacity which is not reserved by NodeBufferPercentage.</para>
            </summary>
            <value>
            <para>The remaining capacity which is not reserved by NodeBufferPercentage for this metric on the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.PlannedNodeLoadRemoval">
            <summary>
            <para>Gets the load of the replicas on the node that are planned to be removed in the future.</para>
            </summary>
            <value>
            <para>
            This value represents the load of the replicas on the node that are planned to be removed in the future.
            There are two cases where "PlannedNodeLoadRemoval" kind of load will be reported:
            1) Replicas that are currently being moving to other nodes
            2) Replicas that are currently being dropped but still use the load on the source node.
            </para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ApplicationLoadMetricInformation">
            <summary>
            Represents the information about capacity and current load for one metric that services of the application are using.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationLoadMetricInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.ApplicationLoadMetricInformation" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadMetricInformation.Name">
            <summary>
            Gets the name of the metric.
            </summary>
            <value>
            The name of the metric.
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadMetricInformation.ReservationCapacity">
            <summary>
            Gets the reserved capacity for this metric.
            </summary>
            <value>
            The ammount of capacity that is reserved in the cluster for this application.
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadMetricInformation.ApplicationCapacity">
            <summary>
            Gets the total capacity for this metric.
            </summary>
            <value>
            The total capacity that is available for this metric that the services of this application can use.
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationLoadMetricInformation.ApplicationLoad">
            <summary>
            Gets the load for this metric.
            </summary>
            <value>
            The total load that the services of this application are using.
            </value>
        </member>
        <member name="M:System.Fabric.Query.ApplicationLoadMetricInformation.ToString">
            <summary>
            <para>
            Pretty print out details of <see cref="T:System.Fabric.Query.ApplicationLoadMetricInformation" />.
            </para>
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Query.ApplicationLoadMetricInformation"/>.</returns>
            <example>
            LoadMetricName        : Metric1
            ReservationCapacity   : 10
            ApplicationCapacity   : 10
            ApplicationLoad       : 2
            </example>
        </member>
        <member name="T:System.Fabric.Query.NetworkApplicationList">
            <summary>
            <para>Represents one page of <see cref="T:System.Fabric.Query.NetworkApplication" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkApplicationListAsync(System.Fabric.Description.NetworkApplicationQueryDescription)" />. Paged lists consist
            of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.NetworkNodeList">
            <summary>
            <para>Represents one page of <see cref="T:System.Fabric.Query.NetworkNode" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkNodeListAsync(System.Fabric.Description.NetworkNodeQueryDescription)" />. Paged lists consist
            of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationNetworkList">
            <summary>
            <para>Represents one page of <see cref="T:System.Fabric.Query.ApplicationNetwork" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetApplicationNetworkListAsync(System.Fabric.Description.ApplicationNetworkQueryDescription)" />. Paged lists consist
            of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.NetworkList">
            <summary>
            <para>Represents one page of <see cref="T:System.Fabric.Query.NetworkInformation" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync" />. Paged lists consist
            of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.NodeList">
            <summary>
            <para>Represents a list of Service Fabric nodes retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.NodeList.#ctor">
            <summary>
            <para>
            Creates an empty node list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.NodeDeactivationTaskId">
            <summary>
            <para>Specifies the task ID of a node deactivation task.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTaskId.Id">
            <summary>
            <para>The unique ID of the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTaskId.Type">
            <summary>
            <para>The ID type of the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationTaskType" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeDeactivationTask">
            <summary>
            <para>Specifies a node deactivation task.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTask.TaskId">
            <summary>
            <para>The ID for the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.NodeDeactivationTaskId" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTask.Intent">
            <summary>
            <para>The node deactivation intent for the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationIntent" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeDeactivationResult">
            <summary>
            <para>Contains the detailed deactivation information about a node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.EffectiveIntent">
            <summary>
            <para>A node may get deactivated by multiple tasks at the same time. Each task may specify a different node 
            deactivation intent. In this case, effective intent is highest intent among all deactivation tasks, where ordering 
            is defined as Pause &lt; Restart &lt; RemoveData.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationIntent" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.Status">
            <summary>
            <para>Specifies the deactivation status for a node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationStatus" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.Tasks">
            <summary>
            <para>Contains information about all the node deactivation tasks for a node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.IList`1" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.PendingSafetyChecks">
            <summary>
            <para>
            Gets a list of safety checks that are currently failing.
            </para>
            </summary>
            <value>
            <para>The list of failing safety checks.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.Node">
            <summary>
            <para>Represents a Service Fabric cluster node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeName">
            <summary>
            <para>Gets the name of the node.</para>
            </summary>
            <value>
            <para>The name of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.IpAddressOrFQDN">
            <summary>
            <para>Gets the IP address or the fully qualified domain name (FQDN) of the node.</para>
            </summary>
            <value>
            <para>The IP address or the fully qualified domain name (FQDN) of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeType">
            <summary>
            <para>Gets the node type.</para>
            </summary>
            <value>
            <para>The node type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.CodeVersion">
            <summary>
            <para>Gets the Service Fabric runtime version running on the node.</para>
            </summary>
            <value>
            <para>The Service Fabric runtime version running on the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.ConfigVersion">
            <summary>
            <para>Gets the cluster configuration version on the node.</para>
            </summary>
            <value>
            <para>The cluster configuration version on the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeStatus">
            <summary>
            <para>Gets the node status.</para>
            </summary>
            <value>
            <para>The node status.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeUpTime">
            <summary>
            <para>Gets the node up time.</para>
            </summary>
            <value>
            <para>The node up time.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeUpTimeInSeconds">
            <summary>
            Used by the serializer
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeDownTime">
            <summary>
            <para>Gets the node down time.</para>
            </summary>
            <value>
            <para>The node down time.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeDownTimeInSeconds">
            <summary>
            Used by the serializer
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeUpAt">
            <summary>
            <para>Gets the date time when node status changed to up.</para>
            </summary>
            <value>
            <para>The date time when node status changed to up.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeDownAt">
            <summary>
            <para>Gets the date time when node status changed to down.</para>
            </summary>
            <value>
            <para>The date time when node status changed to down.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.HealthState">
            <summary>
            <para>Gets the health state of the node.</para>
            </summary>
            <value>
            <para>The health state of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.IsSeedNode">
            <summary>
            <para>Gets a value indicating whether this is a seed node. Seed nodes are special type of node configured automatically and used internally by the system. </para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if this instance is a seed node; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.UpgradeDomain">
            <summary>
            <para>Gets the upgrade domain value for this node. </para>
            <remarks>Upgrade domains define sets of nodes which are shut down for upgrades at approximately the same time.</remarks>
            </summary>
            <value>
            <para>The upgrade domain for this node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.FaultDomain">
            <summary>
            <para>Gets the fault domain for this node.</para>
            <remarks>
            <para>Fault domains define sets of nodes which are likely to experience failure at the same time due to shared physical dependencies such as power and networking resources. 
            Fault domains typically represent hierarchy and hence are represented using <see cref="T:System.Uri"/>.</para>
            </remarks>
            </summary>
            <value>
            <para>The fault domain for this node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeId">
            <summary>
            <para>Gets the internal ID used by Service Fabric to uniquely identify a node.</para>
            </summary>
            <value>
            <para>The internal ID used by Service Fabric to uniquely identify a node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeInstanceId">
            <summary>
            <para>Gets the internal ID used by Service Fabric to uniquely identify a node instance. The NodeId is deterministically mapped
            from NodeName and does not change across node restarts. However, the NodeInstanceId will change with every restart of the node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeDeactivationInfo">
            <summary>
            <para>
            Gets the deactivation information for the node.
            </para>
            </summary>
            <value>
            <para>The node deactivation information.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.IsStopped">
            <summary>
            <para>
            True if a node is stopped.  A node is in a stopped state if it was the target of a successful call to StartNodeTransitionAsync with a NodeTransitionType of Stop.
            </para>
            </summary>
            <value>
            <para>Whether or not a node is stopped</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.InfrastructurePlacementID">
            <summary>
            <para>Gets the infrastructurePlacementID of the node.</para>
            </summary>
            <value>
            <para>The Infrastructure PlacementID of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeTags">
            <summary>
            <para>Gets the nodeTags of the node.</para>
            </summary>
            <value>
            <para>The Tags of the node.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeStatus">
            <summary>
            <para>Specifies the node status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Up">
            <summary>
            <para>Node is up.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Down">
            <summary>
            <para>Node is down.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Enabling">
            <summary>
            <para>Node is being enabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Disabling">
            <summary>
            <para>Node is being disabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Disabled">
            <summary>
            <para>Node is disabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Unknown">
            <summary>
            Node status is not known.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Removed">
            <summary>
            Node is removed.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.NodeStatusFilter">
            <summary>
            Enumerates the filters used for matching the node status for nodes that should be returned by query.
            </summary>
            <remarks>This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its members.</remarks>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Default">
            <summary>
            Returns all nodes other than unknown and removed.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.All">
            <summary>
            Returns all nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Up">
            <summary>
            Returns all up nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Down">
            <summary>
            Returns all down nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Enabling">
            <summary>
            Returns all nodes that are currently enabling.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Disabling">
            <summary>
            Returns all nodes that are currently disabling.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Disabled">
            <summary>
            Returns all disabled nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Unknown">
            <summary>
            Returns all nodes that are in Unknown state.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Removed">
            <summary>
            Returns all removed nodes.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ReplicatorOperationName">
            <summary>
            <para>Represents the operation currently being executed by the Replicator, either via <see cref="T:System.Fabric.IReplicator" /> 
            or <see cref="T:System.Fabric.IPrimaryReplicator" /> interface.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Invalid">
            <summary>
            <para>Default value if the replicator is not yet ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.None">
            <summary>
            <para>Replicator is not running any operation from Service Fabric perspective.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Open">
            <summary>
            <para>Replicator is opening.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.ChangeRole">
            <summary>
            <para>Replicator is in the process of changing its role.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.UpdateEpoch">
            <summary>
            <para>Due to a change in the replica set, replicator is being updated with its Epoch.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Close">
            <summary>
            <para>Replicator is closing.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Abort">
            <summary>
            <para>Replicator is being aborted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.OnDataLoss">
            <summary>
            <para>Replicator is handling the data loss condition, where the user service may potentially be recovering state from an external source.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.WaitForCatchup">
            <summary>
            <para>Replicator is waiting for a quorum of replicas to be caught up to the latest state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Build">
            <summary>
            <para>Replicator is in the process of building one or more replicas.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.RemoteReplicatorStatus">
            <summary>
            <para>Represents the state of the secondary replicator from the primary replicator’s point of view.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.RemoteReplicatorStatus.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.RemoteReplicatorStatus" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.ReplicaId">
            <summary>
            <para>Gets the replica ID of the secondary.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastAcknowledgementProcessedTimeUtc">
            <summary>
            <para>Gets the last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed in the primary.</para>
            </summary>
            <value>
            <para>The last timestamp when an acknowledgement from the secondary replicator was processed in the primary.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastReceivedReplicationSequenceNumber">
            <summary>
            <para>Gets the highest replication operation sequence number that the secondary has received from the primary.</para>
            </summary>
            <value>
            <para>The highest replication operation sequence number that the secondary has received from the primary.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastAppliedReplicationSequenceNumber">
            <summary>
            <para>Gets the highest replication operation sequence number that the secondary has applied to its state.</para>
            </summary>
            <value>
            <para>The highest replication operation sequence number that the secondary has applied to its state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.IsInBuild">
            <summary>
            <para>Gets a value that indicates whether the secondary replica is in the process of being built.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the secondary replica is in the process of being built; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastReceivedCopySequenceNumber">
            <summary>
            <para>Gets the highest copy operation sequence number that the secondary has received from the primary.</para>
            </summary>
            <value>
            <para>The highest copy operation sequence number that the secondary has received from the primary.</para>
            </value>
            <remarks>
            <para>A value of ‘-1’ can be ignored since it indicates that the copy process is complete.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastAppliedCopySequenceNumber">
            <summary>
            <para>Gets the highest copy operation sequence number that the secondary has applied to its state.</para>
            </summary>
            <value>
            <para>The highest copy operation sequence number that the secondary has applied to its state.</para>
            </value>
            <remarks>
            <para>A value of ‘-1’ can be ignored since it indicates that the copy process is complete.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.RemoteReplicatorAcknowledgementStatus">
            <summary>
            <para>Contains acknowledgement numbers for each of the remote replicators</para>
            <para>The values are dependent on the status of the replicas. 
            Inbuild replicas will contain values pertaining to copy while active replias will not.</para>
            </summary>
            <value>
            <para>RemoteReplicatorAcknowledgementStatus object containing details regarding replication and copy stream acknowledgement. See <see cref="T:System.Fabric.Query.RemoteReplicatorAcknowledgementStatus" /> for more information. </para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.RemoteReplicatorAcknowledgementStatus">
            <summary>
            Provides copy and replication stream acknowledgement details. Member of <see cref="T:System.Fabric.Query.RemoteReplicatorStatus" />
            </summary>
        </member>
        <member name="M:System.Fabric.Query.RemoteReplicatorAcknowledgementStatus.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.RemoteReplicatorAcknowledgementStatus" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorAcknowledgementStatus.ReplicationStreamAcknowledgementDetail">
            <summary>
            Contains details regarding acknowledgement for the replication operation stream
            </summary>
            <value>
            <para>Returns RemoteReplicatorAcknowledgementDetail object for replication operation stream. See <see cref="T:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail" /> for more information. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorAcknowledgementStatus.CopyStreamAcknowledgementDetail">
            <summary>
            Contains details regarding acknowledgement for the copy operation stream
            </summary>
            <value>
            <para>Returns RemoteReplicatorAcknowledgementDetail object for copy operation stream. See <see cref="T:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail" /> for more information.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail">
            <summary>
            Provides acknowledgement details pertaining to a replication or copy stream. Member of <see cref="T:System.Fabric.Query.RemoteReplicatorStatus" />
            </summary>
        </member>
        <member name="M:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail.AverageReceiveDuration">
            <summary>
            Gets the average duration for receiving acks for operations
            </summary>
            <value>
            <para>Represents the average receive duration for a remote replicator instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail.AverageApplyDuration">
            <summary>
            Gets the average duration for applying operations
            </summary>
            <value>
            <para>Represents the average apply duration for a remote replicator instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail.NotReceivedCount">
            <summary>
            Gets the number of operations not yet received
            </summary>
            <value>
            <para>Represents the number of operations not yet received by a remote replicator.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorAcknowledgementDetail.ReceivedAndNotAppliedCount">
            <summary>
            Gets the number of operations received and not applied
            </summary>
            <value>
            <para>Represents the number of operations received and not yet applied by a remote replicator.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.PrimaryReplicatorStatus">
            <summary>
            <para>Provides statistics about the Service Fabric Replicator, when it is functioning in a <see cref="F:System.Fabric.ReplicaRole.Primary" /> role.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PrimaryReplicatorStatus.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.PrimaryReplicatorStatus" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.PrimaryReplicatorStatus.ReplicationQueueStatus">
            <summary>
            <para>Gets the status of the Replication queue.</para>
            </summary>
            <value>
            <para>The status of the replication queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PrimaryReplicatorStatus.RemoteReplicators">
            <summary>
            <para>Gets the status of all the secondary replicas that the primary is aware of.</para>
            </summary>
            <value>
            <para>The list of remote replicators.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.SecondaryReplicatorStatus">
            <summary>
            <para>Provides statistics about the Service Fabric Replicator, when it is functioning in a <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.SecondaryReplicatorStatus.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.SecondaryReplicatorStatus" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.ReplicationQueueStatus">
            <summary>
            <para>Gets the status of the Replication queue.</para>
            </summary>
            <value>
            <para>The status of the replication queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.LastReplicationOperationReceivedTimeUtc">
            <summary>
            <para>Gets the last time-stamp (UTC) at which a replication operation was received from the primary.</para>
            </summary>
            <value>
            <para>The last time-stamp at which a replication operation was received from the primary.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that a replication operation message was never received.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.IsInBuild">
            <summary>
            <para>Gets a value that indicates whether the replica is currently being built.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the replica is currently being built; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.CopyQueueStatus">
            <summary>
            <para>Gets the status of the Copy queue.</para>
            </summary>
            <value>
            <para>The status of the copy queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.LastCopyOperationReceivedTimeUtc">
            <summary>
            <para>Gets the last time-stamp (UTC) at which a copy operation was received as part of a build from the primary.</para>
            </summary>
            <value>
            <para>The last time-stamp at which a copy operation was received as part of a build from the primary.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that a copy operation message was never received.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.LastAcknowledgementSentTimeUtc">
            <summary>
            <para>Gets the last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator.</para>
            </summary>
            <value>
            <para>The last time-stamp at which an acknowledgment was sent to the primary replicator.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Query.ReplicatorQueueStatus">
            <summary>
            <para>Provides various statistics of the queue used in the Service Fabric Replicator.</para>
            </summary>
            <remarks>
            <para>Depending on the role of the replicator (<see cref="F:System.Fabric.ReplicaRole.Primary" /> 
            or <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" />), the properties in this type mean different things.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Query.ReplicatorQueueStatus.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.ReplicatorQueueStatus" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.QueueUtilizationPercentage">
            <summary>
            <para>Gets the utilization of the queue.</para>
            </summary>
            <value>
            <para>The utilization of the queue.</para>
            </value>
            <remarks>
            <para>A value of ‘0’ indicates that the queue is empty and a value of ‘100’ indicates that the queue is full.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.QueueMemorySize">
            <summary>
            <para>Gets the number of virtual memory bytes being consumed by the queue.</para>
            </summary>
            <value>
            <para>The number of virtual memory bytes being consumed by the queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.FirstSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The first sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary" /> – Represents the smallest sequence number of the operation that is 
            present in the queue. It’s value will be the same as <see cref="P:System.Fabric.Query.ReplicatorQueueStatus.CompletedSequenceNumber" />, 
            since the primary replicator discards operations once it receives an acknowledgement from all the secondary replicas.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> – Represents the sequence number of the first operation 
            that is available in the queue.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.CompletedSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The completed sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary" /> – Represents the highest sequence number for which <b>all</b> the 
            secondary replicas have applied the operation.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> – Represents the highest sequence number that has been 
            applied by the user service replica.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.CommittedSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The committed sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary" /> – Represents the highest sequence number for which a <b>quorum</b> 
            of secondary replicas have applied the operation.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> – Represents the highest sequence number that has been 
            received by the secondary replicator from the primary.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.LastSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The last sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary" /> – Represents the latest sequence number of the operation that 
            is available in the queue.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> – Represents the latest sequence number of the operation 
            that is available in the queue.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="T:System.Fabric.Query.ReplicatorStatus">
            <summary>
            <para>Provides statistics about the Service Fabric Replicator.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ReplicatorStatus.#ctor">
            <summary>
            Base ReplicatorStatus structure for both primary and secondary replicators
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ReplicatorStatus.#ctor(System.Fabric.ReplicaRole)">
            <summary>
            Base ReplicatorStatus structure for both primary and secondary replicators
            </summary>
            <param name="role">The replica role.</param>
        </member>
        <member name="T:System.Fabric.Query.ServiceList">
            <summary>
            <para>Represents a list of services retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceList.#ctor">
            <summary>
            <para>
            Creates a service list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberMemberList">
            <summary>
            The service group member member list that contains service group member members.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.IndexOf(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            Search for the index of the service group member member.
            </summary>
            <param name="item">The service group member member to be searched.</param>
            <returns>The index of the service group member member.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Insert(System.Int32,System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            Insert the service group member member.
            </summary>
            <param name="index">The index of the service group member member to insert.</param>
            <param name="item">The service group member member to be inserted.</param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.RemoveAt(System.Int32)">
            <summary>
            Remove the service group member member.
            </summary>
            <param name="index">The index of service group member member to be removed.</param>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMemberList.Item(System.Int32)">
            <summary>
            Access the service group member member.
            </summary>
            <param name="index">The index of the service group member member to access.</param>
            <value>Index of the service group member member.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Add(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            Add service group member member.
            </summary>
            <param name="item">The service group member member to be added.</param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Clear">
            <summary>
            Clear the service group member members.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Contains(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            Search if contains the service group member member.
            </summary>
            <param name="item">The service group member member to be searched.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.CopyTo(System.Fabric.Query.ServiceGroupMemberMember[],System.Int32)">
            <summary>
            Copy to the service group member member.
            </summary>
            <param name="array">The service group member member to be copied.</param>
            <param name="arrayIndex">The index to begin copy.</param>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMemberList.Count">
            <summary>
            The count of the service group member members.
            </summary>
            <value>The count of the service group member members.</value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMemberList.IsReadOnly">
            <summary>
            The flag of read only.
            </summary>
            <value>The flag of read only.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Remove(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            Remove the service group member member.
            </summary>
            <param name="item">The service group member member to be removed.</param>
            <returns>The result of the remove.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.GetEnumerator">
            <summary>
            Get the enumerator of the service group member members.
            </summary>
            <returns>The enumerator of the service group member members.</returns>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberList">
            <summary>
            The service group member list that contains service group members.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.IndexOf(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            Find the index of the service group member.
            </summary>
            <param name="item">The service group member to be searched.</param>
            <returns>The index of the service group member.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Insert(System.Int32,System.Fabric.Query.ServiceGroupMember)">
            <summary>
            Insert the service group member.
            </summary>
            <param name="index">The index to be inserted.</param>
            <param name="item">The service group member to be inserted.</param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.RemoveAt(System.Int32)">
            <summary>
            Remove the service group member.
            </summary>
            <param name="index">The index of service group member to be removed.</param>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberList.Item(System.Int32)">
            <summary>
            Access the service group member.
            </summary>
            <param name="index">The index of the service group member.</param>
            <value>Index of the service group member.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Add(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            Add service group member.
            </summary>
            <param name="item">The service group member to be added.</param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Clear">
            <summary>
            Clear the service group members.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Contains(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            Search if contains service group member.
            </summary>
            <param name="item">The service group member to be searched.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.CopyTo(System.Fabric.Query.ServiceGroupMember[],System.Int32)">
            <summary>
            Copy the service group members.
            </summary>
            <param name="array">The service group members to be copied.</param>
            <param name="arrayIndex">The index of the array to begin copy.</param>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberList.Count">
            <summary>
            The count of the service group members.
            </summary>
            <value>The count of the service group members.</value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberList.IsReadOnly">
            <summary>
            The flag of read only.
            </summary>
            <value>The flag of read only.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Remove(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            Remove the service group member.
            </summary>
            <param name="item">The service group member to be removed.</param>
            <returns>The result of the remove.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.GetEnumerator">
            <summary>
            Get the enumerator of the service group members.
            </summary>
            <returns>The enumerator of the service group members.</returns>
        </member>
        <member name="T:System.Fabric.Query.ServiceOperationName">
            <summary>
            <para>Specifies the current active life-cycle operation on a stateful service replica or stateless service instance 
            retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Invalid">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.None">
            <summary>
            <para>The service replica or instance is not going through any life-cycle changes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Open">
            <summary>
            <para>The service replica or instance is being opened.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.ChangeRole">
            <summary>
            <para>The service replica is changing roles.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Close">
            <summary>
            <para>The service replica or instance is being closed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Abort">
            <summary>
            <para>The service replica or instance is being aborted.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServicePartitionList">
            <summary>
            <para>Contains the partition information for a Service Fabric Service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServicePartitionList.#ctor">
            <summary>
            <para>
            Creates a service partition list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Partition">
            <summary>
            <para>Represents a partition.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.Partition.#ctor(System.Fabric.Query.ServiceKind,System.Fabric.ServicePartitionInformation,System.Fabric.Health.HealthState,System.Fabric.Query.ServicePartitionStatus)">
            <summary>
            <para>Initializes a new instance of the partition</para>
            </summary>
            <param name="serviceKind">
            <para>The type of the partition</para>
            </param>
            <param name="partitionInformation">
            <para>The Partition Information</para>
            </param>
            <param name="healthState">
            <para>Health State of the partition</para>
            </param>
            <param name="partitionStatus">
            <para>Status of the partition</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.Partition.ServiceKind">
            <summary>
            <para>The type of the partition (Stateful/Stateless)</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceKind" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Partition.HealthState">
            <summary>
            <para>Gets the health state of the partition.</para>
            </summary>
            <value>
            <para>The health state of the partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Partition.PartitionInformation">
            <summary>
            <para>Gets the partition information.</para>
            </summary>
            <value>
            <para>The information of the partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Partition.PartitionStatus">
            <summary>
            <para>Gets the status of the partition.</para>
            </summary>
            <value>
            <para>The status of the partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServicePartitionStatus">
            <summary>
            <para>Specifies the service partition status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Invalid">
            <summary>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Ready">
            <summary>
            <para>
                Partition is ready.</para>
            <para>
                For stateless services there is one up replica</para>
            <para>
                For stateful services the number of ready replicas is greater than or equal to the <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize"/></para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.NotReady">
            <summary>
            <para>Partition is not ready. This is returned when none of the other states apply.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.InQuorumLoss">
            <summary>
            <para>Partition is in quorum loss. This means that less than MinReplicaSetSize number of replicas are participating in quorum.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Reconfiguring">
            <summary>
            <para>Partition is undergoing a reconfiguration.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Deleting">
            <summary>
            <para>Partition is getting deleted.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceReplicaList">
            <summary>
            <para>Contains the replica information for a Service Fabric Partition.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceReplicaList.#ctor">
            <summary>
            <para>
            Creates a service replica list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Replica">
            <summary>
            <para>Represents a query replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.Replica.#ctor(System.Fabric.Query.ServiceKind,System.Int64,System.Fabric.Query.ServiceReplicaStatus,System.Fabric.Health.HealthState,System.String,System.String,System.TimeSpan)">
            <summary>
             <para>Initializes a replica</para>
             </summary>
             <param name="serviceKind">
             <para>The type of the replica</para>
             </param>
             <param name="id">
             <para>The replica ID</para>
             </param>
             <param name="replicaStatus">
             <para>The status replica will be initialized with.</para>
             </param>
             <param name="healthState">
             <para>The health state replica will be initialized with</para>
             </param>
             <param name="replicaAddress">
             <para>The address replica will be initialized with.</para>
             </param>
             <param name="nodeName">
             <para>The node name replica will be initialized with</para>
             </param>
             <param name="lastInBuildDuration">
             <para>The last in build duration replica will be initialized with.</para>
             </param>
        </member>
        <member name="P:System.Fabric.Query.Replica.ServiceKind">
            <summary>
            Gets the service kind.
            </summary>
            <value>The service kind.</value>
        </member>
        <member name="P:System.Fabric.Query.Replica.Id">
            <summary>
            <para>Gets the replica identifier.</para>
            </summary>
            <value>
            <para>The replica identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.ReplicaStatus">
            <summary>
            <para>Gets the status of the replica.</para>
            </summary>
            <value>
            <para>The status of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.HealthState">
            <summary>
            <para>Gets the health state of the replica.</para>
            </summary>
            <value>
            <para>The health state of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.ReplicaAddress">
            <summary>
            <para>Gets the address the replica is listening on.</para>
            </summary>
            <value>
            <para>The address the replica is listening on.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.NodeName">
            <summary>
            <para>Gets the node name the replica is running on.</para>
            </summary>
            <value>
            <para>The node name the replica is running on.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.LastInBuildDuration">
            <summary>
            <para>Gets last in build duration.</para>
            </summary>
            <value>
            <para>The last in build duration.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.LastInBuildDurationInSeconds">
            <summary>
            Gets last in build duration in seconds.
            </summary>
            <value>Last in build duration in seconds.</value>
        </member>
        <member name="T:System.Fabric.Query.ServiceReplicaStatus">
            <summary>
            <para>Specifies the status of the replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.InBuild">
            <summary>
            <para>Replica is being built. This means that a primary replica is seeding this replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Standby">
            <summary>
            <para>
            The replica has restarted and it is being kept as a standby.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Ready">
            <summary>
            <para>Replica is ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Down">
            <summary>
            <para>Replica is down.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Dropped">
            <summary>
            <para>Replica is dropped. This means that the replica has been removed from the replica set. If it is persisted, 
            its state has been deleted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Completed">
            <summary>
            <para>Replica is Completed. This means that the replica has been removed from the replica set.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceReplicaStatusFilter">
            <summary>
            <para>Enumerates the filter used for matching the replica status for replicas that should be returned by query.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Default">
            <summary>
            <para>Returns all replicas other than dropped replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.All">
            <summary>
            <para>Returns all replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.InBuild">
            <summary>
            <para>Returns all InBuild replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Standby">
            <summary>
            <para>Returns all StandBy replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Ready">
            <summary>
            <para>Returns only ready replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Down">
            <summary>
            <para>Returns all down replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Dropped">
            <summary>
            <para>Returns all Dropped replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Completed">
            <summary>
            <para>Returns all the completed replicas.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceKind">
            <summary>
            <para>Specifies the service kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceKind.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceKind.Stateless">
            <summary>
            <para>Does not use Service Fabric to make its state highly available or reliable.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceKind.Stateful">
            <summary>
            <para>Uses Service Fabric to make its state or part of its state highly available and reliable.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Service">
            <summary>
            <para>Represents a service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceKind">
            <summary>
            <para>Gets the service kind.</para>
            </summary>
            <value>
            <para>The service kind.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceName">
            <summary>
            <para>Gets the service name.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceTypeName">
            <summary>
            <para>Gets the service type name.</para>
            </summary>
            <value>
            <para>The service type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceManifestVersion">
            <summary>
            <para>Gets the service manifest version.</para>
            </summary>
            <value>
            <para>The service manifest version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.HealthState">
            <summary>
            <para>Gets the health state.</para>
            </summary>
            <value>
            <para>The health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceStatus">
            <summary>
            <para>Gets the status of the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceStatus" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.IsServiceGroup">
            <summary>
            <para>Flag indicates if this service is a regular service or a service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMember">
            <summary>
            <para>The type that stores the service group member query.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMember.ServiceName">
            <summary>
            <para>The service name of the service group query.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMember.ServiceGroupMemberMembers">
            <summary>
            <para>The members of this service group member query.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceGroupMemberMemberList" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberMember">
            <summary>
            <para>The type that contains a service group member.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMember.ServiceName">
            <summary>
            <para>The service name of a service group member.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMember.ServiceTypeName">
            <summary>
            <para>The type of a service group member.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ImageStoreFileVersion">
            <summary>
            A ImageStoreFileVersion contains version information about a native image store file
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreFileVersion.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <cref name="ImageStoreFileVersion"/> structure
            </summary>
            <param name="epochDataLossNumber">
            The epoch number of the image store file for the accepting known data loss
            </param>
            <param name="versionNumber">
            The internal version of the image store file
            </param>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreFileVersion.#ctor">
            <summary>
            Initializes a new instance of the <cref name="ImageStoreFileVersion"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFileVersion.EpochDataLossNumber">
            <summary>
            <para>Gets the epoch number of the image store file indicating the accepting known data loss.</para>
            </summary>
            <value>
            <para>The epoch data loss number of the image store file.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFileVersion.VersionNumber">
            <summary>
            <para>Gets the internal version number of the image store file.</para>
            </summary>
            <value>
            <para>The internal version number of the image store file.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ImageStoreFileInfo">
            <summary>
            A ImageStoreFileInfo contains information about the native image store file
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreFileInfo.#ctor(System.String,System.Fabric.Query.ImageStoreFileVersion,System.DateTime,System.Int64)">
            <summary>
            Initializes a new instance of the <cref name="ImageStoreFileInfo"/> structure
            </summary>
            <param name="storeRelativePath">
            Get the relative path of image store file which is from the native image store root.
            This parameter cannot be empty, or consist only of whitespace
            </param>
            <param name="fileVersion">
             Gets the image store file version
            </param>
            <param name="modifiedDate">
            Gets the date and time when the file was last modified
            </param>
            <param name="fileSize">
            Gets the size in byte of the native image store file
            </param>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreFileInfo.#ctor">
            <summary>
            Initializes a new instance of the <cref name="ImageStoreFileInfo"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFileInfo.StoreRelativePath">
            <summary>
            <para>Get the relative path of the file from the native image store root.</para>
            </summary>
            <value>
            <para>The relative path of the file from the native image store root.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFileInfo.FileVersion">
            <summary>
            <para>Gets the image store file version.</para>
            </summary>
            <value>
            <para>The image store file verison.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFileInfo.ModifiedDate">
            <summary>
            <para>Gets the date and time when the file was last modified.</para>
            </summary>
            <value>
            <para>The date and time when the file was last modified.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFileInfo.FileSize">
            <summary>
            <para>Gets the size in bytes of the image store file.</para>
            </summary>
            <value>
            <para>The size in bytes of the image store file.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ImageStoreFolderInfo">
            <summary>
            A ImageStoreFolderInfo contains information about a native image store folder
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreFolderInfo.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <cref name="ImageStoreFolderInfo"/> structure
            </summary>
            <param name="storeRelativePath">
            The relative path from the native image store root
            </param>
            <param name="fileCount">
            The count of files from the current folder and all folders
            </param>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreFolderInfo.#ctor">
            <summary>
            Initializes a new instance of the <cref name="ImageStoreFolderInfo"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFolderInfo.StoreRelativePath">
            <summary>
            <para>Gets the relative path from the native image store root.</para>
            </summary>
            <value>
            <para>The relative path from the native image store root.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreFolderInfo.FileCount">
            <summary>
            <para>Get the count of files within the current folder and all subfolders.</para>
            </summary>
            <value>
            <para>The count of files within the current folder and all subfolders.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ImageStoreContentResult">
            <summary>
            A ImageStoreContentResult contains the information of image store content returned by list content query
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreContentResult.#ctor(System.Collections.Generic.IList{System.Fabric.Query.ImageStoreFileInfo},System.Collections.Generic.IList{System.Fabric.Query.ImageStoreFolderInfo})">
            <summary>
             Initializes a new instance of the <cref name="ImageStoreContentResult"/> structure
            </summary>
            <param name="storeFiles">
            <para>The list of <see cref="T:System.Fabric.Query.ImageStoreFileInfo"/> objects.</para>
            </param>
            <param name="storeFolders">
            <para>The list of <see cref="T:System.Fabric.Query.ImageStoreFolderInfo"/> objects.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ImageStoreContentResult.#ctor">
            <summary>
            Initializes a new instance of the <cref name="ImageStoreContentResult"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreContentResult.StoreFiles">
            <summary>
            <para>Gets the list of <see cref="T:System.Fabric.Query.ImageStoreFileInfo"/> objects.</para>
            </summary>
            <value>
            <para>The List of <see cref="T:System.Fabric.Query.ImageStoreFileInfo"/> objects.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStoreContentResult.StoreFolders">
            <summary>
            <para>Get the list of <see cref="T:System.Fabric.Query.ImageStoreFolderInfo"/> objects.</para>
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.Query.ImageStoreFolderInfo"/> objects.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ImageStorePagedContentResult">
            <summary>
            <para>Represents the query result from listing image store content</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ImageStorePagedContentResult.#ctor(System.Collections.Generic.IList{System.Fabric.Query.ImageStoreFileInfo},System.Collections.Generic.IList{System.Fabric.Query.ImageStoreFolderInfo},System.String)">
            <summary>
             Initializes a new instance of the <cref name="ImageStorePagedContentResult"/>.
            </summary>
            <param name="storeFiles">
            <para>The list of <see cref="T:System.Fabric.Query.ImageStoreFileInfo"/> objects.</para>
            </param>
            <param name="storeFolders">
            <para>The list of <see cref="T:System.Fabric.Query.ImageStoreFolderInfo"/> objects.</para>
            </param>
            <param name="continuationToken">
            The continuation token used to access the subsequent page
            </param>
        </member>
        <member name="M:System.Fabric.Query.ImageStorePagedContentResult.#ctor">
            <summary>
            Initializes a new instance of the <cref name="ImageStorePagedContentResult"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ImageStorePagedContentResult.StoreFiles">
            <summary>
            <para>Gets the list of <see cref="T:System.Fabric.Query.ImageStoreFileInfo"/> objects.</para>
            </summary>
            <value>
            <para>The List of <see cref="T:System.Fabric.Query.ImageStoreFileInfo"/> objects.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStorePagedContentResult.StoreFolders">
            <summary>
            <para>Get the list of <see cref="T:System.Fabric.Query.ImageStoreFolderInfo"/> objects.</para>
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.Query.ImageStoreFolderInfo"/> objects.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ImageStorePagedContentResult.ContinuationToken">
            <summary>
            <para>Gets the continuation token for query operation.</para>
            </summary>
            <value>
            <para>Gets the continuation token. It can be used in a subsequent call to return the next page of results.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.KeyValueStoreMigrationPhase">
            <summary>
            Indicates a phase in the overall key/value store migration workflow.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationPhase.Inactive">
            <summary>
            The migration is currently inactive.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationPhase.Migration">
            <summary>
            The replica is migrating data between the source and target databases.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationPhase.TargetDatabaseSwap">
            <summary>
            The replica is swapping from the source to target database.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationPhase.TargetDatabaseCleanup">
            <summary>
            The replica is cleaning up the target database.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationPhase.SourceDatabaseCleanup">
            <summary>
            The replica is cleaning up the source database.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationPhase.TargetDatabaseActive">
            <summary>
            The migration target database is attached and running as the active database.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationPhase.RestoreSourceBackup">
            <summary>
            The source database is being restored from a migration backup.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.KeyValueStoreMigrationState">
            <summary>
            Indicates the underlying state of an ongoing key/value store migration phase (see <see cref="T:System.Fabric.Query.KeyValueStoreMigrationPhase" />).
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationState.Inactive">
            <summary>
            The migration is currently inactive.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationState.Processing">
            <summary>
            The current migration phase is actively being processed.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationState.Completed">
            <summary>
            The current migration phase has been completed.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationState.Canceled">
            <summary>
            The current migration phase has been canceled.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreMigrationState.Failed">
            <summary>
            The current migration phase has failed.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.KeyValueStoreMigrationStatus">
            <summary>
            Query status for the migration workflow of a key/value store replica
            </summary>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreMigrationStatus.CurrentPhase">
            <summary>
            Gets a value indicating the current migration phase
            </summary>
            <value>The current migration phase</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreMigrationStatus.State">
            <summary>
            Gets a value indicating the state of the current migration phase
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreMigrationStatus.NextPhase">
            <summary>
            Gets a value indicating the next migration phase after the current phase completes
            </summary>
            <value>The next migration phase.</value>
        </member>
        <member name="T:System.Fabric.Query.KeyValueStoreProviderKind">
            <summary>
            Identifies the underlying state provider type (implementation detail) of a key/value store.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreProviderKind.Unknown">
            <summary>
            The provider type is unknown
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreProviderKind.ESE">
            <summary>
            The provider type is ESE
            </summary>
        </member>
        <member name="F:System.Fabric.Query.KeyValueStoreProviderKind.TStore">
            <summary>
            The provider type is TStore
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ReplicaStatus">
            <summary>
            Represents base class for query status of a replica
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ReplicaStatus.ReplicaKind">
            <summary>
            Represents kind of a replica.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicaStatus.ReplicaKind.Invalid">
            <summary>
            Represents an invalid replica kind.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicaStatus.ReplicaKind.KeyValueStore">
            <summary>
            Represents a key value store replica.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ReplicaStatus.Kind">
            <summary>
            Represents kind of a replica.
            </summary>
            <value>
            A <see cref="T:System.Fabric.Query.ReplicaStatus.ReplicaKind"/> representing kind of replica.
            </value>
        </member>
        <member name="T:System.Fabric.Query.KeyValueStoreReplicaStatus">
            <summary>
            Query status for a key/value store replica
            </summary>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreReplicaStatus.DatabaseRowCountEstimate">
            <summary>
            Gets a value indicating the estimated number of rows in the underlying database.
            </summary>
            <value>The estimated number of rows.</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreReplicaStatus.DatabaseLogicalSizeEstimate">
            <summary>
            Gets a value indicating the estimated logical size of the underlying database.
            </summary>
            <value>The estimated logical database size in bytes.</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreReplicaStatus.CopyNotificationCurrentKeyFilter">
            <summary>
            Gets a value indicating the latest key-prefix filter applied to enumeration during the <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" /> callback. Null if there is no pending callback.
            </summary>
            <value>The key prefix filter.</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreReplicaStatus.CopyNotificationCurrentProgress">
            <summary>
            Gets a value indicating the latest number of keys enumerated during the <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" /> callback. 0 if there is no pending callback.
            </summary>
            <value>The number of keys.</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreReplicaStatus.StatusDetails">
            <summary>
            Gets a value indicating the current status details (if any) of the replica.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreReplicaStatus.ProviderKind">
            <summary>
            Gets a value indicating the type of state provider backing this key/value store replica.
            </summary>
            <value>The provider kind.</value>
        </member>
        <member name="P:System.Fabric.Query.KeyValueStoreReplicaStatus.MigrationStatus">
            <summary>
            Gets a value indicating the current state provider migration status (if any)
            </summary>
            <value>The migration status.</value>
        </member>
        <member name="T:System.Fabric.Query.UploadChunkRange">
            <summary>
            UploadChunkRange contains start and end position of byte chunk
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UploadChunkRange.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <cref name="UploadChunkRange"/> structure
            </summary>
            <param name="startPosition">
            Get the start position of byte chunk from an uploading file.
            This parameter cannot be empty, or consist only of whitespace
            </param>
            <param name="endPosition">
             Gets the end position of byte chunk from an uploading file
             This parameter cannot be empty, or consist only of whitespace
            </param>
        </member>
        <member name="M:System.Fabric.Query.UploadChunkRange.#ctor">
            <summary>
            Initializes a new instance of the <cref name="UploadChunkRange"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.UploadChunkRange.StartPosition">
            <summary>
            <para>Get the start position of byte chunk from an uploading file.</para>
            </summary>
            <value>
            <para>The start position of byte chunk.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UploadChunkRange.EndPosition">
            <summary>
            <para>Gets end position of byte chunk from an uploading file.</para>
            </summary>
            <value>
            <para>The end position of byte chunk.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.UploadSessionInfo">
            <summary>
            Contains information about the image store upload session
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UploadSessionInfo.#ctor(System.String,System.Guid,System.DateTime,System.Int64,System.Fabric.Query.UploadChunkRange[])">
            <summary>
            Initializes a new instance of the <cref name="UploadSessionInfo"/> structure
            </summary>
            <param name="storeRelativePath">
            Get the relative path of image store file which is from the native image store root.
            This parameter cannot be empty, or consist only of whitespace
            </param>
            <param name="sessionId">
             Gets the upload session ID, this session ID cannot be used for two different relative path concurrently. 
             Only if the old session was committed or removed by system, the old session ID can be reused in the new session.
             This parameter cannot be empty
            </param>
            <param name="modifiedDate">
            Gets the date and time when the file was last modified
            This parameter cannot be empty
            </param>
            <param name="fileSize">
            Gets the size in byte of the native image store file
            This parameter cannot be empty
            </param>
            <param name="expectedRange">
            Get the range of the uploading file that have not been received
            </param>
        </member>
        <member name="M:System.Fabric.Query.UploadSessionInfo.#ctor">
            <summary>
            Initializes a new instance of the <cref name="UploadSessionInfo"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.UploadSessionInfo.StoreRelativePath">
            <summary>
            <para>Get the relative path of the file from the native image store root.</para>
            </summary>
            <value>
            <para>The relative path of the file from the native image store root.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UploadSessionInfo.SessionId">
            <summary>
            <para>Gets the upload session ID.</para>
            </summary>
            <value>
            <para>The upload session ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UploadSessionInfo.ModifiedDate">
            <summary>
            <para>Gets the date and time when the file was last modified.</para>
            </summary>
            <value>
            <para>The date and time when the file was last modified.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UploadSessionInfo.FileSize">
            <summary>
            <para>Gets the size in bytes of the image store file.</para>
            </summary>
            <value>
            <para>The size in bytes of the image store file.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UploadSessionInfo.ExpectedRanges">
             <summary>
            <para>Get the range of the uploading file that have not been received.</para>
             </summary>
             <value>
             <para>The range of uploading file that have not been received.</para>
             </value>
        </member>
        <member name="T:System.Fabric.Query.UploadSession">
            <summary>
            UploadSession contains information about the image store upload sessions
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UploadSession.#ctor(System.Fabric.Query.UploadSessionInfo[])">
            <summary>
            Initializes a new instance of the <cref name="UploadSession"/> structure
            </summary>
            <param name="uploadSessions">
            Get the upload session based on the given upload session ID or image store relative path
            </param>
        </member>
        <member name="M:System.Fabric.Query.UploadSession.#ctor">
            <summary>
            Initializes a new instance of the <cref name="UploadSession"/> structure
            </summary>
        </member>
        <member name="P:System.Fabric.Query.UploadSession.UploadSessions">
            <summary>
            <para>Get the upload session based on the given upload session ID or image store relative path.</para>
            </summary>
            <value>
            <para>The upload session.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceStatus">
            <summary>
            Represents the status of a service retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri)" />.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Unknown">
            <summary>
            The service status is not yet known.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Active">
            <summary>
            The service has been successfully created.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Upgrading">
            <summary>
            The service is being upgraded.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Deleting">
            <summary>
            The service is being deleted.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Creating">
            <summary>
            The service is being created.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Failed">
            <summary>
            Creation or deletion was terminated due to persistent failures.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceTypeList">
            <summary>
            <para>Represents a list of service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.IndexOf(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Searches for the specified <see cref="T:System.Fabric.Query.ServiceType" />  and returns the zero-based index of the first 
            occurrence within the entire <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>The zero-based index of the first occurrence within the entire <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Insert(System.Int32,System.Fabric.Query.ServiceType)">
            <summary>
            <para>Inserts an element into the <see cref="T:System.Fabric.Query.ServiceTypeList" />  at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the element at the specified index of the <see cref="T:System.Fabric.Query.ServiceTypeList" />..</para>
            </summary>
            <param name="index">
            <para>The index where to remove the item.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ServiceTypeList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The element at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Add(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Adds an object to the end of the <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Clear">
            <summary>
            <para>Removes all elements from the <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Contains(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Determines whether an element is in the <see cref="T:System.Fabric.Query.ServiceTypeList" />..</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is in the <see cref="T:System.Fabric.Query.ServiceTypeList" />; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:System.Fabric.Query.ServiceTypeList" /> to a compatible one-dimensional 
            <see cref="T:System.Fabric.Query.ServiceTypeList" />, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>An array of service type.</para>
            </param>
            <param name="arrayIndex">
            <para>The array index.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.ServiceTypeList.Count">
            <summary>
            <para>Gets or sets the number of elements in the <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </summary>
            <value>
            <para>The number of elements in the <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceTypeList.IsReadOnly">
            <summary>
            <para>Gets or sets whether <see cref="T:System.Fabric.Query.ServiceTypeList" /> is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the <see cref="T:System.Fabric.Query.ServiceTypeList" /> is read-only; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Remove(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Removes the first occurrence of a specific object from the <see cref="T:System.Fabric.Query.ServiceTypeList" />..</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item exist; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.GetEnumerator">
            <summary>
            <para>Returns an enumerator for the entire <see cref="T:System.Fabric.Query.ServiceTypeList" />..</para>
            </summary>
            <returns>
            <para>An enumerator for the entire <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns the enumerator for the <see cref="T:System.Fabric.Query.ServiceTypeList" />..</para>
            </summary>
            <returns>
            <para>The numerator for the <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberTypeList">
            <summary>
            The service group member type list that contains the service group member types.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.IndexOf(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            Search for the index of the service group member type.
            </summary>
            <param name="item">The service group member type to be searched.</param>
            <returns>The index of the service group member type.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Insert(System.Int32,System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            Insert the service group member type.
            </summary>
            <param name="index">The index to be inserted.</param>
            <param name="item">The service group member type to be inserted.</param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.RemoveAt(System.Int32)">
            <summary>
            Remove service group member type.
            </summary>
            <param name="index">The index of service group member type to be removed.</param>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberTypeList.Item(System.Int32)">
            <summary>
            Access the service group member type.
            </summary>
            <param name="index">The index of service group member type to be accessed.</param>
            <value>Index of the service group member type.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Add(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            Add the service group member type.
            </summary>
            <param name="item">The service group member type to be added.</param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Clear">
            <summary>
            Clear the service group member types.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Contains(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            Search if contains the service group member type.
            </summary>
            <param name="item">The service group member type to be searched.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.CopyTo(System.Fabric.Query.ServiceGroupMemberType[],System.Int32)">
            <summary>
            Copy the service group member type.
            </summary>
            <param name="array">The service group member type to be copied.</param>
            <param name="arrayIndex">The index to begin the copy.</param>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberTypeList.Count">
            <summary>
            The count of the service group member type.
            </summary>
            <value>The count of the service group member type.</value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberTypeList.IsReadOnly">
            <summary>
            The flag of read only.
            </summary>
            <value>The flag of read only.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Remove(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            Remove the service group member type.
            </summary>
            <param name="item">The service group member type to be removed.</param>
            <returns>The result of the remove.</returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.GetEnumerator">
            <summary>
            Get the enumerator of the service group member types.
            </summary>
            <returns>The enumerator of the service group member types.</returns>
        </member>
        <member name="T:System.Fabric.Query.ServiceType">
            <summary>
            <para>Represents a service type.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.ServiceTypeDescription">
            <summary>
            <para>Gets the service type description.</para>
            </summary>
            <value>
            <para>The service type description.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.ServiceManifestVersion">
            <summary>
            <para>Gets the service manifest version.</para>
            </summary>
            <value>
            <para>The service manifest version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.IsServiceGroup">
            <summary>
            <para> 
            Flag represent whether the service is a service group.
            </para>
            </summary>
            <value>
            <para>The boolean indicates whether the service is a service group.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberType">
            <summary>
            <para>The type that stores the type of service group member query result.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberType.ServiceGroupMemberTypeDescription">
            <summary>
            <para>The type description of the service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberType.ServiceManifestVersion">
            <summary>
            <para>The service manifest version of the service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberType.ServiceManifestName">
            <summary>
            <para>The service manifest name of the service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatefulServicePartition">
            <summary>
            <para>Represents a stateful service partition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.TargetReplicaSetSize">
            <summary>
            <para>Gets the target replica set size.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.MinReplicaSetSize">
            <summary>
            <para>Gets the minimum replica set size allowed for the partition to keep making progress.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.LastQuorumLossDuration">
            <summary>
            <para>Gets the last quorum loss duration.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.TimeSpan" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.PrimaryEpoch">
            <summary>
            <para>
            Gets the epoch of the partition as seen by the replica
            </para>
            </summary>
            <value>
            <para>The epoch of the partition</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatefulServiceReplica">
            <summary>
            <para>Represents a stateful service replica.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatefulServiceReplica.ReplicaRole">
            <summary>
            <para>Gets the replica role.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ReplicaRole" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatefulService">
            <summary>
            <para>Represents a stateful service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatefulService.HasPersistedState">
            <summary>
            <para>Gets a value that determines whether the current service has persisted state.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the current service has persisted state; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatelessServiceInstance">
            <summary>
            <para>Represents a stateless service instance.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.StatelessServicePartition">
            <summary>
            <para>Represents a stateless service partition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatelessServicePartition.InstanceCount">
            <summary>
            <para>Gets the instance count.</para>
            </summary>
            <value>
            <para>The instance count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.StatelessServicePartition.MinInstanceCount">
            <summary>
            <para>Gets or sets the minimum instance count. </para>
            </summary>
            <remarks>
            See <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstanceCount" /> for details.
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.StatelessServicePartition.MinInstancePercentage">
            <summary>
            <para>Gets or sets the minimum instance percentage. </para>
            </summary>
            <remarks>
            See <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstancePercentage" /> for details.
            </remarks>
        </member>
        <member name="T:System.Fabric.Query.StatelessService">
            <summary>
            <para>Represents a stateless service.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.TestCommandStatusList">
            <summary>
            An <see cref="T:System.Collections.Generic.IList`1" /> of TestCommandStatus objects.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.IndexOf(System.Fabric.Query.TestCommandStatus)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.Insert(System.Int32,System.Fabric.Query.TestCommandStatus)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The location where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.TestCommandStatusList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.Add(System.Fabric.Query.TestCommandStatus)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to be added to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.Contains(System.Fabric.Query.TestCommandStatus)">
            <summary>
            <para>Indicates whether the list contains a specified item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specified item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.CopyTo(System.Fabric.Query.TestCommandStatus[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array of items to copy.</para>
            </param>
            <param name="arrayIndex">
            <para>The index where the array of items will be copied to.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.TestCommandStatusList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.TestCommandStatusList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list is read only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.Remove(System.Fabric.Query.TestCommandStatus)">
            <summary>
            <para>Remove the specified item from this list</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.TestCommandStatusList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.PagedList`1">
            <summary>
            <para>
            Represents a paged list that contains a list of items and a continuation token.
            </para>
            </summary>
            <typeparam name="T">
            <para>The type of the items returned by query.</para>
            </typeparam>
            <remarks>
            <para>The paged list is obtained from queries that have more results than can fit a message. 
            The next results can be obtained by executing the same query with the previous continuation token.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Items">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor">
            <summary>
            <para>
            Instantiates an empty PagedList class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            <para>
            Instantiates a PagedList class with the items of another list.
            </para>
            </summary>
            <param name="list">
            <para>The list with items used to create the paged list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.IndexOf(`0)">
            <summary>
            <para>
            Gets the index in this list for the specified item.
            </para>
            </summary>
            <param name="item">
            <para>The item.</para>
            </param>
            <returns>
            <para>The index in this list for the specified item. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Insert(System.Int32,`0)">
            <summary>
            <para>
            Inserts an item into this list at the specified index.
            </para>
            </summary>
            <param name="index">
            <para>The index where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.RemoveAt(System.Int32)">
            <summary>
            <para>
            Removes the item at the specified index from this list. 
            </para>
            </summary>
            <param name="index">
            <para>The index where the item will be removed.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Item(System.Int32)">
            <summary>
            <para>
            Gets the item at the specified index.
            </para>
            </summary>
            <param name="index">
            <para>The index.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.ContinuationToken">
            <summary>
            <para>
            The continuation token. Can be used by queries to get next pages of results.
            </para>
            </summary>
            <value>
            <para>Gets or sets the continuation token.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Add(`0)">
            <summary>
            <para>
            Adds an item to this list.
            </para>
            </summary>
            <param name="item">
            <para>The item to add to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Clear">
            <summary>
            <para>
            Removes all items from this list.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Contains(`0)">
            <summary>
            <para>
            Specifies whether the list contains a specific item.
            </para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>true if the list contains a specific item; otherwise, false.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            <para>
            Copies items from this list to the specified array starting at the specified index.
            </para>
            </summary>
            <param name="array">
            <para>The array.</para>
            </param>
            <param name="arrayIndex">
            <para>The array index.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Count">
            <summary>
            <para>
            Gets the number of items in the list.
            </para>
            </summary>
            <value>
            <para>The number of items in the list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.IsReadOnly">
            <summary>
            <para>
            Gets a flag that indicated whether the list can be modified.
            </para>
            </summary>
            <value>
            <para>Flag indicating whether the list can be modified.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Remove(`0)">
            <summary>
            <para>
            Removes the specified item from this list. 
            </para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>true if the item is removed; otherwise, false.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.GetEnumerator">
            <summary>
            <para>
            Gets an enumerator to items in this list. 
            </para>
            </summary>
            <returns>
            <para>The enumerator to items in this list. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>
            Gets an enumerator to items in this list. 
            </para>
            </summary>
            <returns>
            <para>The enumerator to items in this list. </para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.PagedListHelper">
            <summary>
            <para>
            Extensions for paged list operations.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedListHelper.ToArray``1(System.Fabric.Query.PagedList{``0})">
            <summary>
            <para>
            Returns an array with the items in the paged list.
            </para>
            </summary>
            <param name="list">
            <para>The paged list.</para>
            </param>
            <typeparam name="T">
            <para>The type of the list objects.</para>
            </typeparam>
            <returns>
            <para>The array.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Query.ApplicationTypePagedList">
            <summary>
            <para>Represents one page of <see cref="T:System.Fabric.Query.ApplicationType" /> retrieved by calling
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync" />. Paged lists consist
            of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
            <remarks>
                <para>
                    If there is a subsequent page, the continuation token provided in this object can be used to access it.
                    For continuation token usage instructions, see <see cref="P:System.Fabric.Description.PagedApplicationTypeQueryDescription.ContinuationToken" />.
                </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypePagedList.#ctor">
            <summary>
            <para>
            Creates an empty paged <see cref="T:System.Fabric.Query.ApplicationType" /> list.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypePagedList.#ctor(System.Collections.Generic.IList{System.Fabric.Query.ApplicationType})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.ApplicationTypePagedList" /> class. The continuation
            is null until explicitly set.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedApplicationPagedList">
            <summary>
            <para>Represents the list of <see cref="T:System.Fabric.Query.DeployedApplication" />.
            Paged lists consist of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
            <remarks>
                <para>
                    If there is a subsequent page, the continuation token provided in this object can be used to access it.
                    For continuation token usage instructions, see <see cref="P:System.Fabric.Description.PagedQueryDescriptionBase.ContinuationToken" />.
                </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationPagedList.#ctor">
            <summary>
            <para>
            Creates an empty paged <see cref="T:System.Fabric.Query.DeployedApplication" /> list.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationPagedList.#ctor(System.Collections.Generic.IList{System.Fabric.Query.DeployedApplication})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedApplicationPagedList" /> class. The continuation
            token is null until explicitly set.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedServicePackagePagedList">
            <summary>
            <para>Represents the list of <see cref="T:System.Fabric.Query.DeployedServicePackage" />.
            Paged lists consist of the return results it holds (a list), along with a continuation token which may be used to access subsequent pages.</para>
            </summary>
            <remarks>
                <para>
                    If there is a subsequent page, the continuation token provided in this object can be used to access it.
                    For continuation token usage instructions, see <see cref="P:System.Fabric.Description.PagedQueryDescriptionBase.ContinuationToken" />.
                </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackagePagedList.#ctor">
            <summary>
            <para>
            Creates an empty paged list containing type <see cref="T:System.Fabric.Query.DeployedServicePackage" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackagePagedList.#ctor(System.Collections.Generic.IList{System.Fabric.Query.DeployedServicePackage})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedServicePackagePagedList" /> class. The continuation
            token is null until explicitly set.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeSortOrder">
            <summary>
            <para>Enumerates the ways upgrade domains can be sorted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSortOrder.Invalid">
            <summary>
            <para>Indicates that this sort order is not valid. All Service Fabric enumerations have the invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSortOrder.Default">
            <summary>
            <para>Indicates that the default sort order (as specified in cluster manifest) will be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSortOrder.Numeric">
            <summary>
            <para>Indicates that forward numeric sort order (UD names sorted as numbers) will be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSortOrder.Lexicographical">
            <summary>
            <para>Indicates that forward lexicographical sort order (UD names sorted as strings) will be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSortOrder.ReverseNumeric">
            <summary>
            <para>Indicates that reverse numeric sort order (UD names sorted as numbers) will be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSortOrder.ReverseLexicographical">
            <summary>
            <para>Indicates that reverse lexicographical sort order (UD names sorted as strings) will be used.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ApplicationUpgradeProgress">
            <summary>
            <para>
            Represents the upgrade status of the application instance.
            </para>
            </summary>
            <seealso>
            <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-application-upgrade">Service Fabric application upgrade</see>.
            </seealso>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDescription">
            <summary>
            <para>Gets the parameters that describe the behavior of the current upgrade.</para>
            </summary>
            <value>
            <para>The parameters that describe the behavior of the current upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.ApplicationName">
            <summary>
            <para>Gets the name of the application to be upgraded.</para>
            </summary>
            <value>
            <para>The name of the application to be upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.ApplicationTypeName">
            <summary>
            <para>Gets the type name of the application to be upgraded.</para>
            </summary>
            <value>
            <para>The type name of the application to be upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.TargetApplicationTypeVersion">
            <summary>
            <para>Gets the version of the application type being upgraded.</para>
            </summary>
            <value>
            <para>The version of the application type being upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState">
            <summary>
            <para>Gets the overall state of the application upgrade process.</para>
            </summary>
            <value>
            <para>The overall state of the application upgrade process.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDomains">
            <summary>
            <para>Gets the collection of upgrade domains and their upgrade status for this application upgrade.</para>
            </summary>
            <value>
            <para>The collection of upgrade domains and their upgrade status for this application upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.RollingUpgradeMode">
            <summary>
            <para>Gets the rolling upgrade mode for this upgrade progress.</para>
            </summary>
            <value>
            <para>The rolling upgrade mode for this upgrade progress.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.NextUpgradeDomain">
            <summary>
            <para>Gets the next upgrade domain for this upgrade progress.</para>
            </summary>
            <value>
            <para>The next upgrade domain for this upgrade progress.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current overall upgrade.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current overall upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.CurrentUpgradeDomainDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current Upgrade Domain.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current Upgrade Domain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UnhealthyEvaluations">
            <summary>
            <para>Gets the evaluations which describe the data and the algorithm 
            used by health manager to evaluate the application health. </para>
            </summary>
            <value>
            <para>The evaluations which describe the data and the algorithm used 
            by health manager to evaluate the application health.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.CurrentUpgradeDomainProgress">
            <summary>
            <para>Gives the detailed upgrade progress for nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeDomainProgress" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.StartTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade started.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade started in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade failed in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureReason">
            <summary>
            <para>
            Gets the category of upgrade failure if the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            <para>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </para>
            </summary>
            <value>
            <para>The upgrade domain progress details. <see cref="T:System.Fabric.UpgradeDomainProgress" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeStatusDetails">
            <summary>
            <para>Gets the status details of upgrade including failure message. </para>
            </summary>
            <value>
            <para>The status details of upgrade including failure message.</para>
            </value>
        </member>
        <member name="M:System.Fabric.ApplicationUpgradeProgress.ToString">
            <summary>
            Gets a string representation of the application upgrade progress.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.ApplicationUpgradeProgress"/>.</returns>
        </member>
        <member name="M:System.Fabric.ApplicationUpgradeProgress.GetChangedUpgradeDomains(System.Fabric.ApplicationUpgradeProgress)">
            <summary>
            <para>Specifies a helper method that returns a collection of upgrade domains that have changed to the <see cref="F:System.Fabric.ApplicationUpgradeState.RollingForwardCompleted" /> state or the <see cref="F:System.Fabric.ApplicationUpgradeState.RollingForwardInProgress" /> state since the <see cref="M:System.Fabric.ApplicationUpgradeProgress.GetChangedUpgradeDomains(System.Fabric.ApplicationUpgradeProgress)" /> method was called.</para>
            </summary>
            <param name="previousProgress">
            <para>The previous <see cref="T:System.Fabric.ApplicationUpgradeProgress" /> object.</para>
            </param>
            <returns>
            <para>A helper method that returns a collection of upgrade domains.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>The application name or the application type of the <paramref name="previousProgress" /> parameter does not match the application name or application type of this object.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.ApplicationUpgradeState">
            <summary>
            <para>Enumerates the state of the application upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.Invalid">
            <summary>
            <para>Indicates that the type is not valid. All Service Fabric enumerations have an invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingBackInProgress">
            <summary>
            <para>Indicates that the upgrade is in the process of rolling back. This indicates that upgrade to the target version has failed. Note that this state can also be observed temporarily if the upgrade is interrupted to start a new upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingBackCompleted">
            <summary>
            <para>Indicates that the rollback of the upgrade is completed. The completed rollback indicates that upgrade to the target version has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingForwardPending">
            <summary>
            <para>Indicates that the upgrade to the target application type version is pending client input. <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)" /> is used to move the upgrade forward.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingForwardInProgress">
            <summary>
            <para>Indicates that the upgrade to the target application type version is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingForwardCompleted">
            <summary>
            <para>Indicates that the upgrade to the target application type version is completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.Failed">
            <summary>
            <para>Indicates that the upgrade has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingBackPending">
            <summary>
            <para>Indicates that the rollback of the upgrade is pending client input. <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)" /> is used to continue the rollback.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ByteSerializable">
            <summary>
            A class that needs to be serialized/deserialized to/from a byte array should inherit from this base class
            </summary>
        </member>
        <member name="M:System.Fabric.ByteSerializable.ToBytes">
            <summary>
            This is the default implementation to convert an object into a byte array
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:System.Fabric.ByteSerializable.FromBytes(System.Byte[])">
            <summary>
            This is the default implementation to covert an object back from a byte array
            </summary>
            <param name="data">Byte array representation of the object</param>
        </member>
        <member name="M:System.Fabric.ByteSerializable.Write(System.IO.BinaryWriter)">
            <summary>
            This method must be implemented by derived classes so that they can be converted into a byte array
            </summary>
            <param name="bw">A BinaryWriter object</param>
        </member>
        <member name="M:System.Fabric.ByteSerializable.Read(System.IO.BinaryReader)">
            <summary>
            This method must be implemented by derived classes so that they can be converted back from a byte array
            </summary>
            <param name="br">A BinaryReader object</param>
        </member>
        <member name="T:System.Fabric.ComposeDeploymentUpgradeProgress">
            <summary>
            <para>
            Represents the upgrade progress of the compose deployment.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.DeploymentName">
            <summary>
            <para>Gets the name of the compose deployment to be upgraded.</para>
            </summary>
            <value>
            <para>The name of the compose deployment to be upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.ApplicationName">
            <summary>
            <para>Gets the name of the application to be upgraded.</para>
            </summary>
            <value>
            <para>The name of the application to be upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.UpgradePolicyDescription">
            <summary>
            <para>Gets or sets the description of the policy used for upgrading this compose deployment.</para>
            </summary>
            <value>
            <para>The description of the policy used for upgrading this compose deployment.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.TargetApplicationTypeVersion">
            <summary>
            <para>Gets the version of the application type being upgraded.</para>
            </summary>
            <value>
            <para>The version of the application type being upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.UpgradeState">
            <summary>
            <para>Gets the overall state of the compose deployment upgrade process.</para>
            </summary>
            <value>
            <para>The overall state of the compose deployment upgrade process.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.NextUpgradeDomain">
            <summary>
            <para>Gets the next upgrade domain for this upgrade progress.</para>
            </summary>
            <value>
            <para>The next upgrade domain for this upgrade progress.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.UpgradeDomains">
            <summary>
            <para>Gets the collection of upgrade domains and their upgrade status for this compose deployment upgrade.</para>
            </summary>
            <value>
            <para>The collection of upgrade domains and their upgrade status for this compose deployment  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.UpgradeDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current overall upgrade.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current overall upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.CurrentUpgradeDomainDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current Upgrade Domain.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current Upgrade Domain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.ApplicationUnhealthyEvaluations">
            <summary>
            <para>Gets the evaluations which describe the data and the algorithm 
            used by health manager to evaluate the health of the application that this compose deployment is upgrading. </para>
            </summary>
            <value>
            <para>The evaluations which describe the data and the algorithm
            used by health manager to evaluate the health of the application that this compose deployment is upgrading.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.CurrentUpgradeDomainProgress">
            <summary>
            <para>Gives the detailed upgrade progress for nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeDomainProgress" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.StartTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade started.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade started in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.FailureTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade failed in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.FailureReason">
            <summary>
            <para>
            Gets the category of upgrade failure if the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            <para>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </para>
            </summary>
            <value>
            <para>The upgrade domain progress details. <see cref="T:System.Fabric.UpgradeDomainProgress" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.UpgradeStatusDetails">
            <summary>
            <para>Gets the status details of compose deployment upgrade including failure message. </para>
            </summary>
            <value>
            <para>The status details of compose deployment upgrade including failure message.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ComposeDeploymentUpgradeProgress.ApplicationUpgradeStatusDetails">
            <summary>
            <para>Gets the status details of application upgrade including failure message. </para>
            </summary>
            <value>
            <para>The status details of application upgrade including failure message.</para>
            </value>
        </member>
        <member name="M:System.Fabric.ComposeDeploymentUpgradeProgress.ToString">
            <summary>
            Gets a string representation of the compose deployment upgrade progress.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.ComposeDeploymentUpgradeProgress"/>.</returns>
        </member>
        <member name="T:System.Fabric.ComposeDeploymentUpgradeState">
            <summary>
            <para>Enumerates the state of the compose deployment upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.Invalid">
            <summary>
            <para>Indicates that the type is not valid. All Service Fabric enumerations have an invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.ProvisioningTarget">
            <summary>
            <para>Indicates that the application type of the target compose deployment is being provisioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.RollingForwardInProgress">
            <summary>
            <para>Indicates that the upgrade to the target compose deployment is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.RollingForwardPending">
            <summary>
            <para>Indicates that the upgrade to the target compose deployment is pending user input. The <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)" /> is used to move the upgrade forward.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.UnprovisioningCurrent">
            <summary>
            <para>Indicates that the application type of the current compose deployment is being unprovisioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.RollingForwardCompleted">
            <summary>
            <para>Indicates that the upgrade to the target compose deployment is completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.RollingBackInProgress">
            <summary>
            <para>Indicates that the upgrade is in the process of rolling back. This indicates that upgrade to the target compose deployment has failed. Note that this state can also be observed temporarily if the upgrade is interrupted to start a new upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.UnprovisioningTarget">
            <summary>
            <para>Indicates that the application type of the target compose deployment is being unprovisioned. This state indicates the upgrade has failed and the upgrade is being rolled back.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.RollingBackCompleted">
            <summary>
            <para>Indicates that the rollback of the upgrade is completed. The completed rollback indicates that upgrade to the target version has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.Failed">
            <summary>
            <para>Indicates that the upgrade has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ComposeDeploymentUpgradeState.RollingBackPending">
            <summary>
            <para>Indicates that the rollback of the compose deployment is pending client input. <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)" /> is used to continue the rollback.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IByteSerializable">
            <summary>
            <para>Exposes the methods to serialize the object into a byte[] or deserialize the object from a byte[]</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IByteSerializable.ToBytes">
            <summary>
            Retrieves a byte[] representation of the object
            </summary>
            <returns>A byte[]</returns>
        </member>
        <member name="M:System.Fabric.IByteSerializable.FromBytes(System.Byte[])">
            <summary>
            Populates an object from a byte[]
            </summary>
            <param name="data">byte[] representation of the object</param>
        </member>
        <member name="T:System.Fabric.BackupRestore.BackupInfo">
            <summary>
            Represent information about the backup
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.Directory">
            <summary>
            Gets or sets the local folder/ directory where backup was taken
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.Option">
            <summary>
            Gets or sets the backup option type
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.BackupId">
            <summary>
            Gets or sets the unique backup ID
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.ParentBackupId">
            <summary>
            Backup ID of the parent backup
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.IndexBackupVersion">
            <summary>
            Gets or sets the Epoch and LSN of the first backed up log record
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.LastBackupVersion">
            <summary>
            Gets or sets the Epoch and LSN of the last backed up log record
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.BackupChainId">
            <summary>
            Gets the ID of backup-chain to which this backup belongs. A backup chain contains
            one full backup and zero or more continuous incremental backup(s) and starts at full backup. 
            </summary>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupInfo.BackupIndex">
            <summary>
            Gets the index of this backup in the backup-chain to which this backup belongs.
            A backup chain contains one full backup and zero or more continuous incremental backup(s).
            and starts at full backup. Since full backup starts the chain, its backup index is always zero.
            </summary>
        </member>
        <member name="T:System.Fabric.BackupRestore.BackupVersion">
            <summary>
            Represents the version of the backup.
            </summary>
        </member>
        <member name="F:System.Fabric.BackupRestore.BackupVersion.InvalidBackupVersion">
            <summary>
            Invalid Backup Version.
            </summary>
        </member>
        <member name="M:System.Fabric.BackupRestore.BackupVersion.#ctor(System.Fabric.Epoch,System.Int64)">
            <summary>
            Initializes a new instance of the <cref name="BackupVersion"/>
            </summary>
            <param name="epoch">The <cref name="Epoch"/> at which the backup was taken.</param>
            <param name="lsn">The last committed logical sequence number included in the backup.</param>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupVersion.Epoch">
            <summary>
            Gets the <cref name="Epoch"/> at which the backup was taken.
            </summary>
            <value>The <cref name="Epoch"/> at which the backup was taken.</value>
        </member>
        <member name="P:System.Fabric.BackupRestore.BackupVersion.Lsn">
            <summary>
            Gets the last committed logical sequence number included in the backup.
            </summary>
            <returns>The last committed logical sequence number included in the backup.</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.BackupVersion.CompareTo(System.Fabric.BackupRestore.BackupVersion)">
            <summary>
            Compares this instance with a specified <cref name="BackupVersion"/> object and indicates whether this instance precedes, 
            follows, or appears in the same position in the sort order as the specified <cref name="BackupVersion"/>. 
            </summary>
            <param name="other">An object that evaluates to a <cref name="BackupVersion"/>.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            Less than zero indicates that this instance precedes other in the sort order.
            Zero indicates that this instance occurs in the same position in the sort order as other. 
            Greater than zero indicates that this instance follows other in the sort order.
            </returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.BackupVersion.Equals(System.Fabric.BackupRestore.BackupVersion)">
            <summary>
            Determines whether this instance and another specified <cref name="BackupVersion"/> object have the same value.
            </summary>
            <param name="other">The <cref name="BackupVersion"/> to compare to this instance. </param>
            <returns>
            true if the value of the value parameter is the same as the value of this instance; otherwise, false. 
            </returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.BackupVersion.Equals(System.Object)">
            <summary>
            Determines whether this instance and another specified <cref name="BackupVersion"/> object have the same value.
            </summary>
            <param name="obj">The <cref name="BackupVersion"/> to compare to this instance. </param>
            <returns>
            true if the value of the value parameter is the same as the value of this instance; otherwise, false. 
            </returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.BackupVersion.GetHashCode">
            <summary>
            Returns the hash code for this <cref name="BackupVersion"/>.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="T:System.Fabric.BackupRestore.BackupOption">
            <summary>
            Describes the Details of Backup Taken 
            </summary>
        </member>
        <member name="F:System.Fabric.BackupRestore.BackupOption.Full">
            <summary>
            Defines a full Backup
            </summary>
        </member>
        <member name="F:System.Fabric.BackupRestore.BackupOption.Incremental">
            <summary>
            Defines a Incremental Backup
            </summary>
        </member>
        <member name="T:System.Fabric.BackupRestore.IBackupRestoreReplica">
            <summary>
            Interface which must be implemented by any stateful replica which supports automatic backup and restore
            </summary>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreReplica.BackupAsync(System.Fabric.BackupRestore.BackupOption,System.Func{System.Fabric.BackupRestore.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Method invoked on replica to backup state
            </summary>
            <param name="backupOption">Whether to take full or incremental backup</param>
            <param name="backupCallback">The callback which must be invoked in case backup completes</param>
            <param name="cancellationToken">For handling cancellation</param>
            <returns>An asynchronous task</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreReplica.RestoreAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method invoked on replica to trigger restore
            </summary>
            <param name="backupFolderPath">Path of the folder from which to restore state</param>
            <param name="forceRestore">Force restore state even if the backup folder contains a state which is older than or equal to the state contained in replica</param>
            <param name="cancellationToken">For handling cancellation</param>
            <returns>An asynchronous task</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreReplica.GetBackupMetadataAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get's the backup metadata which was previously stored using <see cref="M:System.Fabric.BackupRestore.IBackupRestoreReplica.SaveBackupMetadataAsync(System.Byte[],System.TimeSpan,System.Threading.CancellationToken)"/> method.
            </summary>
            <param name="timeout">Timeout for the operation</param>
            <param name="cancellationToken">For handling cancellation</param>
            <returns>Returns the array of bytes representing the backup metadata asynchronously</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreReplica.SaveBackupMetadataAsync(System.Byte[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Save the backup metadata persistently
            </summary>
            <param name="metadata">Backup metadata</param>
            <param name="timeout">Timeout for this operation</param>
            <param name="cancellationToken">For handling cancellation</param>
            <returns>An asynchronous task</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreReplica.ClearBackupMetadataAsync(System.TimeSpan)">
            <summary>
            Clear / delete the previously saved backup metadata
            </summary>
            <param name="timeout">Timeout for this operation</param>
            <returns>An asynchronous task</returns>
        </member>
        <member name="T:System.Fabric.BackupRestore.IBackupRestoreManager">
            <summary>
            Interface for backup restore manager which handles automatic backup and restore
            </summary>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreManager.Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            Initializes the backup restore manager using the service initialization parameters
            </summary>
            <param name="initializationParameters">Service initialization information such as service name, partition id, replica id, code package information.</param>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreManager.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            Opens the backup restore manager for use.
            </summary>
            <param name="openMode">Indicates this is new or existing replica</param>
            <param name="partition">The partition this replica belongs to</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represent the asynhronous open operation.</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreManager.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            Notify the backup restore manager that the replica role is changing, for example Primary or Secondary
            </summary>
            <param name="newRole">The new replica role, such as primary or secondary</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents asynchronous change role operation</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreManager.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Gracefully close the backup restore manager
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous close operation.</returns>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreManager.Abort">
            <summary>
            Forcefully abort the backup restore manager
            </summary>
        </member>
        <member name="M:System.Fabric.BackupRestore.IBackupRestoreManager.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            Method invoked when replica suffers a suspected data loss
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous on data loss operation</returns>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosEvent">
            <summary>
            This is the base class for all the different types of events that Chaos generates
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEvent.#ctor(System.String,System.DateTime)">
            <summary>
            The base constructor for a Chaos event
            </summary>
            <param name="kind"></param>
            <param name="timeStamp">DateTime of when the event occurred</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosEvent.TimeStampUtc">
            <summary>
            DateTime of when the event occurred
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosEvent.Kind">
            <summary>
            <para>Describes the type of ChaosEvent.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> The type of derived ChaosEvent</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEvent.ToBytes">
            <summary>
            In order to convert the Chaos event object into a byte array
            this override starts off by writing the event type and then
            calls the Write method of the derived class
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEvent.WriteInheritedMembers(System.IO.BinaryWriter)">
            <summary>
            This method is called from the derived class to convert the inherited members into bytes
            </summary>
            <param name="bw">A BinaryWriter object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEvent.ReadInheritedMembers(System.IO.BinaryReader)">
            <summary>
            This method is called from the derived class to convert back the inherited members from bytes
            </summary>
            <param name="br">A BinaryReader object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEvent.Write(System.IO.BinaryWriter)">
            <summary>
            This method is passed onto the derived classes for implementation
            </summary>
            <param name="bw">A BinaryWriter object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEvent.Read(System.IO.BinaryReader)">
            <summary>
            This method is passed onto the derived classed for implementation
            </summary>
            <param name="br">A BinaryReader object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEvent.ToString">
            <summary>
            Returns a string representation of the class
            </summary>
            <returns>A string object</returns>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.StartedEvent">
            <summary>
            <para>Represents the event that is created when Chaos is started for the first time or following a stop.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StartedEvent.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StartedEvent.#ctor(System.DateTime,System.Fabric.Chaos.DataStructures.ChaosParameters)">
             <summary>
            
             </summary>
             <param name="timeStamp"></param>
             <param name="chaosParameters"></param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.StartedEvent.ChaosParameters">
            <summary>
            Gets the object that encapsulate the parameters with which Chaos was started.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StartedEvent.ToString">
            <summary>
            Gets a string representation of the started event.
            </summary>
            <returns>A string representation of the started event.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StartedEvent.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StartedEvent.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent">
            <summary>
            <para>Represents the event that encapsulates the faults that are being executed by Chaos.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent.#ctor(System.DateTime,System.Collections.Generic.List{System.String})">
             <summary>
            
             </summary>
             <param name="timeStampUtc"></param>
             <param name="faults"></param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent.Faults">
            <summary>
            Gets the list of faults that Chaos is executing.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent.ToString">
            <summary>
            Gets a string representation of the executing faults event.
            </summary>
            <returns>A string representation of the executing faults event.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ValidationFailedEvent">
            <summary>
            <para>Represents the Chaos event that is created when validation fails and encapsulates information about why validation failed.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ValidationFailedEvent.Reason">
            <summary>
            Gets the string representation of the reason for the validation failure
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ValidationFailedEvent.ToString">
            <summary>
            Gets a string representation of the validation failed event.
            </summary>
            <returns>A string representation of the validation failed event.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ValidationFailedEvent.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ValidationFailedEvent.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.TestErrorEvent">
            <summary>
            <para>Represents the Chaos event that is created when a failure happens in Chaos test execution.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.TestErrorEvent.Reason">
            <summary>
            Gets the string representation of the reason for the validation failure
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.TestErrorEvent.ToString">
            <summary>
            Gets a string representation of the test error event.
            </summary>
            <returns>A string representation of the test error event.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.TestErrorEvent.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.TestErrorEvent.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.StoppedEvent">
            <summary>
            <para>Represents the Chaos event that is created when Chaos is stopped for some reason.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.StoppedEvent.Reason">
            <summary>
            Gets the reason for stopping.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StoppedEvent.ToString">
            <summary>
            Gets a string representation of the stopped event.
            </summary>
            <returns>A string representation of the stopped event.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StoppedEvent.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.StoppedEvent.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.WaitingEvent">
            <summary>
            <para>Represents the Chaos event that is created when Chaos is waiting for the cluster to be healthy again.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.WaitingEvent.Reason">
            <summary>
            Gets the string representation of the reason for the validation failure
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.WaitingEvent.ToString">
            <summary>
            Gets a string representation of the waiting for healthy system event.
            </summary>
            <returns>A string representation of the waiting for healthy system event.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.WaitingEvent.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.WaitingEvent.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosReport">
            <summary>
            <para>Represents the status of running Chaos, possibly within a time range, as returned by <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosReport.#ctor(System.Fabric.Chaos.DataStructures.ChaosParameters,System.Fabric.Chaos.DataStructures.ChaosStatus,System.Collections.Generic.List{System.Fabric.Chaos.DataStructures.ChaosEvent},System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport" /> class.</para>
            </summary>
            <param name="chaosParameters">Parameters with which Chaos was started</param>
            <param name="status">If Chaos is currently running or stopped.</param>
            <param name="history">The list of ChaosEvent's that match the ChaosReportFilter in ChaosParameters</param>
            <param name="continuationToken">If too many events match the ChaosReportFilter, those will be returned in multiple batches, the batches are linked by this token.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosReport.ChaosParameters">
            <summary>
            <para>Gets the parameters that was passed into <see cref="M:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters,System.TimeSpan,System.Threading.CancellationToken)" /> and with which Chaos was started.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosReport.Status">
            <summary>
            <para>Gets the current task (one of the enumerators in CurrentChaosTask <c>enum</c>) that Chaos is performing.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosReport.History">
            <summary>
            Gets the list of Chaos events that were produced during the time of interest specified in <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosReport.ContinuationToken">
            <summary>
            If the number of Chaos events is too large, then those will be returned in batches; so, to get the
            next batch of events the ContinuationToken must be passed in the API call, <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosReport.ToString">
            <summary>
            Gets a string representation of the chaos status object.
            </summary>
            <returns>A string representation of the chaos status object.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosReportFilter">
            <summary>
             <para>Represents the filter to choose the interesting ChaosEvent's to include in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport" /></para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosReportFilter.#ctor(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="startTimeUtc"></param>
            <param name="endTimeUtc"></param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosReportFilter.StartTimeUtc">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosReportFilter.EndTimeUtc">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosReportFilter.ToString">
            <summary>
            Gets a string representation of the chaos report object.
            </summary>
            <returns>A string representation of the chaos status object.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosReportFilter.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosReportFilter.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosEventType">
            <summary>
            This is an enum used during byte serialization/deserialization to encode type of a Chaos event
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosTargetFilter">
            <summary>
            <para> Defines all filters for targeted Chaos faults, for example, faulting only certain node types or faulting only certain applications.
            If ChaosTargetFilter is not used, Chaos faults all cluster entities.If ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter
            specification. NodeTypeInclusionList and ApplicationInclusionList allow a union semantics only. It is not possible to specify an intersection
            of NodeTypeInclusionList and ApplicationInclusionList. For example, it is not possible to specify "fault this application only when it is on that node type."
            Once an entity is included in either NodeTypeInclusionList or ApplicationInclusionList, that entity cannot be excluded using ChaosTargetFilter. Even if
            applicationX does not appear in ApplicationInclusionList, in some Chaos iteration applicationX can be faulted because it happens to be on a node of nodeTypeY that is included
            in NodeTypeInclusionList.If both NodeTypeInclusionList and ApplicationInclusionList are null or empty, an ArgumentException is thrown.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosTargetFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosTargetFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosTargetFilter.NodeTypeInclusionList">
            <summary>
            A list of node types to include in Chaos faults.
            All types of faults (restart node, restart codepackage, remove replica, restart replica, move primary, and move secondary) are enabled for the nodes of these node types.
            If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like NodeRestart) will never be enabled for the nodes of
            NodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the ApplicationInclusionList happens to reside on a node of NodeTypeX. 
            At most 100 node type names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfNodeTypesInChaosEntityFilter configuration.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosTargetFilter.ApplicationInclusionList">
            <summary>
            A list of application URI's to include in Chaos faults. 
            All replicas belonging to services of these applications are amenable to replica faults(restart replica, remove replica, move primary, and move secondary) by Chaos.
            Chaos may restart a code package only if the code package hosts replicas of these applications only.
            If an application does not appear in this list, it can still be faulted in some Chaos iteration if the application ends up on a node of a node type that is incuded in NodeTypeInclusionList.
            However if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be faulted.
            At most 1000 application names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfApplicationsInChaosEntityFilter configuration.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosTargetFilter.ToString">
            <summary>
            Gets a string representation of the ChaosTargetFilter object.
            </summary>
            <returns>A string representation of the ChaosTargetFilter object.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosTargetFilter.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosTargetFilter.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosStatus">
            <summary>
            <para>Represents the task that Chaos is presently executing.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosStatus.None">
            <summary>
            <para>Indicates that the current task is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosStatus.Running">
            <summary>
            <para>Indicates that Chaos is executing actions as part of fault inducing.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosStatus.Stopped">
            <summary>
            <para>Indicates that Chaos has finished inducing faults and now it is validating if the Cluster is stable and healthy.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosParameters">
            <summary>
            This class defines all the test parameters to configure the ChaosTestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.#ctor(System.Int64,System.Nullable{System.TimeSpan})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> class.</para>
            </summary>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higher the concurrency the more aggressive the failovers
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="timeToRun">Total time Chaos should run; maximum allowed value is TimeSpan.FromSeconds(uint.MaxValue)</param>
            <returns>The object containing the Chaos scenario parameters, typed as ChaosScenarioParameters</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> class.</para>
            </summary>
            <returns>The object containing the Chaos scenario parameters, typed as ChaosScenarioParameters</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.#ctor(System.TimeSpan,System.Int64,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> class.</para>
            </summary>
            <param name="maxClusterStabilizationTimeout">The maximum amount of time to wait for the entire cluster to stabilize after a fault iteration; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higher the concurrency the more aggressive the failovers
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="enableMoveReplicaFaults">Enables or disables the MovePrimary, MoveSecondary and MoveInstance faults.</param>
            <param name="timeToRun">Total time Chaos should run; maximum allowed value is TimeSpan.FromSeconds(uint.MaxValue)</param>
            <returns>The object containing the Chaos scenario parameters, typed as ChaosScenarioParameters</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.#ctor(System.TimeSpan,System.Int64,System.Boolean,System.TimeSpan,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> class.</para>
            </summary>
            <param name="maxClusterStabilizationTimeout">The maximum amount of time to wait for the entire cluster to stabilize after a fault iteration; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higher the concurrency the more aggressive the failovers
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="enableMoveReplicaFaults">Enables or disables the MovePrimary, MoveSecondary and MoveInstance faults.</param>
            <param name="timeToRun">After running for this much time, Chaos will stop; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="context">This is a bag of (key, value) pairs. This can be used to record detailed context about why Chaos is being started for example.</param>
            <returns>The object containing the Chaos scenario parameters, typed as ChaosScenarioParameters</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.#ctor(System.TimeSpan,System.Int64,System.Boolean,System.TimeSpan,System.Collections.Generic.Dictionary{System.String,System.String},System.TimeSpan,System.TimeSpan)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> class.</para>
            </summary>
            <param name="maxClusterStabilizationTimeout">The maximum amount of time to wait for the entire cluster to stabilize after a fault iteration; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higher the concurrency the more aggressive the failovers
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="enableMoveReplicaFaults">Enables or disables the MovePrimary, MoveSecondary and MoveInstance faults.</param>
            <param name="timeToRun">After running for this much time, Chaos will stop; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="context">This is a bag of (key, value) pairs. This can be used to record detailed context about why Chaos is being started for example.</param>
            <param name="waitTimeBetweenIterations">This is the amount of pause between two consecutive iterations of fault inducing. The more the pause, the less is the rate of faults over time; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="waitTimeBetweenFaults">This is the amount of pause between two consecutive faults in a single iteration -- the more the pause, the less the concurrency of faults; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.#ctor(System.TimeSpan,System.Int64,System.Boolean,System.TimeSpan,System.Collections.Generic.Dictionary{System.String,System.String},System.TimeSpan,System.TimeSpan,System.Fabric.Health.ClusterHealthPolicy)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> class.</para>
            </summary>
            <param name="maxClusterStabilizationTimeout">The maximum amount of time to wait for the entire cluster to stabilize after a fault iteration; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higher the concurrency the more aggressive the failovers
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="enableMoveReplicaFaults">Enables or disables the MovePrimary, MoveSecondary and MoveInstance faults.</param>
            <param name="timeToRun">After running for this much time, Chaos will stop; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="context">This is a bag of (key, value) pairs. This can be used to record detailed context about why Chaos is being started for example.</param>
            <param name="waitTimeBetweenIterations">This is the amount of pause between two consecutive iterations of fault inducing. The more the pause, the less is the rate of faults over time; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="waitTimeBetweenFaults">This is the amount of pause between two consecutive faults in a single iteration -- the more the pause, the less the concurrency of faults; cannot exceed TimeSpan.FromSeconds(uint.MaxValue)</param>
            <param name="clusterHealthPolicy">The cluster health policy that determines how healthy a cluster must be in order for Chaos to go on inducing faults.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.WaitTimeBetweenIterations">
            <summary>
            Wait time between two iterations for a random duration bound by this value.
            </summary>
            <value>
            The time-separation between two consecutive iterations of the ChaosTestScenario
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.MaxClusterStabilizationTimeout">
            <summary>
            The maximum amount of time to wait for the cluster to stabilize after a fault before failing the test.
            </summary>
            <value>
            After each iteration, the ChaosTestScenario waits for at most this amount of time for the cluster to become healthy
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.MaxConcurrentFaults">
            <summary>
            Maximum number of concurrent faults induced per iteration with the lowest being 1. The higer the concurrency the more aggressive the failovers;
            thus, inducing more complex series of failures to uncover bugs -- using 2 or 3 for this is recommended.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.EnableMoveReplicaFaults">
            <summary>
            Enables or disables the MovePrimary, MoveSecondary and MoveInstance faults.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.WaitTimeBetweenFaults">
            <summary>
            The maximum wait time between consecutive faults: the larger the value, the lower the concurrency (of faults).
            </summary>
            <value>
            Returns the maximum wait time between two consecutive faults as a TimeSpan
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.Context">
            <summary>
            Gets the bag of (key, value) pairs that was passed while starting Chaos
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.TimeToRun">
            <summary>
            Total time for which the scenario will run before ending.
            </summary>
            <value>
            Returns the max run-time of the scenario as TimeSpan
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.ClusterHealthPolicy">
            <summary>
            ClusterHealthPolicy determines the state of the health of the entities that Chaos
            ensures before going onto the next set of faults. Setting 'ConsiderWarningAsError' to false
            would let Chaos go onto the next set of faults while there are entities in the cluster with
            healthState == warning (although Chaos will skip the entities in warning while choosing
            faultable entities.)
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosParameters.ChaosTargetFilter">
            <summary>
            List of cluster entities to target for Chaos faults.
            This filter can be used to target Chaos faults only to certain node types or only to certain applications.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.ToString">
            <summary>
            Returns a string representation of the class
            </summary>
            <returns>A string object</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosParameters.RehydratePropertiesNotInCtorFrom(System.Fabric.Chaos.DataStructures.ChaosParameters)">
            <summary>
            Assumes the unique internal ctor is always called and populate the public properties that have not been set in that ctor
            </summary>
            <param name="source">The object from which to take the values of the ramaining public properties.</param>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosDescription">
            <summary>
            <para>Represents the status of Chaos.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosDescription.#ctor(System.Fabric.Chaos.DataStructures.ChaosStatus,System.Fabric.Chaos.DataStructures.ChaosParameters,System.Fabric.Chaos.DataStructures.ChaosScheduleStatus)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosDescription" /> class.</para>
            </summary>
            <param name="chaosStatus">The status of Chaos. Can be Stopped, Running or Invalid</param>
            <param name="chaosParameters">The parameters that Chaos runs with if Chaos is currently running or the parameters if Chaos was running with if Chaos was running. If Chaos has never ran before, then the value here does not have a meaning.</param>
            <param name="chaosScheduleStatus">The state of the schedule.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosDescription.Status">
            <summary>
            <para>Gets the Chaos status.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosDescription.ChaosParameters">
            <summary>
            <para>Gets the Chaos parameters.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosDescription.ScheduleStatus">
            <summary>
            <para>Gets the Chaos schedule status.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosDescription.ToString">
            <summary>
            <para>Gets a string representation of the Chaos description object.</para>
            </summary>
            <returns>A string representation of the Chaos description object.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegment">
            <summary>
            <para>Represents the events of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> caused by Chaos.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEventsSegment.#ctor(System.Collections.Generic.List{System.Fabric.Chaos.DataStructures.ChaosEvent},System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegment" /> class.</para>
            </summary>
            <param name="history">The list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> that match the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter" />.</param>
            <param name="continuationToken">If too many events match the filter, the events will be returned in multiple batches linked by this token.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosEventsSegment.History">
            <summary>
            <para>Gets the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> that were produced during the timerange
            specified in <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetChaosEventsAsync(System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" /></para>.
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> that were produced during the timerange specified in <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetChaosEventsAsync(System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" /></para>.
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosEventsSegment.ContinuationToken">
            <summary>
            <para>If the number of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> is too large, then those will be returned in segments. To get the next batch of events the ContinuationToken must be passed in the API call, <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetChaosEventsAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" />. </para>
            </summary>
            <value>
            <para>The string to pass into <see cref="M:System.Fabric.FabricClient.TestManagementClient.GetChaosEventsAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" /> when the resulting number of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> returned is too large to fit into one response.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEventsSegment.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegment" /> object.
            </summary>
            <returns>A string representation of the ChaosEventsSegment object.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter">
            <summary>
             <para>Represents the filter to choose the ChaosEvent's to include in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegment" /></para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter.#ctor(System.DateTime,System.DateTime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter" /> class.</para>
            </summary>
            <param name="startTimeUtc">Include events starting from this time.</param>
            <param name="endTimeUtc">Include events starting before this time.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter.StartTimeUtc">
            <summary>
            <para>Gets the <see cref="T:System.DateTime"/> representing earliest time of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> this filter will include.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.DateTime"/> representing earliest time of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> this filter will include.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter.EndTimeUtc">
            <summary>
            <para>Gets the <see cref="T:System.DateTime"/> representing latest time of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> this filter will include.</para>
            </summary>
            <value>
            <para>Gets the <see cref="T:System.DateTime"/> representing latest time of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" /> this filter will include.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter.ToString">
            <summary>
            Gets a string representation of the ChaosEventsSegmentFilter object.
            </summary>
            <returns>A string representation of the ChaosEventsSegmentFilter object.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosScheduleStatus">
            <summary>
            <para>Represents the state of the Chaos schedule.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleStatus.Invalid">
            <summary>
            <para>Indicates that the Chaos schedule is invalid and is not being used for scheduling.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleStatus.Active">
            <summary>
            <para>Indicates that the Chaos schedule is running and runs of Chaos will be scheduled based on the schedule.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleStatus.Expired">
            <summary>
            <para>Indicates that Chaos schedule is not being used to schedule runs of Chaos because it is after the schedule's expiry date.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleStatus.Pending">
            <summary>
            <para>Indicates that Chaos schedule is not yet being used to schedule runs of Chaos because it is before the schedule's start date.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleStatus.Stopped">
            <summary>
            <para>Indicates that Chaos schedule is stopped and is not being used for scheduling runs of Chaos.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription">
            <summary>
            <para>Represents a versioned <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" />. The version of a schedule is a number that gets updated when the schedule is updated.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription" /> class with Version set to 0 and an empty schedule.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.#ctor(System.Int32,System.Fabric.Chaos.DataStructures.ChaosSchedule)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription" /> class with a provided schedule and version.</para>
            </summary>
            <param name="version">The version of the schedule.</param>
            <param name="schedule">The schedule for scheduling runs of Chaos.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.Version">
            <summary>
            <para>Gets the version number of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" />.</para>.
            </summary>
            <value>
            <para>The version of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" />. A valid version number is greater than 0. The version of the schedule held by Chaos is updated whenever the schedule is updated.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.Schedule">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" /> describing the schedule of automated Chaos runs.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" /> describing the schedule of automated Chaos runs.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.IncrementVersion">
            <summary>
            <para>Increase the Version by 1, wrapping back to 0 if the Version would be greater than 2,147,483,648.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.Write(System.IO.BinaryWriter)">
            <summary>
            <para>Writes the state of this object into a byte array.</para>
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.Read(System.IO.BinaryReader)">
            <summary>
            <para>Reads the state of this object from byte array.</para>
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleDescription.ToString">
            <summary>
            <para>Gets a string representation of the chaos schedule description object.</para>
            </summary>
            <returns>A string representation of the chaos schedule description object.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosSchedule">
            <summary>
            <para>Represents a schedule that automates rus of Chaos.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosSchedule.AllDaysOfWeek">
            <summary>
            <para>temp</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosSchedule.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" /> representing an empty schedule.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosSchedule.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.Dictionary{System.String,System.Fabric.Chaos.DataStructures.ChaosParameters},System.Collections.Generic.List{System.Fabric.Chaos.DataStructures.ChaosScheduleJob})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" /> class.</para>
            </summary>
            <param name="startDate">Date and time to begin using this schedule to automate Chaos runs.</param>
            <param name="expiryDate">Date and time to stop using this schedule to automate Chaos runs.</param>
            <param name="chaosParametersDictionary">A mapping of ChaosParameters to string names referenced by <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> in Jobs.</param>
            <param name="jobs">List of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> describing when to run Chaos.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosSchedule.StartDate">
            <summary>
            <para>Gets the <see cref="T:System.DateTime"/> representing the date and time at which this schedule will start being used for scheduling runs of Chaos.</para>
            </summary>
            <value>
            <para>Gets the <see cref="T:System.DateTime"/> representing the date and time at which this schedule will start being used for scheduling runs runs of Chaos.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosSchedule.ExpiryDate">
            <summary>
            <para>Gets the <see cref="T:System.DateTime"/> representing the date and time at which this schedule will expire and no longer be used for scheduling runs of Chaos.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.DateTime"/> representing the date and time at which this schedule will expire and no longer be used for scheduling runs of Chaos.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosSchedule.ChaosParametersDictionary">
            <summary>
            <para>Gets the mapping of names to <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" />. The parameters are referenced by name in <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" />.</para>
            </summary>
            <value>
            <para>The mapping of names to <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" />. The parameters are referenced by name in <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosSchedule.Jobs">
            <summary>
            <para>Gets the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> that define when to run Chaos.</para>
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> that define when to run Chaos.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosSchedule.ToString">
            <summary>
            Gets a string representation of the Chaos schedule object.
            </summary>
            <returns>A string representation of the Chaos schedule object.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosSchedule.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosSchedule.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob">
            <summary>
            <para>Represents a rule for when and how to run Chaos.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.#ctor(System.String,System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays,System.Collections.Generic.List{System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> class.</para>
            </summary>
            <param name="chaosParameters">Parameters to run Chaos with.</param>
            <param name="days">Which days of the week this job will trigger runs of Chaos.</param>
            <param name="times">What times of the day Chaos will be running for.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.ChaosParameters">
            <summary>
            <para>Gets the named reference to the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> stored in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" />. Automated runs of Chaos defined by this job will run with these parameters.</para>
            </summary>
            <value>
            <para>The named reference to the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> stored in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosSchedule" />. Automated runs of Chaos defined by this job will run with these parameters.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.Days">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays" /> for which days this job will automatically start runs of Chaos.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays" /> for which days this job will automatically start runs of Chaos.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.Times">
            <summary>
            <para>Gets the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc" /> representing the time ranges in a day for which this Chaos will be scheduled to run. The time ranges are treated as UTC time.</para>
            </summary>
            <value>
            <para>Gets the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc" /> representing the time ranges in a day for which this Chaos will be scheduled to run. The time ranges are treated as UTC time.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosStatus" /> object.
            </summary>
            <returns>A string representation of the chaos status object.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.ToStringIndented(System.Int32)">
            <summary>
            Gets a string representation of the chaos status object with indentation.
            </summary>
            <param name="indentLevel">How many indents (4 spaces) the output will have in front of each line.</param>
            <returns>A string representation of the chaos status object with indentation.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJob.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays">
            <summary>
            <para>Represents which days of the week the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob"/> is active for.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays" /> class with all days set to false.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.#ctor(System.Collections.Generic.HashSet{System.DayOfWeek})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays" /> class with all days set to false.</para>
            </summary>
            <param name="activeDaysSet">A set of days of the week that a job will be active for.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.#ctor(System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays" /> class by copying another set of active days.</para>
            </summary>
            <param name="other">Another set of days to copy.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Sunday">
            <summary>
            <para>Gets the value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Sunday.</para>
            </summary>
            <value>
            <para>The value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Sunday.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Monday">
            <summary>
            <para>Gets the value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Monday.</para>
            </summary>
            <value>
            <para>The value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Monday.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Tuesday">
            <summary>
            <para>Gets the value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Tuesday.</para>
            </summary>
            <value>
            <para>The value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Tuesday.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Wednesday">
            <summary>
            <para>Gets the value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Wednesday.</para>
            </summary>
            <value>
            <para>The value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Wednesday.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Thursday">
            <summary>
            <para>Gets the value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Thursday.</para>
            </summary>
            <value>
            <para>The value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Thursday.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Friday">
            <summary>
            <para>Gets the value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Friday.</para>
            </summary>
            <value>
            <para>The value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Friday.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Saturday">
            <summary>
            <para>Gets the value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Saturday.</para>
            </summary>
            <value>
            <para>The value of whether or not a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob" /> will be active on Saturday.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.GetDayValueByEnum(System.DayOfWeek)">
            <summary>
            Get value of a day using the matching DayOfWeek enum.
            </summary>
            <param name="day">The day to get the status of.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.NoActiveDays">
            <summary>
            Determine if there are no days active.
            </summary>
            <returns>True if all the days have a false value, otherwise, return false.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of the chaos schedule job active days object.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc">
            <summary>
            <para>Represents a time range in a 24 hour day in UTC time.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.WholeDay">
            <summary>
            <para>A <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc" /> representing the entire day.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.#ctor(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc" /> class by copying another time range.</para>
            </summary>
            <param name="other">Another time range to copy.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.#ctor(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc,System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc" /> class with a provided start and end time.</para>
            </summary>
            <param name="startTime">Start of time range.</param>
            <param name="endTime">End of time range.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.StartTime">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc"/> representing the UTC starting time of the day for a run of Chaos defined by a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc"/> representing the UTC starting time of the day for a run of Chaos defined by a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.EndTime">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc"/> representing the UTC ending time of the day for a run of Chaos defined by a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc"/> representing the UTC ending time of the day for a run of Chaos defined by a <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleJob"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.ToString">
            <summary>
            Gets a string representation of the ChaosScheduleTimeRangeUtc object.
            </summary>
            <returns>A string representation of the ChaosScheduleTimeRangeUtc object.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc">
            <summary>
            <para>Represents a time of day in 24 hour time. Time is in UTC time.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.StartOfDay">
            <summary>
            <para>A <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc" /> representing the start of the day in UTC time.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.EndOfDay">
            <summary>
            <para>A <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc" /> representing the end of the day in UTC time.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc" /> class.</para>
            </summary>
            <param name="hour">Hour of the day in 24 hour time format.</param>
            <param name="minute">Minute of the hour.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.#ctor(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc" /> class by copying another time.</para>
            </summary>
            <param name="other">Another ChaosScheduleTimeUtc to copy.</param>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.Hour">
            <summary>
            <para>Gets the integer representing the hour of the day in 24 hour format.</para>
            </summary>
            <value>
            <para>The integer representing the hour of the day in 24 hour format.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.Minute">
            <summary>
            <para>Gets the integer representing the minute of the hour of the day.</para>
            </summary>
            <value>
            <para>Gets the integer representing the minute of the hour of the day.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.op_GreaterThan(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc,System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Compares if left side time is later in the day than the right side.</para>
            </summary>
            <param name="operand1">Left side of operator.</param>
            <param name="operand2">Right side of operator.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.op_LessThan(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc,System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Compares if left side time is earlier in the day than the right side.</para>
            </summary>
            <param name="operand1">Left side of operator.</param>
            <param name="operand2">Right side of operator.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.op_GreaterThanOrEqual(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc,System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Compares if left side time is later or at the same time in the day as the right side.</para>
            </summary>
            <param name="operand1">Left side of operator.</param>
            <param name="operand2">Right side of operator.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.op_LessThanOrEqual(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc,System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Compares if left side time is earlier in the day or at the same time as the right side.</para>
            </summary>
            <param name="operand1">Left side of operator.</param>
            <param name="operand2">Right side of operator.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.op_Equality(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc,System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Compares if left side time is the same time as the right side.</para>
            </summary>
            <param name="operand1">Left side of operator.</param>
            <param name="operand2">Right side of operator.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.op_Inequality(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc,System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Compares if the left side time is not the same time as the right side.</para>
            </summary>
            <param name="operand1">Left side of operator.</param>
            <param name="operand2">Right side of operator.</param>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.CompareTo(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Determine how this time relates to another time. </para>
            </summary>
            <returns>Returns 1 if this time is later than the other time, 0 if they are the same time and -1 if this time comes before the other time.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.Equals(System.Object)">
            <summary>
            <para>Compare if this time is equal to another object.</para>
            </summary>
            <returns>returns true if both are equal, false otherwise.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.Equals(System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc)">
            <summary>
            <para>Compare if this time is equal to another time.</para>
            </summary>
            <returns>True if both times are equal. False otherwise.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.GetHashCode">
            <summary>
            <para>Get a hashcode for this object.</para>
            </summary>
            <returns>A hash value.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of the chaos schedule time object.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the state of this object into a byte array.
            </summary>
            <param name="bw">A BinaryWriter object.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc.Read(System.IO.BinaryReader)">
            <summary>
            Reads the state of this object from byte array.
            </summary>
            <param name="br">A BinaryReader object</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="F:System.Fabric.Chaos.Common.ChaosConstants.ServiceFabricChaosInternalContextKeyPrefix">
             <summary>
             These are the special keys that get passed through the context dictionary of ChaosParameters
             in StartChaosAsync; this is internal and for test purpose only.
             </summary>
            
        </member>
        <member name="T:System.Fabric.Chaos.Common.ChaosUtility.ObjectVisitMode">
            <summary>
            Whether to update a value of a property on the object or verify that a property on the object has a certain value.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.MakeLengthNotMultipleOfFour(System.String)">
            <summary>
            If it is a native or rest call, reason in TestErrorEvent, ValidationFailedEvent, or WaitingEvent
            is not compressed, but the reason could be a valid base64 string by itself,
            thus the reason being not compressed will not be caught in Decompress.
            This method makes the reason not a base64 when it is not compressed (i.e., it was rest or native client).
            </summary>
            <param name="reason">Reason in TestErrorEvent, ValidationFailedEvent, and WaitingEvent</param>
            <returns>If reason has length a multiple of 4, this returns the floor or ceil that is not a multiple of 4.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.MakeLengthNotMultipleOfFourIgnoreReasonLength(System.String)">
            <summary>
            If it is a native or rest call, reason in TestErrorEvent, ValidationFailedEvent, or WaitingEvent
            is not compressed, but the reason could be a valid base64 string by itself,
            thus the reason being not compressed will not be caught in Decompress.
            This method makes the reason not a base64 when it is not compressed (i.e., it was rest or native client).
            </summary>
            <param name="reason">Reason in TestErrorEvent, ValidationFailedEvent, and WaitingEvent</param>
            <returns>If reason has length a multiple of 4, this returns the floor or ceil that is not a multiple of 4.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.ThrowOrAssertIfTrue(System.String,System.Boolean,System.String,System.Fabric.Chaos.RandomActionGenerator.ClusterStateSnapshot)">
            <summary>
            In test this asserts and in production this throws
            </summary>
            <param name="id">Needed to do separate aggregation for different kinds of ThrowOrAssert</param>
            <param name="condition"></param>
            <param name="message"></param>
            <param name="snapshot"></param>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.VisitObject(System.Object,System.String,System.String,System.Fabric.Chaos.Common.ChaosUtility.ObjectVisitMode)">
            <summary>
            Recursively visits through the properties of the object and based on mode takes appropriate action.
            </summary>
            <param name="obj">Object to visit</param>
            <param name="name">Fully qualified name of the property to take action on. We insist on qualifying the property fully like 'System.Fabric.Chaos.DataStructures.ChaosParameters.MaxConcurrentFaults' so that in the property graph we know exactly which property we are targetting.</param>
            <param name="value">Value of the target property</param>
            <param name="mode">If 'Update' updates the target property with 'value', if 'Verify' checks if the target property has 'value'</param>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.Helper(System.Object,System.String,System.String,System.Fabric.Chaos.Common.ChaosUtility.ObjectVisitMode,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Recursively visits through the properties of the object and based on mode takes appropriate action.
            </summary>
            <param name="obj">Object to visit</param>
            <param name="name">Fully qualified name of the property to take action on. We insist on qualifying the property fully like 'System.Fabric.Chaos.DataStructures.ChaosParameters.MaxConcurrentFaults' so that in the property graph we know exactly which property we are targetting.</param>
            <param name="value">Value of the target property</param>
            <param name="mode">If 'Update' updates the target property with 'value', if 'Verify' checks if the target property has 'value'</param>
            <param name="visited">To avoid cycles, contains the names of the properties that have already been visited and if encountered again avoids digging deeper.</param>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.MatchSuffix(System.String,System.String)">
            <summary>
            Matches progressively longer suffixes of haystack with needle.
            Note, assumes both haystack and needle to be non-empty.
            </summary>
            <param name="haystack">In the string where needle should be searched for.</param>
            <param name="needle">The string that we are looking for.</param>
            <returns>True if any suffix of haystack matches needle, otherwise False.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.GetList(System.Type,System.String,System.Char)">
            <summary>
            Splits value based on separator and returns as a list.
            </summary>
            <param name="T">The type of the list elements.</param>
            <param name="value">The string to parse to get the string elements.</param>
            <param name="separator">Delimeter to split the string.</param>
            <returns>List of the separated parts.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.Common.ChaosUtility.CreateList(System.Type)">
            <summary>
            Initializes a list of type type
            </summary>
            <param name="type">Element type</param>
            <returns>A list of type</returns>
        </member>
        <member name="T:System.Fabric.Chaos.Common.CoordinatorStateData">
            <summary>
            Common base class for the 2 different types of coordinators that IS supports.
            </summary>
            <remarks>
            There is little in common between the 2 coordinators of IS. Using this base class more for
            minimizing change in other modules in this code base than for genuinely sharing common stuff.
            </remarks>
        </member>
        <member name="T:System.Fabric.Chaos.Common.InfrastructureServiceMode">
            <summary>
            Modes of operation of the IS.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.Common.InfrastructureServiceMode.Serial">
            <summary>
            IS can process only one Azure infrastructure job at a time.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.Common.InfrastructureServiceMode.Parallel">
            <summary>
            IS can process multiple Azure infrastructure jobs at a time.
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.CoordinatorStateDataSerial">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.CoordinatorStateDataParallel">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.JobSummary">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.JobStepSummary">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.ImpactedRoleInstance">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.InfrastructureTaskStateData">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.NodeTaskDescriptionData">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.ManagementNotificationData">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.JobData">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.Common.JobCollectionData">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator">
            <summary>
            This class will provide methods to translate RandomSessionAction to equivalent TestabilityAction(s).
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator.GetCommandsMap(System.Collections.Generic.IList{System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction})">
            Create and append commands for the given action(s).
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator.GetCommandForActions(System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction)">
            Create and append commands for the given action.
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters">
            <summary>
            This class adds new test parameters which are relevant to RandomSession.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemFaultActionWeightDefault">
            <summary>
            Default weight to control the probability with which a system fault will be chosen
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemFaultActionWeight">
            <summary>
            Weight to control the probability with which a system fault is chosen
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemServiceFaultParameters">
            <summary>
            Parameters for system faults, e.g., FM Rebuild
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.IsInfrastructureUpgradingAction.IsInfrastructureUpgradingActionHandler.GetInfrastructureServiceStatus(System.Fabric.FabricClient,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Fetches the current status of the InfraStructureService instances.
            </summary>
            <param name="fabricClient">The FabricClient to make API calls again the InfrastructureService</param>
            <param name="operationTimeout">Total time of all retries.</param>
            <param name="requestTimeout">Timeout for a single query.</param>
            <param name="ct">CancellationToken</param>
            <returns>A dictionary which provides status of all infrastructure service instances.</returns>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultInformationHelper.LiveNodesCount">
            <summary>
            The number of live nodes with which we start a Chaos iteration -- based on the StateSnapshot.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultInformationHelper.FaultReadyLiveNodesCount">
            <summary>
            The number of nodes that would have been alive at this moment, had we executed the pending faults right now.
            For example, if we are in the middle of a Chaos iteration and 
            we have already chosen (but have not executed yet) one node to restart, the FaultReadyLiveNodesCount will
            give us one less live nodes than the number of live nodes with which we started the current iteration.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultInformationHelper.LiveExcludedNodesCount">
            <summary>
            These are the nodes that are alive and are not included in the passed in NodeTypeInclusionList of ChaosTargetFilter
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultInformationHelper.LiveExcludedSeedNodesCount">
            <summary>
            These are the seed nodes that are alive and are not included in the passed in NodeTypeInclusionList of ChaosTargetFilter
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- NodeFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.MinLiveNodesRatio">
            <summary>
            Creation of node-faults must maintain live/Up nodes's ratio higher than this value.
            This is a constraint while creating NodeFault actions.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.MinLiveSeedNodesRatio">
            <summary>
            Creation of node-faults must maintain live/Up seed-nodes's ratio higher than this value.
            This is a constraint while creating NodeFault actions.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.RestartNodeFaultWeight">
            <summary>
            Action generator will create RestartNodeAction rather than StopNodeAction with this much probability.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.StartStopNodeFaultWeight">
            <summary>
            Action generator will create RestartNodeAction rather than StopNodeAction with this much probability.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.PartitionEntity.GetFaultReadyReplicaList">
            <summary>
             Taking safe mode into account, returns the list of replicas which are ready to be faulted.
            </summary>
            <returns>Readonly list of faultready replicas</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.RandomExtensions">
            <summary>
            This class will be a helper class to generate random entities.
            This class adds new test parameters which are relevant to RandomSession.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RandomExtensions.ChooseRandomItemOrDefault``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a randomly chosen item from given collection.
            </summary>
            <typeparam name="T">type of items in collection.</typeparam>
            <param name="items">Input collection of items from an item will be chosen</param>
            <returns>Returns an item at randomly chosen index if collection non-empty.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator">
            <summary>
            This class will be helpful in generating Random Actions.
            This class will serve as entry point to generate any RandomSessionAction.
            This class will basically schedule and invoke different ActionsManager based on state and their configurable weights.
            and will translate those to ScriptTest commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.systemFaultActionGenerator">
            <summary>
            Generator for system faults, like: FM Rebuild fault
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.FaultCategory.SystemFaults">
            <summary>
            For example, FM Rebuild
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.GenerateFaultCategories">
            <summary>
            Generates and returns a list of fault categories without modifying the current cluster snapshot
            </summary>
            <returns>A list of fault categories</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- NodeFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType">
            <summary>
            This enum will represent a type of action RandomSessionAction on WindowsFabric cluster which gets generated during RandomSession.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType.FmRebuild">
            <summary>
            Forces the Failover Manager service to rebuild GFUM
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction">
            <summary>
            This class will represent an action on WindowsFabric cluster which gets generated during RandomSession.
            In general an action could represent a change in set of cluster nodes, faults,
            applications, services or verification step or just a query.
            Action will be executed with help of one or more ScriptTest commands.
            </summary>
            TODO FW: make it abstract after script test side code is refactor and totally dependent on testability.
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction.StateTransitionActionGroupId">
            <summary>
            A group of actions is produced in one iteration of Chaos, this ID uniquely identifies that group of actions
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction.StateTransitionActionId">
            <summary>
            Each chosen action by Chaos is a fault, this ID uniquely identifies the fault
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ClusterStateSnapshot.MatchNodesByNameOrId(System.String,System.String)">
            <summary>
            Matches nodeName1 with nodeName2; if only one of these two node names have "nodeid:&lt;id-value&gt;" format,
            this method converts the other node name into that format as well and then matches (RDBug 6864934, 6720354)
            </summary>
            <param name="nodeName1">A node name</param>
            <param name="nodeName2">A node name</param>
            <returns>true if the node names match, else false</returns>
            <remarks>Look into RDBug 6864934 for more details</remarks>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator">
            <summary>
            This class will keep track of current state of the WindowsFabricCluster being used for testing
            and generates random actions to change state, induce fault in it or verify consistency of the state.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.testParameters">
            <summary>
            Parameters for generating system fault actions
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.stateSnapshot">
            <summary>
            Current snapshot of the cluster
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.systemFaultCategoryChooser">
            <summary>
            Probabilistically chooses a system fault category
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.#ctor(System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator"/> class.
            </summary>
            <param name="testParameters"> Parameters for this random session.</param>
            <param name="random"> Random number generator </param>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.SystemFaultCategory">
            <summary>
            System fault categories
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.SystemFaultCategory.FmRebuild">
            <summary>
            Forces the Failover Manager service to rebuild the GFUM
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.GenerateAndEnqueueRandomActions(System.Guid)">
            <summary>
            Generates and enqueues random actions
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.CreateSystemFaultAction(System.Guid)">
            <summary>
            Creates and returns random system fault actions
            </summary>
            <returns>A state transition action</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.CreateOneSystemFaultAction(System.Guid)">
            <summary>
            Creates and returns one system fault action
            </summary>
            <returns>A transition action for a system service</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- SystemFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.FmRebuildFaultWeightDefault">
            <summary>
            Default weight for FmRebuild system fault action
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.FmRebuildFaultWeight">
            <summary>
            Gets or sets the weight to determine the probability with which 
            the action generator will create FmRebuildAction.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True only if all parameters in this class are valid.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction">
            <summary>
            This class is used to create instances of various system state transition actions
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction.#ctor(System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction"/> class.
            </summary>
            <param name="actionType">StateTransitionActionType</param>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction.CreateFmRebuildStateTransitionAction">
            <summary>
            Creates and returns a state transition action, upon execution of which, the Failover
            Manager service is forced to rebuild the GFUM
            </summary>
            <returns>A system service state transition action</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1">
            <summary>
            This class will be helpful in generating random weighted outcomes.
            Basically it will be used to choose one of the several options with their associated weight/probability ratio.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.NextRoll">
            <summary>
            Returns a randomly chosen face. Probability of any face is proportional to it's weight.
            </summary>
            <returns>Returns a randomly chosen face.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.AddNewFace(`0,System.Double)">
            <summary>
            Adds a new face to the dice.
            </summary>
            <param name="faceId">The id of the face.</param>
            <param name="weight">The weight of the dice.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.UpdateRangeTree">
            <summary>
            Update the range tree.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.AccountHelper.CreateUserHandle(System.String,System.String,System.IntPtr,System.Boolean,System.Fabric.Common.NativeHelper.LogonType,System.Fabric.Common.NativeHelper.LogonProvider)">
            <summary>
            This function logs in the specified user and returns a valid handle
            If it is unable to return a valid handle, it will throw an InvalidOperationException
            This behavior exists due to this function having the most context on reporting what
            went wrong so isolate the error handling here
            </summary>
        </member>
        <member name="M:System.Fabric.Common.CertificateManager.FindMatchingCertificates(System.Fabric.Management.ServiceModel.FabricCertificateType,System.Boolean,System.Boolean)">
            <summary>
            A re-take on the certificate finding method, acting on a single cert declaration. 
            </summary>
            <param name="certificateDeclaration">A certificate declaration, complete with find type, find value and store name.</param>
            <param name="selectMostRecentOnlyFromMultipleMatches">If true, only the most recent cert is retained from a set of multiple matches</param>
            <param name="excludeExpired">True if expired certificates should be returned; false otherwise.</param>
            <returns>List of matching certificates.</returns>
        </member>
        <member name="M:System.Fabric.Common.CertificateManager.TryValidateX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Fabric.Common.CertificateManager.IsCertificateAMatchForFindValue,System.String,System.Fabric.Common.CertificateManager.X509CertificateChainValidator)">
            <summary>
            Validates a given certificate against an expected thumbprint, and according to the specified parameters.
            </summary>
            <param name="certificate">Certificate to validate.</param>
            <param name="matchingFn"></param>
            <param name="expectedFindValue"></param>
            <param name="chainValidator"></param>
            <returns>True if the cert was validated succesfully, and false otherwise.</returns>
        </member>
        <member name="T:System.Fabric.Common.CertificateManager.X509CertificateChainValidator">
            <summary>
            Abstract base class for custom chain validation; use this class to extend the .Net X509Chain class
            and implement custom validation logic, such as subject+issuer, trusted issuer store etc.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.CertificateManager.PinnedIssuerX509CertificateChainValidator">
            <summary>
            Implements custom chain validation for pinned issuers.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.CertificateManager.TrustedIssuerStoreX509CertificateChainValidator">
            <summary>
            Implements custom chain validation based on trusted issuer stores and (optional) issuer subject CN.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.CertificateManager.PinnedLeafX509CertificateChainValidator">
            <summary>
            Implements custom chain validation logic for a certificate declared by thumbprint.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.FabricCertificateTypeExtensions">
            <summary>
            Extension for auto-generated type FabricCertTypeExtension
            </summary>
        </member>
        <member name="M:System.Fabric.Common.FabricCertificateTypeExtensions.ToString(System.Fabric.Management.ServiceModel.FabricCertificateType)">
            <summary>
            Log-friendly description of the certificate declaration.
            </summary>
            <param name="certDeclaration"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.FabricFile.SetFileInformationByHandle(System.Runtime.InteropServices.SafeHandle,System.Fabric.Interop.Kernel32Types.FILE_INFO_BY_HANDLE_CLASS,System.Fabric.Interop.Kernel32Types.FileInformation@,System.Int32)">
            <summary>
            PInvokes to SetFileInformationByHandle: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365539(v=vs.85).aspx
            </summary>
            <param name="hFile">
            A handle to the file for which to change information.
            This handle must be opened with the appropriate permissions for the requested change.
            </param>
            <param name="FileInformationClass">
            A FILE_INFO_BY_HANDLE_CLASS enumeration value that specifies the type of information to be changed.
            </param>
            <param name="FileInformation">
            A pointer to the buffer that contains the information to change for the specified file information class. 
            The structure that this parameter points to corresponds to the class that is specified by FileInformationClass.</param>
            <param name="dwBufferSize">The size of FileInformation, in bytes.</param>
            <returns>
            Returns nonzero if successful or zero otherwise.
            To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Only supported FileInformationClass is FileInformationClass.FileIoPriorityHintInfo.
            More can be added as needed.
            </remarks>
            <devnote>
            Note that here we PInvoke to Win32 directly instead of PInvoking the FabricCommon and then calling a Win32 API.
            This is because currently this API is not used in native and hence going through FabricCommon would be unncessary.
            If the need ever rises, we could plumb this through FabricCommon.
            </devnote>
        </member>
        <member name="M:System.Fabric.Common.FabricFile.NtQueryInformationFile(System.Runtime.InteropServices.SafeHandle,System.Fabric.Interop.NTTypes.IO_STATUS_BLOCK@,System.IntPtr,System.UInt32,System.Fabric.Interop.NTTypes.FILE_INFORMATION_CLASS)">
            <summary>
            PInvokes to NtQueryInformationFile: https://msdn.microsoft.com/en-us/library/windows/hardware/ff567052(v=vs.85).aspx
            </summary>
            <param name="FileHandle">Handle to a file object.</param>
            <param name="IoStatusBlock">
            Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the operation. 
            The Information member receives the number of bytes that this routine actually writes to the FileInformation buffer.
            </param>
            <param name="pInfoBlock">
            Pointer to a caller-allocated buffer into which the routine writes the requested information about the file object. 
            The FileInformationClass parameter specifies the type of information that the caller requests.
            </param>
            <param name="length">The size, in bytes, of the buffer pointed to by FileInformation.</param>
            <param name="fileInformation">
            Specifies the type of information to be returned about the file, in the buffer that FileInformation points to. 
            Device and intermediate drivers can specify any of the following FILE_INFORMATION_CLASS values.
            </param>
            <returns></returns>
            <devnote>
            This method is marked internal to indicate that it is used for testing purposes only.
            SetFileInformationByHandle does not have a getter pair that allows querying FILE_IO_PRIORITY_HINT_INFO.
            Hence NtQueryInformationFile is used, which does expose a getter for the FILE_IO_PRIORITY_HINT_INFO, to test SetFileInformationByHandle.
            </devnote>
        </member>
        <member name="M:System.Fabric.Common.FabricFile.Move(System.String,System.String)">
            <summary>
            Move the <paramref name="src"/> file to the <paramref name="des"/> file.
            If the <paramref name="des"/> exists, a FabricException is throw.
            Once the move operation is successfully completed, <paramref name="src"/> file content would be moved to the <paramref name="des"/> file.
            [NOTE] : <paramref name="src"/> would not exist after the successful completion.
            </summary>
            <param name="src">File to move</param>
            <param name="des">New renamed file name</param>
        </member>
        <member name="M:System.Fabric.Common.FabricFile.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replace the <paramref name="sourceFileName"/> file to the <paramref name="destinationFileName"/> file.
            Order of operations :
                1. Copy <paramref name="destinationFileName"/> to <paramref name="destinationBackupFileName"/>
                2. Move <paramref name="sourceFileName"/> to <paramref name="destinationFileName"/>
                3. Delete <paramref name="sourceFileName"/>
            <paramref name="destinationFileName"/> must exist, else a FileNotFoundException would be thrown.
            If the <paramref name="destinationBackupFileName"/> does not exist, it will be created. If it does exists, it would be overwritten.
            </summary>
            <param name="sourceFileName">Source file to replace</param>
            <param name="destinationFileName">New renamed destination file name</param>
            <param name="destinationBackupFileName">Backup of the original <paramref name="destinationFileName"/> file</param>
            <param name="ignoreMetadataErrors"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.IsStatefulService(System.Type)">
            <summary>
            Returns true if it is stateful
            Returns false if it is stateless
            Returns null if it is both IFabricStatefulServiceReplica and IStatelessService
            Returns null if it is neither IFabricStatefulServiceReplica nor IStatelessService
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Helpers.GetNodeResourcePath(System.String,System.Fabric.Common.Helpers.DeploymentSpecificationResourceDelegate)">
            <summary>
            Automatically infers node name on the machine and finds resource
            under path [dataRoot]\[inferredNodeName]\[desiredResourceSubPath] or returns null.
            </summary>
            <param name="dataRoot"></param>
            <param name="resoucePathRetrievalMethod">Delegate used to retrieve file path pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Helpers.DeleteDirectoryIfExist(System.String,System.String)">
            <summary>
            Removes the given directory if it exists on the given machine
            If the machineName is null, the local machine is assumed to be the default
            </summary>
            <param name="directory"></param>
            <param name="machineName"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CreateDirectoryIfNotExist(System.String,System.String)">
            <summary>
            Creates the given directory if it doesn't exist on the given machine
            If the machineName is null, the local machine is assumed to be the default
            </summary>
            <param name="directory"></param>
            <param name="machineName"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.GetRemotePath(System.String,System.String)">
            <summary>
            Constructs and returns the remote path for the given path in the machine
            For e.g., for path = C:\temp; machineName = VM1, \\VM1\C$\temp will be returned
            if machineName is null, the given path will be returned as it is
            if machineName is IPV6 address, translate it into the format of \\(ipv6address).ipv6-literal.net\share.
            </summary>
            <param name="path"></param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Helpers.GetRemotePathIfNotLocalMachine(System.String,System.String)">
            <summary>
            Wrapper of GetRemotePath which checks if the machineName corresponds to the current machine.
            If it does, returns the local path, otherwise returns GetRemotePath(path, machineName).
            </summary>
            <param name="path">Local path</param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the directory specified by sourcePath to the destPath
            For e.g. for sourcePath = C:\temp\package; targetpath = D:\temp,
            this will create D:\temp\package and copy contents of C:\temp\package to D:\temp\package
            </summary>
            <param name="sourcePath"></param>
            <param name="destPath"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CreateQualifiedNameForAssembly(System.String,System.String)">
            Assembly.CreateQualifiedName is not coreCLRCompliant. Implementation of the method from .NET
            This method creates the name of a type qualified by the display name of its assembly.
        </member>
        <member name="M:System.Fabric.Common.Helpers.IsLocalIpAddressAsync(System.String)">
            <summary>
            Determines whether the machine with hostName is one of the recognized local addresses. This is only queried once per machine name and cached.
            </summary>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.Failfast(System.String,System.Object[])">
            <summary>
            Failfast the process
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.Fail(System.String,System.Object[])">
            <summary>
            Terminate the process after logging debug information.
            </summary>
            <param name="format">The format string for logging.</param>
            <param name="args">The arguments for logging.  If the argument
            object supports IDumpable, this interface will be used to dump
            the object.  Otherwise ToString will be used.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="args">The arguments for logging.  If the argument
            object supports IDumpable, this interface will be used to dump
            the object.  Otherwise ToString will be used.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean,System.String)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``1(System.Boolean,System.String,``0)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``2(System.Boolean,System.String,``0,``1)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``3(System.Boolean,System.String,``0,``1,``2)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``4(System.Boolean,System.String,``0,``1,``2,``3)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``5(System.Boolean,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
            <param name="t5">The argument for logging.</param>   
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``6(System.Boolean,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
            <param name="t5">The argument for logging.</param>   
            <param name="t6">The argument for logging.</param>  
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``7(System.Boolean,System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
            <param name="t5">The argument for logging.</param>  
            <param name="t6">The argument for logging.</param>  
            <param name="t7">The argument for logging.</param>  
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``8(System.Boolean,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
            <param name="t5">The argument for logging.</param>  
            <param name="t6">The argument for logging.</param>  
            <param name="t7">The argument for logging.</param>  
            <param name="t8">The argument for logging.</param>  
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull"/>.</remarks>
            <example>connection.ThrowIfArgumentNull("connection");</example>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace"/>.</remarks>
            <example>connectionString.ThrowIfArgumentNullOrWhiteSpace("connection");</example>        
        </member>
        <member name="M:System.Fabric.Common.Requires.CheckUInt32ArgumentLimits(System.Int64,System.String)">
            <summary>
            Checks if long argument is within limits of UInt32 type and throws if it's not.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
        </member>
        <member name="M:System.Fabric.Common.Requires.CheckPercentageArgument(System.Byte,System.String)">
            <summary>
            Checks that the value specified is a valid percentage, between 0 and 100.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. Should not be null or empty.</param>
        </member>
        <member name="M:System.Fabric.Common.Requires.Throw(System.Exception)">
            <summary>
            Call this method to throw an exception.
            </summary>
            <param name="exception">The exception to be thrown.</param>
            <remarks>
            Calling this method will log the exception and do other common processing, 
            and then it will throw the exception.
            </remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.            
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="T:System.Fabric.Common.TemplateHelper">
            <summary>
            TemplateHelper - substitute templated content
            </summary>
        </member>
        <member name="M:System.Fabric.Common.TemplateHelper.ApplyTemplate(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Replaces all occurences of [[VARIABLE]] in templatedData with their associated values in the collection.
            Example: If templated data is "this is a [[VARIABLE_1]] [[VARIABLE_2]] message" and the collection contains
            {"[[VARIABLE_1]]" -> hello} and {"VARIABLE_2" -> world} this function will return
            "this is a hello world message"
            </summary>
            <param name="templatedData"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.PropertyName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.IsIgnored">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.JsonConverterTypeName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.ReCreateMember">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.AppearanceOrder">
            Defines order of the this property in json string relative to other properties of the defining class.
        </member>
        <member name="T:System.Fabric.Common.ServiceQueryClient.SynchronizedModifyOnce`1">
            Synchronization wrapper around struct type 'T'. 
            Read/Write access are serialized.
            Stored value can be "set" (changed) only once.
        </member>
        <member name="T:System.Fabric.Common.Tracing.EventChannel">
            <summary>
            Channel type for ETW tracing.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.EventChannel.Admin">
            <summary>
            Admin channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.EventChannel.Operational">
            <summary>
            Operational channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.EventChannel.Analytic">
            <summary>
            Analytic channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.EventChannel.Debug">
            <summary>
            Debug channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.EventChannel.Audit">
            <summary>
            Audit channel.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.EventDataArrayBuilder.TruncateStringVariants(System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@,System.Fabric.Common.Tracing.Variant@)">
            <summary>
            Method calculates average characters available for string variants
            and then truncates each string variant that is greater than average at the average.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.GenericEventDescriptor">
            <summary>
                Contains the metadata that defines an event.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.FabricEventSource">
            <summary>
            EventSource class that abstracts most of EventSource and VariantEventWriter logic of
            System.Fabric and Microsoft.ServiceFabric.Internal.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ChannelToUse(System.Diagnostics.Tracing.EventAttribute,System.Fabric.Common.Tracing.EventExtendedMetadataAttribute)">
             <summary>
            
             </summary>
             <param name="eventAttribute"></param>
             <param name="extended"></param>
             <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.#ctor(System.Diagnostics.Tracing.EventTask)">
            <summary>
            Constructor for ExtensionsEventsInternal
            </summary>
            <param name="code">TaskCode to be used for the events.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteError(System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteErrorWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsError(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsError(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsErrorWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteWarning(System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteWarningWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsWarning(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsWarning(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsWarningWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsInfo(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsInfo(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteExceptionAsInfoWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteInfo(System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteInfo(System.String)">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteInfoWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteNoise(System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteNoise(System.String)">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEventSource.ExtensionsEventsInternal.WriteNoiseWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.FabricEvents">
            <summary>
            Maintains structured trace events.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEvents.PrimaryMoveAnalysisEvent(System.Guid,System.Guid,System.DateTime,System.Double,System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            When a primary replica moves, PrimaryMoveAnalysisAgent@ClusterAnalysis analyzes the traces to find out the reason
            for the primary move and emits this event.
            </summary>
            <param name="eventInstanceId"></param>
            <param name="partitionId"></param>
            <param name="whenMoveCompleted"></param>
            <param name="analysisDelayInSeconds"></param>
            <param name="analysisDurationInSeconds"></param>
            <param name="previousNode"></param>
            <param name="currentNode"></param>
            <param name="reason"></param>
            <param name="correlatedTraceRecords"></param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEvents.ExtensionsEvents.#ctor(System.Diagnostics.Tracing.EventTask)">
            <summary>
            Constructor for ExtensionsEvents
            </summary>
            <param name="code">TaskCode to be used for the events.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.FabricEvents.ExtensionsEvents.GetEventSource(System.Diagnostics.Tracing.EventTask)">
            <summary>
            Gets object instance which can be used for writing events via EventSource
            </summary>
            <param name="code">TaskCode to be used for the events.</param>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ManagedGeneral">
            <summary>
            General task for managed code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ManagementCommon">
            <summary>
            The trace code for management common library.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ImageStoreClient">
            <summary>
            The trace code for the Image Store code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.FabricHost">
            <summary>
            The trace code for the Fabric Host code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.FabricDeployer">
            <summary>
            The trace code for the Cluster Setup code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.SystemFabricDeployer">
            <summary>
            System Traces for Fabric Deployer
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.Test">
            <summary>
            Used by tests which write to Fabric trace session
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.AzureLogCollector">
            <summary>
            The trace code for the Azure Log Collector code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.SystemFabric">
            <summary>
            The trace code for System.Fabric
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ImageBuilder">
            <summary>
            The trace code for ImageBuilder
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.FabricDCA">
            <summary>
            The trace code for DCA
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.FabricHttpGateway">
            <summary>
            The trace code for FabricHttpGateway
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.InfrastructureService">
            <summary>
            The trace code for InfrastructureService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ManagedTokenValidationService">
            <summary>
            The trace code for ManagedTokenValidationService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.DSTSClient">
            <summary>
            The trace code for DSTS Client
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.TStore">
            <summary>
            Differential store
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.DistributedDictionary">
            <summary>
            Distributed Dictionary
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.DistributedQueue">
            <summary>
            Distributed Queue
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.Wave">
            <summary>
            Stream based waves
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ReliableStream">
            <summary>
            Reliable Streams
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.DistributedVersionedDictionary">
            <summary>
            Distributed Versioned Dictionary
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.Testability">
            <summary>
            Testability
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.RandomActionGenerator">
            <summary>
            RandomActionGenerator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.TReplicator">
            <summary>
            Transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.TStatefulServiceReplica">
            <summary>
            Stateful service replica that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.TStateManager">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ActorFramework">
            <summary>
            Actor framework
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.WRP">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ServiceFramework">
            <summary>
            Service Framework (fabsrv).  Shares EventId space with ApiMonitor. Ends at 65151.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.FaultAnalysisService">
            <summary>
            Fabric Analysis Service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ApiMonitor">
            <summary>
            API Monitor. Shares EventId space with ServiceFramework. Starts at 65152.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ReliableConcurrentQueue">
            <summary>
            ReliableConcurrentQueue
            </summary>
            <remarks>
            Task range is shared with FabricMdsAgentService and starts at 63616
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.UpgradeOrchestrationService">
            <summary>
            UpgradeOrchestrationService
            </summary>
            <remarks>
            Task range starts at 65284
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.BackupRestoreService">
            <summary>
            BackupRestoreService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.BackupCopier">
            <summary>
            BackupCopier
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ManagedHosting">
            <summary>
            Used by FabricCAS (Fabric Container Activator Service)
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.GatewayResourceManager">
            <summary>
            Used by GatewayResourceManager
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.ManagedIdentityTokenService">
            <summary>
            Used by ManagedIdentityTokenService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.FabricEvents.Tasks.Max">
            <summary>
            All valid task id must be below this number. Increase when adding tasks.
            Max value is 2**16.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.EventExtendedMetadataAttribute">
            <summary>
            Note: existing events can not have this added with a newer version if EventSource versioning needs to be maintained for consumers
            as it'll break the back compatibility, which works only if fields are appended at the end and kept at the same positions in future.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.EventExtendedMetadataAttribute.#ctor(System.Fabric.Common.Tracing.TableEntityKind,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="publicEventName"></param>
            <param name="category"></param>
        </member>
        <member name="P:System.Fabric.Common.Tracing.EventExtendedMetadataAttribute.TableEntityKind">
            <summary>
            Entity kind (Cluster, Applications, etc.) corresponding to an Azure table for Operational events
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.EventExtendedMetadataAttribute.PublicEventName">
            <summary>
            Defines a public name of event, to be appended at top of instance payload's fields as 'eventName'.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.EventExtendedMetadataAttribute.Category">
            <summary>
            Defines the category that event corresponds to, to be appended at top of instance payload's fields as 'category'.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.EventConstants">
            <summary>
            Includes the common metadata constants for operational events.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TableEntityKind">
            <summary>
            Azure table for operational channel traces.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TableEntityKind.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TableEntityKind.Cluster">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TableEntityKind.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TableEntityKind.Applications">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TableEntityKind.Partitions">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TableEntityKind.Replicas">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TableEntityKind.Correlation">
            <summary>
            Correlation Kind
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEvent.TestKeywords">
            <summary>
            // Test ETW keywords. Values must be powers of 2, starting with 0x1.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEvent.UpdateProvisionalFeatureStatus(System.Fabric.Common.Tracing.TraceSinkType,System.Boolean)">
            <summary>
            Update the Status of the Provisional Feature
            </summary>
            <param name="sinkType">Type of the sink</param>
            <param name="isEnabled">If the feature is enabled or not</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.ICache`2.TryAddOrUpdate(`0,`1,System.TimeSpan,System.Action{`1})">
            <summary>
            Add or Update a key value pair.
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
            <param name="itemLife">Life span for this pair</param>
            <param name="onExpireCallback">Specify the callback to be invoked when this entry is removed from cache due to expiry</param>
            <returns>Count of elements in the cache after this update</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.ICache`2.RemoveIfPresent(`0)">
            <summary>
            Remove a Key if present
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:System.Fabric.Common.Tracing.ICache`2.Count">
            <summary>
            Get the count of Items in the DefaultInstance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.ICache`2.Clear">
            <summary>
            Clear out the Cache.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.MaxCacheCount">
            <summary>
            This is the max count of items that could be there in the cache at any point in time.
            It's a simple protection against the unlikely bug that would cause the cache size
            to continue to grow. This way, if we ever reach this size, we stop accepting any adds.
            We came up with this number after extensive testing in LRCs where 450 was found to be at 99.8th
            percentile.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.DefaultCleanupDurationInSec">
            <summary>
            The cleanup routine runs every this interval to remove any expired entries.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.MaxNoActivityLifeSpanForTimerInSec">
            <summary>
            This is minor optimization in cases where store is empty and there hasn't been
            any add/update from the user for this duration, we go ahead clean up the timer.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.singleInstance">
            <summary>
            Single Instance of the Cache.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.lastTimeOfAddOrUpdateToCache">
            <summary>
            Last time there was an Add or update to the cache from user.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.AgeBasedCache`2.CacheValue`1.OnExpireCallback">
            <summary>
            The callback that's invoked when this entry expires
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.AgeBasedCache`2.CacheValue`1.AbsoluteExpiryTime">
            <summary>
            The expiry time.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.AgeBasedCache`2.CacheValue`1.Value">
            <summary>
            Actual value
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.AgeBasedCache`2.CacheValue`1.Update(`2,System.DateTimeOffset)">
            <summary>
            Update the value and its expiry time
            </summary>
            <param name="value"></param>
            <param name="expiryTime"></param>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.store">
            <summary>
            This is where we cache the values. Based on results from testing, it was decided to keep it simple
            and not maintain a separate link list of values.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.clearCacheTimer">
            <summary>
            The timer that runs periodically and clears up expired values.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.AgeBasedCache`2.onTimerInactivated">
            <summary>
            Callback when timer is inactivated. *Only used for Unit Testing*
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.AgeBasedCache`2.CreateInstanceForTestingOnly(System.TimeSpan,System.TimeSpan,System.Action)">
            <summary>
            Only meant for Testing so that unit test can have better control over how cache is created and how it behaves.
            </summary>
            <param name="durationBetweenCacheCleans"></param>
            <param name="maxTimerInactivity"></param>
            <param name="timerInactivated"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.AgeBasedCache`2.TryAddOrUpdate(`0,`1,System.TimeSpan,System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:System.Fabric.Common.Tracing.AgeBasedCache`2.RemoveIfPresent(`0)">
            <inheritdoc />
        </member>
        <member name="P:System.Fabric.Common.Tracing.AgeBasedCache`2.Count">
            <inheritdoc />
        </member>
        <member name="M:System.Fabric.Common.Tracing.AgeBasedCache`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:System.Fabric.Common.Tracing.AgeBasedCache`2.Finalize">
            <summary>
            <para>
            Destructor of this cache.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.Position">
            <summary>
            Enums to keep track of Positions.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.ProvisionalMetadataAttribute.PositionOfIdElements">
            <summary>
            Gets or Sets the position of elements from the argument list that together form a unique ID.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.ProvisionalMetadataAttribute.ProvisionalTimeInMs">
            <summary>
            Gets or Sets the provisional time in MS. The Trace is flushed if there is no update to the ID within this duration.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Tracing.ProvisionalMetadataAttribute.PositionToExcludeFromTrace">
            <summary>
            Gets or Sets the position of elements from the argument list that are not part of the final trace.
            </summary>
            <remarks>
            This comes in handy where you may want to pass an additional parameter to be used as ID but doesn't want it traced.
            In future we should really remove this. The real fix here is to have better story for ID which today is a string but 
            doesn't have to be that way.
            </remarks>
        </member>
        <member name="P:System.Fabric.Common.Tracing.ProvisionalMetadataAttribute.FlushAndClose">
            <summary>
            Gets or sets the value which dictate that it is the end of the chain and this trace should be flushed
            immediately. Any earlier traces which are still in cache and part of this chain are discarded.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceTextFileSink">
            <summary>
            Sink that writes trace records to text file.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetPath(System.String,System.String)">
            <summary>
            Set the path of the text file sink for this traceType.
            Multiple concurrent sinks are possible; one per traceType. To disable all sinks, call SetPath(null).
            </summary>
            <param name="traceType"></param>
            <param name="path"></param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetPath(System.String)">
            <summary>
            Set the path of the text file sink.
            Before the path is set, the sink is effectively disabled.
            This is the classic single sink mode API. For multiple sinks use SetPath(traceType, path).
            </summary>
            <param name="path">Path for the text file where the records are written to.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetOption(System.String)">
            <summary>
            Set option for text file sink.
            </summary>
            <param name="option">If 'h' is contained, trace file is truncated
            every hour.
            If 'p' is contained, process id is appended to the file name.
            </param>
        </member>
        <member name="P:System.Fabric.Common.Tracing.TraceSinkFilter.ProvisionalFeatureStatus">
            <summary>
            Gets or sets if Provisional writes are enabled for this sink type.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceConfig.SetDefaultLevel(System.Fabric.Common.Tracing.TraceSinkType,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Set default level for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="level">Default level for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceConfig.SetDefaultSamplingRatio(System.Fabric.Common.Tracing.TraceSinkType,System.Double)">
            <summary>
            Set default sampling ratio for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="samplingRatio">Default sampling ratio for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceConfig.AddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceConfig.RemoveFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Removes all filters based on source.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="source">The source to be removed.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is removed correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceConfig.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceConfig.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String,System.String,System.Diagnostics.Tracing.EventLevel,System.Int32)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sink">Type of the sink.</param>
            <param name="taskName">Task name.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Level for the filter.</param>
            <param name="samplingRatio">Sampling ratio for records below the level.</param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceSinkType">
            <summary>
            Trace sink types.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.ETW">
            <summary>
            ETW sink.  This is the only sink that should be used for production environment.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.TextFile">
            <summary>
            Text file sink.  Used mainly in dev environment for convenience.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Console">
            <summary>
            Console sink.  Must be highly filtered.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Max">
            <summary>
            The number of sink types.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Variant.Equals(System.Fabric.Common.Tracing.Variant)">
            <inheritdoc />
        </member>
        <member name="M:System.Fabric.Common.Tracing.Variant.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Fabric.Common.Tracing.VariantId.AddIdElement(System.Fabric.Common.Tracing.Variant)">
            <summary>
            Add element
            </summary>
            <param name="oneVariant"></param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.VariantId.Equals(System.Fabric.Common.Tracing.VariantId)">
            <inheritdoc />
            <remark>
            The ordering of the individual variant is important and this
            equals function takes that into account.
            </remark>
        </member>
        <member name="M:System.Fabric.Common.Tracing.VariantId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Fabric.Common.Tracing.VariantId.ToString">
            <inheritdoc />
        </member>
        <member name="T:System.Fabric.Common.Monitoring.FabricMonitoringData">
            <summary>
            Encapsulates monitoring data for each api call
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringData.Partitionid">
            <summary>
            Partition Id
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringData.ApiName">
            <summary>
            ApiName being monitored
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringData.StartTime">
            <summary>
            Start time, set when FabricApiCallDescription is created
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringData.ReplicaInstanceId">
            <summary>
            Replica instance Id for Stateless services
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringData.ReplicaId">
            <summary>
            Replica id 
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringData.ApiProperty">
            <summary>
            Api Property being monitored
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringData.Context">
            <summary>
            ServiceContext. Optionally used to generate information in FabricMonitoringData constructor. 
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Monitoring.FabricMonitoringParameters">
            <summary>
            Encapsulates monitoring parameters for a single API call
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringParameters.IsHealthReportEnabled">
            <summary>
            Determines health reporting when apiSlowDuration is exceeded
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringParameters.IsApiSlowTraceEnabled">
            <summary>
            Determines API slow tracing when apiSlowDuration is exceeded
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringParameters.IsApiLifeCycleTraceEnabled">
            <summary>
            Determines API lifecycle tracing, at begin and end of the API's invocation.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricMonitoringParameters.ApiSlowDuration">
            <summary>
            Time after which health reports or API slow traces occur
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Monitoring.FabricApiCallDescription">
            <summary>
            Used to monitor Api Calls by managed fabric components
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiCallDescription.#ctor(System.Fabric.Common.Monitoring.FabricMonitoringData,System.Fabric.Common.Monitoring.FabricMonitoringParameters,System.Fabric.IStatefulServicePartition)">
            <summary>
            Initialize a FabricApiCallDescription object 
            </summary>
            <param name="data"></param>
            <param name="parameters"></param>
            <param name="statefulServicePartition"></param>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.FabricApiCallDescription.Partition">
            <summary>
            Partition 
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiCallDescription.IsFirstExpiry">
            <summary>
            Determines if a given API call has already expired to avoid duplicate traces and health reports
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiCallDescription.GetHealthInformation_Slow">
            <summary>
            Returns slow health information object. 
            TTL is TimeSpan.MaxValue by default
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiCallDescription.GetHealthInformation_OK">
            <summary>
            Returns clear health information object. 
            TTL of 1 second to clear the slow health report
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent">
            <summary>
            FabricApiMonitoringComponent is used to monitor Api calls in the managed layer.
            This component handles tracing and optional health reporting for any desired API call
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.store">
            <summary>
            This store maintains API calls currently monitored for managed fabric components
            Key - FabricApiCallDescription
            Value - byte
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.scanInterval">
            <summary>
            Interval at which OnTimer event is raised
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.timer">
            <summary>
            Timer used to periodically raise api monitoring event
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.StartMonitoring(System.Fabric.Common.Monitoring.FabricApiCallDescription)">
            <summary>
            Begin monitoring an API call. If monitoring has not started, timer is set and enabled in StartTimerIfNeeded. 
            Verify that the FabricMonitoringParameters object has a value greater than zero before calling start monitoring.
            Refer to the ValidateSettings method in the ReplicatorApiMonitor for implementation examples. 
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.StopMonitoring(System.Fabric.Common.Monitoring.FabricApiCallDescription)">
            <summary>
            End monitoring for an API call. 
            Invokes the ClearSlowHealthReportCallback provided to remove warning HealthReports in the HM.
            If there are no remaining FabricApiCallDescriptions being monitored the timer is closed and wil be reopened by the next StartMonitoring method call.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.Test_GetCount">
            <summary>
            Return the current number of items in the store.
            This method should exclusively be used for testing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.OnTimer(System.Object)">
            <summary>
            Determine which items have expired, then perform enabled operations for each FabricApiCallDescription (ApiSlow tracing or health reporting)
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.StartTimerIfNeeded">
            <summary>
            Open timer. If timer is already enabled, return.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.StopTimerIfNeeded">
            <summary>
            Stops timer if no elements remain in store, otherwise returns. 
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.ReportSlowHealthIfEnabled(System.Collections.Generic.IEnumerable{System.Fabric.Common.Monitoring.ExpiredApiCall})">
            <summary>
            Generate slow health callback list
            </summary>
            <param name="expiredItems"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.FindExpiredItems">
            <summary>
            Find expired items
            </summary>
            <returns>
            List of ExpiredApiCall objects containing a boolean  and the apicall description
            </returns>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.AddApiCallToStore(System.Fabric.Common.Monitoring.FabricApiCallDescription)">
            <summary>
            Add API call to store.
            Throw if the FabricApiCallDescription has already been added.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.TraceSlowIfEnabled(System.Collections.Generic.IEnumerable{System.Fabric.Common.Monitoring.ExpiredApiCall})">
            <summary>
            Invoke slowTraceCallback if isApiSlowTraceEnabled is true in FabricMonitoringParameters
            </summary>
            <param name="callbackItems"></param>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.TraceFabricApiStartMonitoringIfEnabled(System.Fabric.Common.Monitoring.FabricApiCallDescription)">
            <summary>
            Invoke startTraceCallback if isApiLifeCycleTraceEnabled is true in FabricMonitoringParameters
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.FabricApiMonitoringComponent.TraceFabricApiStopMonitoringIfEnabled(System.Fabric.Common.Monitoring.FabricApiCallDescription)">
            <summary>
            Invoke ClearSlowHealthReportCallback if isHealthReportEnabled in FabricMonitoringParameters.
            Invoke stopTraceCallback if isApiLifeCycleTraceEnabled is true in FabricMonitoringParameters
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Monitoring.ExpiredApiCall">
            <summary>
            ExpiredApiCall is used to return the items that need to be traced and reported on in the onTimerMethod of FabricApiMonitoringComponent.
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.ExpiredApiCall.ShouldReportHealth">
            <summary>
            Indicates whether this expired api call should fire a health report
            </summary>
        </member>
        <member name="P:System.Fabric.Common.Monitoring.ExpiredApiCall.ApiDescription">
            <summary>
            The api call description that has expired
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Monitoring.MonitoringComponentParameters">
            <summary>
            Encapsulates parameters for an instance of the FabricApiMonitoringComponent, including default health callbacks
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.MonitoringComponentParameters.DefaultSlowHealthCallback(System.Fabric.Common.Monitoring.FabricApiCallDescription)">
            <summary>
            Default slow health callback, invokes ReportReplicaHealth on the partition object from apiCall 
            using HealthInformation object from FabricApiCallDescription.GetHealthInformation_Slow.
            </summary>
            <param name="apiCall"></param>
        </member>
        <member name="M:System.Fabric.Common.Monitoring.MonitoringComponentParameters.DefaultClearSlowHealthReportCallback(System.Fabric.Common.Monitoring.FabricApiCallDescription)">
            <summary>
            Default clear slow health callback, invokes ReportReplicaHealth on the partition object from apiCall 
            using HealthInformation object FabricApiCallDescription.GetHealthInformation_OK.
            </summary>
            <param name="apiCall"></param>
        </member>
        <member name="M:System.Fabric.Common.SynchronizedBufferPool`1.Take">
            <summary>
            Take a pooled item.
            </summary>
            <returns>
            Returns null if the limit is passed.
            </returns>
        </member>
        <member name="T:System.Fabric.Common.MovePrimaryDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the MovePrimary API is being used 
            </summary>
            <remarks>
            The values indicate whether MovePrimary .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.MovePrimaryDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.MovePrimaryDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.MoveSecondaryDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the MoveSecondary API is being used 
            </summary>
            <remarks>
            The values indicate whether MoveSecondary .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.MoveSecondaryDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.MoveSecondaryDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.MoveInstanceDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the MoveInstance API is being used 
            </summary>
            <remarks>
            The values indicate whether MoveInstance .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.MoveInstanceDescriptionKind.UsingNodeName">
            <summary>
            Select instance using node name
            </summary>
        </member>
        <member name="F:System.Fabric.Common.MoveInstanceDescriptionKind.UsingReplicaSelector">
            <summary>
            Select instance using replica selector
            </summary>
        </member>
        <member name="M:System.Fabric.Common.FabricCluster.GetWriteQuorumSize(System.Int64)">
            <summary>
            Computes the minimum majority based write quorum size
            </summary>
            <param name="replicaSetSize">The size of the replica set whose write quorum size is to be calculated</param>
            <returns>The size of the write quorum</returns>
            <remarks>'replicaSetSize' can be an even or odd positive integer. If it is even, it has the form 2*m and the write quorum size is m+1 -- the minimum majority;
            if the replicaSetSize is odd, it has the form 2*m+1 and the write quorum size is again m+1 -- the minimum majority.</remarks>
        </member>
        <member name="M:System.Fabric.Common.UnreliableTransportBehavior.AddFilterForPartitionId(System.Guid)">
            <summary>
            Adds Partition Id to Filters.
            </summary>
            <param name="replicaId">Partition ID to add filter for.</param>
        </member>
        <member name="T:System.Fabric.Common.FabricClientRetryErrors">
            <summary>
            Note: Please keep updated AllFabricRetyableErrors if you add/update error rules in this class.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.FabricClientRetryErrors.All">
            <summary>
            Gets all fabric client retryable errors.
            
            TODO: RDBug 11875738: FabricClientRetryErrors.All: Fill the info using reflection over the all defined retryable error rules per operation.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.RestartNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.RestartNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.RestartNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.StartNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.StartNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.StartNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.StopNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.StopNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.StopNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.ParallelExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Regular Parallel.ForEach does not work with async delegates. Control flow returns before all async calls complete.
            Implementation from https://blogs.msdn.microsoft.com/pfxteam/2012/03/05/implementing-a-simple-foreachasync-part-2/
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dop">Degree of parallelism</param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.CheckExistsPropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation" /> that compares the Boolean 
            existence of a property with the <see cref="P:System.Fabric.CheckExistsPropertyOperation.ExistenceCheck" /> argument. </para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.PropertyBatchOperation" /> operation fails if the 
            property is not equal to the <see cref="P:System.Fabric.CheckExistsPropertyOperation.ExistenceCheck" /> argument.
            The <see cref="T:System.Fabric.CheckExistsPropertyOperation" /> is generally used as a precondition for the write operations in the batch. Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CheckExistsPropertyOperation.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.CheckExistsPropertyOperation" /> object. </para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="existenceCheck">
            <para>Flag that specifies whether the property should exist for the operation to pass.</para>
            </param>
            <remarks>
            <para>If any <see cref="T:System.Fabric.PropertyBatchOperation" /> in the batch fails,
            the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.CheckExistsPropertyOperation.ExistenceCheck">
            <summary>
            <para>Gets the flag that specifies whether the property should exist for the operation to pass.</para>
            </summary>
            <value>
            <para>Flag that specifies whether the property should exist for the operation to pass.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CheckSequencePropertyOperation">
            <summary>
            <para>Compares the <see cref="P:System.Fabric.NamedPropertyMetadata.SequenceNumber" /> of a property
            with the <see cref="P:System.Fabric.CheckSequencePropertyOperation.SequenceNumber" /> argument. </para>
            </summary>
            <remarks>
            <para>The comparison fails if the sequence numbers are not equal. 
            <see cref="T:System.Fabric.CheckSequencePropertyOperation" /> is generally used as a precondition for the write operations in the batch. 
            Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CheckSequencePropertyOperation.#ctor(System.String,System.Int64)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.CheckSequencePropertyOperation" /> class.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String" /> that defines the name of the property.</para>
            </param>
            <param name="sequenceNumber">
            <para>A <see cref="T:System.Int64" /> that defines the expected sequence number of the property for the operation to pass.</para>
            </param>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.CheckSequencePropertyOperation.SequenceNumber">
            <summary>
            <para>Gets the expected sequence number.</para>
            </summary>
            <value>
            <para>The expected sequence number.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CheckValuePropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation" /> that compares the value of the property
            with the expected value.  </para>
            </summary>
            <remarks>
            <para>The comparison fails if the value of the property and the expected value are not equal. 
            The <see cref="T:System.Fabric.CheckValuePropertyOperation" /> is generally used as a precondition for the write operations in the batch. 
            Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation" /> class with specified <paramref name="propertyName" /> and <see cref="T:System.Byte" />[] value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Int64)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation" /> class 
            with specified <paramref name="propertyName" /> and <see cref="T:System.Int64" /> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Guid)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation" /> class
            with specified <paramref name="propertyName" /> and <see cref="T:System.Guid" /> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation" /> class
            with specified <paramref name="propertyName" /> and <see cref="T:System.String" /> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Double)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation" /> class
            with specified <paramref name="propertyName" /> and <see cref="T:System.Double" /> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="P:System.Fabric.CheckValuePropertyOperation.PropertyValue">
            <summary>
            <para>Gets the value of the property.</para>
            </summary>
            <value>
            <para>The value of the property.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CheckValuePropertyOperation.PropertyType">
            <summary>
            <para>Gets the type of the property.</para>
            </summary>
            <value>
            <para>The type of the property.</para>
            </value>
        </member>
        <member name="T:System.Fabric.FabricClientRole">
            <summary>
            <para>
            Represents the fabric client security role.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.Unknown">
            <summary>
            Indicates unknown permissions.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.User">
            <summary>
            <para>
            Indicates user permissions.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.Admin">
            <summary>
            <para>
            Indicates administrator permissions.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.FabricConstants">
            <summary>
            <para>
            These are constants used by ServiceFabric for various OS Related resources.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricRegistryKeyPath">
            <summary>
            The registry key path used by Fabric. This is going to be deprecated soon, and no new dependency should be taken on this constant.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricFileRegistryPathRegKeyName">
            <summary>
            The registry key name of FabricFileRegistryPath
            </summary>
        </member>
        <member name="T:System.Fabric.PartitionDataLossProgress">
            <summary>
            Returns Invoke data loss progress object.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState, Result (when in Completed or Faulted state), 
            and Exception (when in Faulted state) information for the invoke data loss action.
            </remarks>
        </member>
        <member name="P:System.Fabric.PartitionDataLossProgress.Result">
            <summary>
            Gets the result of the invoke data loss action;
            this is avaliable only when the action is in Completed or Faulted state.
            </summary>
            <value>The PartitionDataLossResult object.</value>
        </member>
        <member name="M:System.Fabric.PartitionDataLossProgress.ToString">
            <summary>
            Returns a string representation of the contained information
            </summary>
            <returns>A string that has State, InvokeDataLossResult, and Exception information.
            State is always presnt; but depending on State, the Result and the Exception may not be present.</returns>
        </member>
        <member name="T:System.Fabric.PartitionQuorumLossProgress">
            <summary>
            Returns Invoke quorum loss progress object.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState, Result (when in Completed or Faulted state), 
            and Exception (when in Faulted state) information for the invoke quorum loss action.
            </remarks>
        </member>
        <member name="P:System.Fabric.PartitionQuorumLossProgress.Result">
            <summary>
            Gets the result of the invoke quorum loss action;
            this is avaliable only when the action is in Completed or Faulted state.
            </summary>
            <value>The PartitionQuorumLossResult object.</value>
        </member>
        <member name="M:System.Fabric.PartitionQuorumLossProgress.ToString">
            <summary>
            Returns a string representation of the contained information
            </summary>
            <returns>A string that has State, InvokeQuorumLossResult, and Exception information.
            State is always presnt; but depending on State, the Result and the Exception may not be present.</returns>
        </member>
        <member name="T:System.Fabric.TestCommandProgress">
            <summary>
            Base class for the progress objects.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState
            </remarks>
        </member>
        <member name="M:System.Fabric.TestCommandProgress.#ctor">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
        </member>
        <member name="P:System.Fabric.TestCommandProgress.State">
            <summary>
            Gets the State at which the action is now: 
            Running, Completed, Faulted, or Invalid
            </summary>
            <returns>The state of the test command.</returns>
        </member>
        <member name="M:System.Fabric.TestCommandProgress.ToString">
            <summary>
            Returns the string representation of the State
            </summary>
            <returns>String representation of the State</returns>
        </member>
        <member name="T:System.Fabric.PartitionRestartProgress">
            <summary>
            Returns Invoke quorum loss progress object.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState, Result (when in Completed or Faulted state), 
            and Exception (when in Faulted state) information for the invoke quorum loss action.
            </remarks>
        </member>
        <member name="P:System.Fabric.PartitionRestartProgress.Result">
            <summary>
            Gets the result of the restart partition action;
            this is avaliable only when the action is in Completed or Faulted state.
            </summary>
            <value>The PartitionRestartResult object.</value>
        </member>
        <member name="M:System.Fabric.PartitionRestartProgress.ToString">
            <summary>
            Returns a string representation of the contained information
            </summary>
            <returns>A string that has State, InvokeDataLossResult, and Exception information.
            State is always presnt; but depending on State, the Result and the Exception may not be present.</returns>
        </member>
        <member name="T:System.Fabric.NodeTransitionProgress">
            <summary>
            Returns NodeTransitionProgress object.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState, Result (when in Completed or Faulted state), 
            and Exception (when in Faulted state) information for the node transition command.
            </remarks>
        </member>
        <member name="P:System.Fabric.NodeTransitionProgress.Result">
            <summary>
            Gets the result of the node transition command.
            This is avaliable only when the action is in Completed or Faulted state.
            </summary>
            <value>The NodeCommandResult object.</value>
        </member>
        <member name="M:System.Fabric.NodeTransitionProgress.ToString">
            <summary>
            Returns a string representation of the contained information
            </summary>
            <returns>A string that has State, InvokeDataLossResult, and Exception information.
            State is always presnt; but depending on State, the Result and the Exception may not be present.</returns>
        </member>
        <member name="T:System.Fabric.ProgressUnitType">
            <summary>
            Describes the unit of measurement for each <see cref="M:System.Fabric.IImageStoreProgressHandler.UpdateProgress(System.Int64,System.Int64,System.Fabric.ProgressUnitType)"/> callback.
            </summary>
        </member>
        <member name="F:System.Fabric.ProgressUnitType.Invalid">
            <summary>
            Reserved for internal use. May indicate a mismatch between managed and native DLL versions.
            </summary>
        </member>
        <member name="F:System.Fabric.ProgressUnitType.Bytes">
            <summary>
            The unit of measurement is in bytes.
            </summary>
        </member>
        <member name="F:System.Fabric.ProgressUnitType.ServiceSubPackages">
            <summary>
            The unit of measurement is in number of code, config, and data packages.
            </summary>
        </member>
        <member name="F:System.Fabric.ProgressUnitType.Files">
            <summary>
            The unit of measurement is in number of files.
            </summary>
        </member>
        <member name="T:System.Fabric.RestoreSettings">
            <summary>
            Represents the settings for a key/value store <see cref="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)" /> operation.
            </summary>
        </member>
        <member name="M:System.Fabric.RestoreSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.RestoreSettings"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.RestoreSettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.RestoreSettings"/> class.
            </summary>
            <param name="inlineReopen">
            Indicates if the <see cref="T:System.Fabric.KeyValueStoreReplica"/> should re-open itself
            after it has restored successfully from the supplied backup. If false is
            specified, the replica reports transient fault after successful restore. 
            </param>
        </member>
        <member name="M:System.Fabric.RestoreSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.RestoreSettings"/> class. 
            </summary>
            <param name="inlineReopen">
            Indicates if the <see cref="T:System.Fabric.KeyValueStoreReplica"/> should re-open itself
            after it has restored successfully from the supplied backup. If false is
            specified, the replica reports transient fault after successful restore.  
            </param>
            <param name="enableLsnCheck">
            Indicates if the <see cref="T:System.Fabric.KeyValueStoreReplica"/> should check that  
            restore data is not older than data currently present in the service.
            This protects against accidental data loss. If false is specified, 
            <see cref="T:System.Fabric.KeyValueStoreReplica"/> will overwrite current service data with
            restore data even if data present in service in newer. 
            </param>
        </member>
        <member name="P:System.Fabric.RestoreSettings.InlineReopen">
            <summary>
            Indicates if the <see cref="T:System.Fabric.KeyValueStoreReplica"/> should re-open itself
            after it has restored successfully from the supplied backup. If false is
            specified, the replica reports transient fault after successful restore. 
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value indicating if <see cref="T:System.Fabric.KeyValueStoreReplica"/> will 
            re-open itself after the restore.
            </value>
        </member>
        <member name="P:System.Fabric.RestoreSettings.EnableLsnCheck">
            <summary>
            Indicates if the <see cref="T:System.Fabric.KeyValueStoreReplica"/> should check that  
            restore data is not older than data currently present in the service.
            This protects against accidental data loss. If false is specified, 
            <see cref="T:System.Fabric.KeyValueStoreReplica"/> will overwrite current service data with
            restore data even if data present in service in newer. 
            </summary>
            /// <value>
            A <see cref="T:System.Boolean"/> value indicating if <see cref="T:System.Fabric.KeyValueStoreReplica"/> will 
            check if restore data is not older than data currently present in the service.
            </value>
        </member>
        <member name="T:System.Fabric.TestCommandProgressState">
            <summary>
            This enum indicates the state of a test command.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Invalid">
            <summary>
            The test command state is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Running">
            <summary>
            The test command is in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.RollingBack">
            <summary>
            The test command is rolling back internal system state because it encountered a fatal error or was cancelled by the user.  "RollingBack"
            does not refer to user state.  For example, if CancelTestCommandAsync() is called on a command of type TestCommandType.PartitionDataLoss,
            a state of "RollingBack" does not mean service data is being restored (assuming the command has progressed far enough to cause data loss).  
            It means the system is rolling back/cleaning up internal system state associated with the command.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Completed">
            <summary>
            The test command has completed successfully and is no longer running.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Faulted">
            <summary>
            The test command has failed and is no longer running
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Cancelled">
            <summary>
            The test command was cancelled by the user using CancelTestCommandAsync()
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.ForceCancelled">
            <summary>
            The test command was cancelled by the user using CancelTestCommandAsync(), with the force parameter set to true
            </summary>
        </member>
        <member name="T:System.Fabric.TestCommandType">
            <summary>
            The test command type of the queried test command.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.PartitionDataLoss">
            <summary>
            Indicates the test command is for a data loss command
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.PartitionQuorumLoss">
            <summary>
            Indicates the test command is for a quorum loss command
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.PartitionRestart">
            <summary>
            Indicates the test command is for a restart partition command
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.NodeTransition">
            <summary>
            Indicates the test command is for a node transition command
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeFailureReason">
            <summary>
            <para>
            Describes possible upgrade failure reasons.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.None">
            <summary>
            <para>
            There is no upgrade failures.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.Interrupted">
            <summary>
            <para>
            The upgrade was interrupted or manually rolled back.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.HealthCheck">
            <summary>
            <para>
            The upgrade failed because of health checks.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.UpgradeDomainTimeout">
            <summary>
            <para>
            The upgrade domain timeout expired.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.OverallUpgradeTimeout">
            <summary>
            <para>
            The overall upgrade timeout expired.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.ProcessingFailure">
            <summary>
            <para>
            The upgrade failed because of a processing error.
            For example: failure to process default service(s). 
            See <see cref="P:System.Fabric.ApplicationUpgradeProgress.UpgradeStatusDetails"/> for details.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeConfiguration">
            <summary>
            <para>
            This class contains APIs for managing the configuration of the node.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.NodeConfiguration.GetNodeConfiguration">
            <summary>
            <para>
            Gets the cluster manifest configured on that node.
            </para>
            </summary>
            <returns>
            <para>Gets the cluster manifest used to configure the node. Returns null if the node has never been configured.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricValidationException">
            <summary>
            Exception thrown by validation APIs in testability
            </summary>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor">
            <summary>
            Default constructor for FabricValidationException
            </summary>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in FabricErrorCode
            </summary>
            <param name="errorCode">FabricErrorCode for the failure</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String)">
            <summary>
            Constructor for FabricValidationException which takes in a message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in a message and FabricErrorCode
            </summary>
            <param name="message">Error message </param>
            <param name="errorCode">Fabric Error code</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for FabricValidationException which takes in a message and innner exception
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in a message and innner exception and fabric error code
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
            <param name="errorCode">Fabric error code</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            FabricValidationException constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            FabricValidationException constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
            <param name="errorCode">errorCode</param>
        </member>
        <member name="T:System.Fabric.ClaimsCredentials">
            <summary>
              <para>Represents the claim based security credential acquired from STS (security token service).</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ClaimsCredentials.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Fabric.ClaimsCredentials" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.LocalClaims">
            <summary>
              <para>Gets the string representation of claims token acquired from STS (security token service).</para>
            </summary>
            <value>
              <para>The string representation of claims token acquired from STS (security token service).</para>
            </value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.ServerCommonNames">
            <summary>
              <para>Gets the expected common names of server certificate.</para>
            </summary>
            <value>
              <para>The expected common names of server certificate.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.ServerThumbprints">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <value>FOR INTERNAL USE ONLY.</value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.IssuerThumbprints">
            <summary>
              <para>Gets the certificate thumbprints of server certificate issuer.</para>
            </summary>
            <value>
              <para>The certificate thumbprints of server certificate issuer.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.ProtectionLevel">
            <summary>
              <para>Gets the protection level of communication with server; the default value is <see cref="F:System.Fabric.ProtectionLevel.EncryptAndSign" />.</para>
            </summary>
            <value>
              <para>The protection level of communication with server.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CodePackageDebugParameters">
            <summary>
            <para>Class for code package debug parameters.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageDebugParameters.DisableReliableCollectionReplicationMode">
             DisableReliableCollectionReplicationMode specifies whether stateful service should run in replication mode or not.
             If value is true, service will run as stateless service with standalone reliable collections. Otherwise, stateful service will replication enabled for reliable collections.
        </member>
        <member name="M:System.Fabric.CodePackageDebugParameters.GetDebugParameters(System.Fabric.CodePackageDebugParameters[])">
            <summary>
              <para>
            Returns JSON string representing CodePackageDebugParameters passed in.
            </para>
            </summary>
            <param name="debugParameters">
              <para>Array of CodePackageDebugParameters that need to be serialized into JSON. </para>
            </param>
            <returns>
              <para>String representation of the debug parameters.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.ContainerDebugParameters">
            <summary>
            <para>Class for container debug parameters.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.Kernel32Types">
            <summary>
            Type definitions for Win32 Kernel32 APIs.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.Kernel32Types.FILE_INFO_BY_HANDLE_CLASS">
            <summary>
            Definition of FILE_INFO_BY_HANDLE_CLASS enumeration.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.Kernel32Types.PRIORITY_HINT">
            <summary>
            Definition of Win32 PRIORITY_HINT enumeration: https://msdn.microsoft.com/en-us/library/windows/desktop/bb870631(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.Kernel32Types.FILE_IO_PRIORITY_HINT_INFO">
            <summary>
            Definition of Win32 FILE_IO_PRIORITY_HINT_INFO struct: https://msdn.microsoft.com/en-us/library/windows/desktop/bb870610(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.Kernel32Types.FileInformation">
            <summary>
            Struct that holds possible FileInformation types.
            The structure that this parameter points to corresponds to the class that is specified by FileInformationClass.
            </summary>
            <devnote>
            This is the place to add other FileInformation structs when we need to support them.
            E.g. FILE_BASIC_INFO, FILE_RENAME_INFO, FILE_DISPOSITION_INFO, etc.
            </devnote>
        </member>
        <member name="T:System.Fabric.Interop.NTTypes">
            <summary>
            Type definitions for Windows Native APIs in NTDLL.dll
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NTTypes.FILE_INFORMATION_CLASS">
            <summary>
            Definition of FILE_INFORMATION_CLASS enumeration: https://msdn.microsoft.com/en-us/library/windows/hardware/ff728840(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NTTypes.IO_PRIORITY_HINT">
            <summary>
            Definition of IO_PRIORITY_HINT enumeration: https://msdn.microsoft.com/en-us/library/windows/hardware/ff550594(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NTTypes.IO_STATUS_BLOCK">
            <summary>
            Definition of IO_STATUS_BLOCK structure: https://msdn.microsoft.com/en-us/library/windows/hardware/ff550671(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NTTypes.IO_STATUS_BLOCK.Status">
            <summary>
            This is the completion status, either STATUS_SUCCESS if the requested operation was completed successfully or an informational, warning, or error STATUS_XXX value. For more information, see Using NTSTATUS values.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NTTypes.IO_STATUS_BLOCK.Information">
            <summary>
            This is set to a request-dependent value. For example, on successful completion of a transfer request, this is set to the number of bytes transferred. If a transfer request is completed with another STATUS_XXX, this member is set to zero. 
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NTTypes.FILE_IO_PRIORITY_HINT_INFORMATION">
            <summary>
            Definition of IO_PRIORITY_HINT structure: https://msdn.microsoft.com/en-us/library/windows/hardware/ff545802(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.InteropHelpers">
            <summary>
            All WF interop helpers used within System.Fabric
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica4">
            <summary>
            IFabricKeyValueStoreReplica4 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica5">
            <summary>
            IFabricKeyValueStoreReplica5 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica6">
            <summary>
            IFabricKeyValueStoreReplica6 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica7">
            <summary>
            IFabricKeyValueStoreReplica7 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica8">
            <summary>
            IFabricKeyValueStoreReplica8 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_INVALID_BACKUP_SETTING">
            <summary>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_MISSING_FULL_BACKUP">
            <summary>
            Incremental backups can only be done after an initial full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_IN_PROGRESS">
            <summary>
            A backup is currently in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_DIRECTORY_NOT_EMPTY">
            <summary>
            The backup directory is not empty.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_DELETE_BACKUP_FILE_FAILED">
            <summary>
            Deletion of backup files/directory failed. Currently this can happen
            in a scenario where backup is used mainly to truncate logs.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS">
            <summary>
            These flags determine which <see cref="T:System.Fabric.Interop.NativeTypes.FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION"/>
            should be used while updating the repair task policy.
            For each member in <see cref="T:System.Fabric.Interop.NativeTypes.FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION"/> that is
            updatable after the repair task is created, there exists a corresponding flag
            below. Only if the flag is set, will the member be updated when making the API
            call <see cref="M:System.Fabric.Interop.NativeClient.IFabricRepairManagementClient2.BeginUpdateRepairTaskHealthPolicy(System.IntPtr,System.UInt32,System.Fabric.Interop.NativeCommon.IFabricAsyncOperationCallback)"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION">
            <summary>
            Backup options for the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_FULL">
            <summary>
            A full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL">
            <summary>
            Incremental backup. i.e. only the changes to the store since the last backup are backed up.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY">
            <summary>
            Truncates the transaction logs of the store without creating a folder containing the backed up files.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS">
            <summary>
            Falgs for updating application.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_NONE">
            <summary>
            No update.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MINNODES">
            <summary>
            Update minimum node count.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MAXNODES">
            <summary>
            Update maximum node count.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_METRICS">
            <summary>
            Update metrics and capacities.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION">
            <summary>
            The description structure passed to IFabricRepairManagermentClient2.BeginUpdateRepairTaskHealthPolicy
            to update the health policy.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION.Flags">
            <summary>
            <see cref="T:System.Fabric.Interop.NativeTypes.FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS"/> to determine
            which members of this structure should be used for updating health policy.
            E.g. if we pass in PerformPreparingHealthCheck = false in
            <see cref="M:System.Fabric.Interop.NativeClient.IFabricRepairManagementClient2.BeginUpdateRepairTaskHealthPolicy(System.IntPtr,System.UInt32,System.Fabric.Interop.NativeCommon.IFabricAsyncOperationCallback)"/>, does it mean
            unset the health check for the repair task or leave it unchanged from
            whatever state it was in during repair task creation?
            By checking this flag for the corresponding bit, we can determine
            whether to set/unset the boolean member.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            StartNode
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            StopNode
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STOP_NODE_DESCRIPTION_INTERNAL">
            <summary>
            StopNode
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            RestartDeployedCodePackage
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME">
             <summary>
             Move Primary
             </summary>
            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME">
             <summary>
             Move Secondary
             </summary>
            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_INSTANCE_DESCRIPTION_USING_NODE_NAME">
             <summary>
             Move Instance
             </summary>
            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO">
            <summary>
            Provides info about the backup created on the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupFolder">
            <summary>
            The folder where the backup was created.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupOption">
            <summary>
            The backup option used.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.Reserved">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="M:System.Fabric.Interop.PinCollection.AddObject(System.String)">
            <summary>
            Use this method instead of AddBlittable() if empty strings should also be converted to null.
            Use AddBlittable() method if empty string should not be converted to null.
            </summary>
            <param name="pin">Object to pin.</param>
            <returns>Pointer to object.</returns>
        </member>
        <member name="T:System.Fabric.Interop.SharedNativeObject`1.ReferenceCount">
            <summary>
            A utility class to count references/usage. In addition to the regular add/release, conditional add is also supported.
            The conditional add fails if the current count is zero.
            </summary>
        </member>
        <member name="M:System.Fabric.Interop.Utility.ReleaseFail(System.String,System.Object[])">
            <summary>
            Fail in release mode
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:System.Fabric.Interop.Utility.COMWrapperException">
            <summary>
            Wrapper class over COMException as there is no other way to set both HResult and InnerException in COMException.
            Sets same HResult as that of innerException.
            InnerException is added to keep stack trace for debugging.
            </summary>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateExceptionToCOM(System.Exception)">
            <summary>
            Transaltes Exception to COMException. This is requried as CoreCLR runtime returns Exception while FullClr returns COMException.
            If exception is not directly convertible to COMException, we create new COMException with same HResult as e and set e as InnerException.
            </summary>
            <param name="e">Exception which needs to be transalted to COMException</param>
            <returns>A COMException with same HResult as Exception e, if it is a COMException otherwise null.</returns>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOM(System.Exception)">
            <summary>
            Translates a managed exception to a COMException for native. We try to translate to an appropriate COMException when possible.
            The caller would use this for setting the Exception on Tasks with a more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOMAndThrow(System.Exception)">
            <summary>
            Translates a managed exception to rethrow to native. We try to translate to an appropriate COMException when possible.
            The caller would use this to re-throw the more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:System.Fabric.ProtectionLevel">
            <summary>
              <para>Enumerates how communication is protected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ProtectionLevel.None">
            <summary>
              <para>Not protected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ProtectionLevel.Sign">
            <summary>
              <para>Only integrity is protected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ProtectionLevel.EncryptAndSign">
            <summary>
              <para>Both confidentiality and integrity are protected.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.SecurityCredentials">
            <summary>
              <para>An abstract base class for types that represent security credentials.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.SecurityCredentials.CredentialType">
            <summary>
              <para>Indicates the type of security credentials to use in order to secure the cluster – valid values are "none", "x509", "Windows".</para>
            </summary>
            <value>
              <para>The type of security credentials to use in order to secure the cluster.</para>
            </value>
        </member>
        <member name="M:System.Fabric.SecurityCredentials.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)">
            <summary>
            <para>Instantiate <see cref="T:System.Fabric.SecurityCredentials" /> object from service configuration settings file</para>
            </summary>
            <param name="codePackageActivationContext"><para>The current code package activation context <see cref="T:System.Fabric.CodePackageActivationContext" />.</para></param>
            <param name="configPackageName"><para>The current configuration package name.</para></param>
            <param name="sectionName"><para>The section within the configuration file that defines all the security settings.</para></param>
            <returns>The security credentials.</returns>
            <remarks>
            <para> The configuration settings file (settings.xml) within the service configuration folder should contain all the security settings that is needed to create
            <see cref="T:System.Fabric.SecurityCredentials" /> object and pass to the <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)" /> method.
            Typically, the onus is on the service author to read the settings.xml file, parse the values and appropriately construct the <see cref="T:System.Fabric.SecurityCredentials" /> object.</para>
            <para>With the current helper method, the service author can bypass the above process.</para>
            <para>The following are the parameter names that should be provided in the service configuration "settings.xml", to be recognizable by windows fabric to perform the above parsing automatically:</para>
            <list type="number">
            <item>
            <description>
            <para>CredentialType–type of credentials to use to secure communication channel: X509 (X509 certificate credentials) or Windows (Windows credentials, requires active directory)</para>
            </description>
            </item>
            </list>
            <para> CredentialType=X509</para>
            <list type="number">
            <item>
            <description>
            <para>StoreLocation-Store location to find the certificate: CurrentUser or LocalMachine</para>
            </description>
            </item>
            <item>
            <description>
            <para>StoreName-name of the certificate store where the certificate should be searched</para>
            </description>
            </item>
            <item>
            <description>
            <para>FindType-Identifies the type of value provided by in the FindValue parameter: FindBySubjectName or FindByThumbPrint</para>
            </description>
            </item>
            <item>
            <description>
            <para>FindValue-Search target for finding the certificate</para>
            </description>
            </item>
            <item>
            <description>
            <para>AllowedCommonNames-A comma separated list of certificate common names/dns names. This list should include all certificates used by replicators, it is used to validate incoming certificate.</para>
            </description>
            </item>
            <item>
            <description>
            <para>IssuerThumbprints-A comma separated list of issuer certificate thumbprints. When specified, the incoming certificate is validated if it is issued by one of the entries in the list, in addition to chain validation.</para>
            </description>
            </item>
            <item>
            <description>
            <para>ApplicationIssuerStore/[IssuerCommonName]-A comma separated list of store names where issuer certificate corresponding to IssuerCommonName can be found. When specified, the incoming certificate is validated if it is issued by one of the entries in the list, in addition to chain validation.</para>
            </description>
            </item>
            <item>
            <description>
            <para>RemoteCertThumbprints-A comma separated list of certificate thumbprints. This list should include all certificates used by replicators, it is used to validate incoming certificate.</para>
            </description>
            </item>
            <item>
            <description>
            <para>ProtectionLevel-Indicates how the data is protected: Sign or EncryptAndSign or None.</para>
            </description>
            </item>
            </list>
            <para> CredentialType=Windows</para>
            <list type="number">
            <item>
            <description>
            <para>ServicePrincipalName-Service Principal name registered for the service. Can be empty if the service/actor host processes runs as a machine account (e.g: NetworkService, LocalSystem etc.)</para>
            </description>
            </item>
            <item>
            <description>
            <para>WindowsIdentities-A comma separated list of windows identities of all service/actor host processes.</para>
            </description>
            </item>
            <item>
            <description>
            <para>ProtectionLevel-Indicates how the data is protected: Sign or EncryptAndSign or None.</para>
            </description>
            </item>
            </list>
            <para>X509 configuration snippet sample</para>
            <code>
            &lt;Section Name="SecurityConfig"&gt;
              &lt;Parameter Name="CredentialType" Value="X509" /&gt;
              &lt;Parameter Name="FindType" Value="FindByThumbprint" /&gt;
              &lt;Parameter Name="FindValue" Value="9d c9 06 b1 69 dc 4f af fd 16 97 ac 78 1e 80 67 90 74 9d 2f" /&gt;
              &lt;Parameter Name="StoreLocation" Value="LocalMachine" /&gt;
              &lt;Parameter Name="StoreName" Value="My" /&gt;
              &lt;Parameter Name="ProtectionLevel" Value="EncryptAndSign" /&gt;
              &lt;Parameter Name="AllowedCommonNames" Value="My-Test-SAN1-Alice,My-Test-SAN1-Bob" /&gt;
              &lt;Parameter Name="ApplicationIssuerStore/WinFabric-Test-TA-CA" Value="Root" /&gt;
            &lt;/Section&gt;
            </code>
            <para>Windows configuration snippet sample 1: all the service/actor host processes run as NetworkService or LocalSystem.</para>
            <code>&lt;Section Name="SecurityConfig"&gt;
              &lt;Parameter Name="CredentialType" Value="Windows" /&gt;
              &lt;Parameter Name="ServicePrincipalName" Value="" /&gt;
              &lt;!--This machine group contains all machines in a cluster--&gt;
              &lt;Parameter Name="WindowsIdentities" Value="redmond\ClusterMachineGroup" /&gt;
              &lt;Parameter Name="ProtectionLevel" Value="EncryptAndSign" /&gt;
            &lt;/Section&gt;</code>
            <para>Windows configuration snippet sample 1: all service/actor host processes run as a group managed service account.</para>
            <code>&lt;Section Name="SecurityConfig"&gt;
              &lt;Parameter Name="CredentialType" Value="Windows" /&gt;
              &lt;Parameter Name="ServicePrincipalName" Value="servicefabric/cluster.microsoft.com" /&gt;
              &lt;--All actor/service host processes run as redmond\GroupManagedServiceAccount--&gt;
              &lt;Parameter Name="WindowsIdentities" Value="redmond\GroupManagedServiceAccount" /&gt;
              &lt;Parameter Name="ProtectionLevel" Value="EncryptAndSign" /&gt;
            &lt;/Section&gt;</code>
            </remarks>
        </member>
        <member name="M:System.Fabric.SecurityCredentials.LoadClusterSettings">
            <summary>
            <para>Instantiate <see cref="T:System.Fabric.SecurityCredentials" /> object from service configuration settings file</para>
            </summary>
            <returns>The security credentials.</returns>
        </member>
        <member name="T:System.Fabric.NoneSecurityCredentials">
            <summary>
              <para>SecurityCredentials subtype for non-secure mode</para>
            </summary>
        </member>
        <member name="M:System.Fabric.NoneSecurityCredentials.#ctor">
            <summary>
              <para>
            Creates SecurityCredentials object with CredentialType.None.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.WindowsCredentials">
            <summary>
              <para>Represents the active directory domain credential.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.WindowsCredentials.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Fabric.WindowsCredentials" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.WindowsCredentials.RemoteSpn">
            <summary>
              <para>Gets or sets the service principal name of remote listener, can be left empty if the remote listener runs as machine accounts.</para>
            </summary>
            <value>
              <para>The service principal name of remote listener, can be left empty if the remote listener runs as machine accounts.</para>
            </value>
        </member>
        <member name="P:System.Fabric.WindowsCredentials.RemoteIdentities">
            <summary>
              <para>Gets or sets the list of active directory domain identities of remote clients, each entry can be either account name or group name.</para>
            </summary>
            <value>
              <para>The list of active directory domain identities of remote clients, each entry can be either account name or group name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.WindowsCredentials.ProtectionLevel">
            <summary>
              <para>Gets or sets how communication is protected, default value is <see cref="F:System.Fabric.ProtectionLevel.EncryptAndSign" />.</para>
            </summary>
            <value>
              <para>The protection level of the credential.</para>
            </value>
        </member>
        <member name="T:System.Fabric.X509Name">
            <summary>
              <para>A type to identify X509 certificate with subject common name or DNS name</para>
            </summary>
        </member>
        <member name="P:System.Fabric.X509Name.Name">
            <summary>
              <para>Gets the subject common name or DNS name of X509 certificate</para>
            </summary>
            <value>
              <para>Subject common name or DNS name of X509 certificate</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Name.IssuerCertThumbprint">
            <summary>
              <para>Gets the certificate thumbprint to identify issuer</para>
            </summary>
            <value>
              <para>Certificate thumbprint to identify issuer</para>
            </value>
        </member>
        <member name="M:System.Fabric.X509Name.#ctor(System.String,System.String)">
            <summary>
              <para>Construct an X509Name object that identifies an X509 certificate</para>
            </summary>
            <param name="name">
              <para>Subject common name or DNS name of X509 certificate</para>
            </param>
            <param name="issuerCertThumbprint">
              <para>Certificate thumbprint to identify issuer</para>
            </param>
        </member>
        <member name="M:System.Fabric.X509Name.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified object is equal to the current object</para>
            </summary>
            <param name="obj">
              <para>The object to compare with the current object</para>
            </param>
            <returns>
              <para>Returns true if the objects are equal, false otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.X509Name.GetHashCode">
            <summary>
              <para>Compute hash code</para>
            </summary>
            <returns>
              <para>Returns <see cref="T:System.Int32" /> representing the hash code.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.X509Name.Equals(System.Fabric.X509Name)">
            <summary>
              <para>Determines whether the specified object is equal to the current object</para>
            </summary>
            <param name="other">
              <para>The object to compare with the current object</para>
            </param>
            <returns>
              <para>Returns true if the objects are equal, false otherwise.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.X509IssuerStore">
            <summary>
              <para>A type to identify X509 issuer store with issuer subject common name and stores</para>
            </summary>
        </member>
        <member name="P:System.Fabric.X509IssuerStore.Name">
            <summary>
              <para>Gets the issuer common name of X509 issuer certificate</para>
            </summary>
            <value>
              <para>Issuer common name of X509 issuer certificate</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509IssuerStore.IssuerStores">
            <summary>
              <para>Gets the certificate stores for the issuer X509 certificate.</para>
            </summary>
            <value>
              <para>Certificate stores for issuer X509 certificate</para>
            </value>
        </member>
        <member name="M:System.Fabric.X509IssuerStore.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
              <para>Construct an X509IssuerStore object that identifies an X509 issuer certificate store</para>
            </summary>
            <param name="issuerStores">
              <para>Issuer store names where issuer certificate can be found. All certificates in the mentioned stores will be whitelisted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.X509IssuerStore.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
              <para>Construct an X509IssuerStore object that identifies an X509 issuer certificate store</para>
            </summary>
            <param name="name">
              <para>Issuer common name for X509 issuer certificate</para>
            </param>
            <param name="issuerStores">
              <para>Issuer store names where issuer certificate can be found</para>
            </param>
        </member>
        <member name="M:System.Fabric.X509IssuerStore.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified object is equal to the current object</para>
            </summary>
            <param name="obj">
              <para>The object to compare with the current object</para>
            </param>
            <returns>
              <para>Returns true if the objects are equal, false otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.X509IssuerStore.GetHashCode">
            <summary>
              <para>Compute hash code</para>
            </summary>
            <returns>
              <para>Returns <see cref="T:System.Int32" /> representing the hash code.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.X509Credentials">
            <summary>
              <para>Specifies the security credentials that are based upon X.509 certificates.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.X509Credentials.#ctor">
            <summary>
              <para>Creates a new instance of the <see cref="T:System.Fabric.X509Credentials" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.X509Credentials.AllowedCommonNames">
            <summary>
              <para>Deprecated by RemoteCommonNames.</para>
            </summary>
            <value>
              <para>The allowed common names that you want Service Fabric to validate against.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.RemoteX509Names">
            <summary>
              <para>Gets the list of X509Name to validate remote X509Credentials</para>
            </summary>
            <value>
              <para>the list of X509Name to validate remote X509Credentials</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.RemoteCertIssuers">
            <summary>
              <para>Gets the list of X509Issuers to validate remote X509Credentials</para>
            </summary>
            <value>
              <para>The list of X509Issuers to validate remote X509Credentials</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.RemoteCommonNames">
            <summary>
              <para>Indicates the expected common names of remote certificates that you want Service Fabric to validate against.</para>
            </summary>
            <value>
              <para>The expected common names of remote certificates that you want Service Fabric to validate against.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.IssuerThumbprints">
            <summary>
              <para>When not empty, this dictates the certificate thumbprints of direct issuer of remote certificates.</para>
            </summary>
            <value>
              <para>The certificate thumbprints of direct issuer of remote certificates.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.RemoteCertThumbprints">
            <summary>
              <para>Gets the list of remote certificate thumbprints, used to validate remote X509Credentials</para>
            </summary>
            <value>
              <para>List of remote certificate thumbprints, used to validate remote X509Credentials</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.FindType">
            <summary>
              <para> Specifies how to find local certificate in certificate store.Supported values:FindByThumbprint: find certificate by certificate thumbprintFindBySubjectName: find certificate by subject distinguished name or common name, when subject distinguished name is provided in FindValue, subject name in the certificate must be encoded in ASN encoding due to a restriction in native Windows crypto API. There is no such restriction when common name is provided in FindValue.</para>
            </summary>
            <value>
              <para>The type of security credentials to use to secure the cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.FindValue">
            <summary>
              <para>Specifies the filter value used to search local certificate in certificate store. FindType specifies the type of filter value.</para>
            </summary>
            <value>
              <para>The value of security credentials to use to secure the cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.FindValueSecondary">
            <summary>
              <para>Gets or sets the secondary find value for loading local certificate credential.</para>
            </summary>
            <value>
              <para>The secondary find value for loading local certificate credential.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.StoreLocation">
            <summary>
              <para>Indicates the location of the certificate store.</para>
            </summary>
            <value>
              <para>The location of the certificate store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.StoreNameDefault">
            <summary>
              <para>Indicates the default name of the store where the certificate is stored.</para>
            </summary>
            <value>
              <para>The default name of the store where the certificate is stored.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.StoreName">
            <summary>
              <para>Indicates the name of the store where the certificate is stored.</para>
            </summary>
            <value>
              <para>The name of the store where the certificate is stored.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.ProtectionLevel">
            <summary>
              <para>Indicates the string value that is used to specify whether the messages in the header and body have integrity and confidentiality guarantees applied to them when they are sent between the nodes of a cluster.</para>
            </summary>
            <value>
              <para>The string value that is used to specify whether the messages in the header and body have integrity and confidentiality guarantees applied to them when they are sent between the nodes of a cluster.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CredentialType">
            <summary>
            <para>Defines the valid kinds of security credentials.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.None">
            <summary>
            <para>No credential defined (default).</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.X509">
            <summary>
            <para>The X509 certificate.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.Windows">
            <summary>
            <para>The active directory domain credential.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.Claims">
            <summary>
            <para>The claims token acquired from STS (security token service).</para>
            </summary>
        </member>
        <member name="T:System.Fabric.DeletePropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation" /> that deletes a specified property if it exists.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> object fails, the entire batch fails 
            and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.DeletePropertyOperation.#ctor(System.String)">
            <summary>
            <para>Creates and instantiates a <see cref="T:System.Fabric.DeletePropertyOperation" /> object.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property to be deleted.</para>
            </param>
        </member>
        <member name="T:System.Fabric.DeploymentStatus">
            <summary>
            <para>Specifies the status of the package on the node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Invalid">
            <summary>
            <para>The status of the package is not known or invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Downloading">
            <summary>
            <para>The package is being downloaded to the node from the ImageStore.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Activating">
            <summary>
            <para>The package is being activated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Active">
            <summary>
            <para>The package is active.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Upgrading">
            <summary>
            <para>The package is being upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Deactivating">
            <summary>
            <para>The package is being deactivated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.RanToCompletion">
            <summary>
            <para>The package has ran to completion.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Failed">
            <summary>
            <para>The package has failed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.HostType">
            <summary>
            <para>The type of host for main entry point of a code package as specified in service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.HostType.Invalid">
            <summary>
            <para>The type of host is not known or invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.HostType.ExeHost">
            <summary>
            <para>The host is an executable.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.HostType.ContainerHost">
            <summary>
            <para>The host is a container.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.HostIsolationMode">
            <summary>
            <para>
            Indicates isolation mode of main entry point of a code package when it's host type is 
            <see cref="F:System.Fabric.HostType.ContainerHost"/>. This is specified as part of container host policies
            in application manifest while importing service manifest.
            </para>
            <remarks>
            For host type other than <see cref="F:System.Fabric.HostType.ContainerHost"/>, its value is <see cref="F:System.Fabric.HostIsolationMode.None"/>.
            </remarks>
            </summary>
        </member>
        <member name="F:System.Fabric.HostIsolationMode.None">
            <summary>
            <para>Indicates isolation mode is not applicable for given <see cref="T:System.Fabric.HostType"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.HostIsolationMode.Process">
            <summary>
            <para>The default isolation mode for a <see cref="F:System.Fabric.HostType.ContainerHost"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.HostIsolationMode.HyperV">
            <summary>
            <para>
            Indicates the <see cref="F:System.Fabric.HostType.ContainerHost"/> is a Hyper-V container.
            This applies to only Windows containers.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationDefinitionKindFilter">
            <summary>
            <para>Enumerates the filters used for matching the definition kind of applications that should be returned by query.</para>
            </summary>
            <remarks>This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its members.</remarks>
        </member>
        <member name="F:System.Fabric.Description.ApplicationDefinitionKindFilter.Default">
            <summary>
            <para>Indicates no filter is added on definition kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationDefinitionKindFilter.All">
            <summary>
            <para>Indicates no filter is added on definition kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationDefinitionKindFilter.ServiceFabricApplicationDescription">
            <summary>
            <para>Indicates a filter that matches applications defined by <see cref="T:System.Fabric.Description.ApplicationDescription"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationDefinitionKindFilter.Compose">
            <summary>
            <para>Indicates a filter that matches applications defined by compose file(s).</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationDefinitionKindFilter.MeshApplicationDescription">
            <summary>
            <para>Indicates a filter that matches applications defined by mesh application description.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationDescription">
            <summary>
            <para>Describes an application to be created by using 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationDescription.#ctor">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.ApplicationDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationDescription.#ctor(System.Uri,System.String,System.String)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.ApplicationDescription" /> with the application instance name, the application 
            type name, and the application type version.</para>
            </summary>
            <param name="applicationName">
            <para>URI of the application instance name.</para>
            </param>
            <param name="applicationTypeName">
            <para>Name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>Version of the application type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ApplicationDescription.#ctor(System.Uri,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.ApplicationDescription" /> with the application instance name, the application 
            type name, the application type version, and the collection of application parameters.</para>
            </summary>
            <param name="applicationName">
            <para>URI of the application instance name.</para>
            </param>
            <param name="applicationTypeName">
            <para>Name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>Version of the application type.</para>
            </param>
            <param name="applicationParameters">
            <para>Collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ApplicationDescription.#ctor(System.Uri,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Fabric.Description.ManagedApplicationIdentityDescription)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.ApplicationDescription" /> with the application instance name, the application 
            type name, the application type version, and the collection of application parameters.</para>
            </summary>
            <param name="applicationName">
            <para>URI of the application instance name.</para>
            </param>
            <param name="applicationTypeName">
            <para>Name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>Version of the application type.</para>
            </param>
            <param name="applicationParameters">
            <para>Collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </param>        
            <param name="managedApplicationIdentity">
            <para>Managed application identity description.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationName">
            <summary>
            <para>Gets or sets the URI name of the application instance.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationTypeName">
            <summary>
            <para>Gets or sets the name of the Service Fabric application type.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationTypeVersion">
            <summary>
            <para>Gets or sets the version of the application type.</para>
            </summary>
            <value>
            <para>The application type version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationParameters">
            <summary>
            <para>Gets the collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </summary>
            <value>
            <para>The collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </value>
            <remarks>
            The maximum allowed length of a parameter value is 1024*1024 characters (including the terminating null character).
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ParameterList">
            Wrapper of property ApplicationParameters. Needed for serialization.
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.MaximumNodes">
            <summary>
            Gets or sets the maximum number of nodes where this application can be instantiated.
            </summary>
            <value>
            <para>
            Number of nodes this application is allowed to span. Default value is zero.
            If it is zero, Application can span any number of nodes in the cluster.
            </para>
            <para>
            If this parameter is smaller than <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes"/> an
            <see cref="T:System.ArgumentException"/> will be thrown when <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)" />
            is called.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.MinimumNodes">
            <summary>
            Gets or sets the minimum number of nodes where Service Fabric will reserve capacity for this application.
            </summary>
            <value>
            <para>
            Number of nodes where Service Fabric will reserve Capacity in the cluster for this Application to be placed.
            Note that this does not mean that the Application is guaranteed to have replicas on all those nodes.
            </para>
            <para>
            If this parameter is set to zero, no capacity will be reserved.
            </para>
            <para>
            If this parameters is greater than <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes"/> an
            <see cref="T:System.ArgumentException"/> will be thrown when <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)" />
            is called.
            </para>
            </value>
        </member>
        <member name="F:System.Fabric.Description.ApplicationDescription.Metrics">
            <summary>
            Gets or sets the list of metrics for which the application capacity is defined.
            </summary>
            <value>
            Specifies the metric Capacity of the Application. Capacity is specified for each metric by using
            <see cref="T:System.Fabric.Description.ApplicationMetricDescription"/>.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ManagedApplicationIdentity">
            <summary>
            Managed application identity description.
            </summary>
            <value>
            Specifies the managed application identity.
            <see cref="T:System.Fabric.Description.ManagedApplicationIdentityDescription"/>.
            </value>
        </member>
        <member name="T:System.Fabric.Description.ApplicationNetworkQueryDescription">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetApplicationNetworkListAsync(System.Fabric.Description.ApplicationNetworkQueryDescription)" />.</para>
            </summary> 
        </member>
        <member name="M:System.Fabric.Description.ApplicationNetworkQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationNetworkQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationNetworkQueryDescription.ApplicationName">
            <summary>
            Gets or sets the application name to query for.        
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationUpdateDescription">
            <summary>
            Describes an update of application capacity that will be updated using
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)"/>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationUpdateDescription.#ctor(System.Uri)">
            <summary>
            Creates a new instance of <see cref="T:System.Fabric.Description.ApplicationUpdateDescription"/>.
            </summary>
            <param name="applicationName">URI of the application instance name.</param>
        </member>
        <member name="M:System.Fabric.Description.ApplicationUpdateDescription.#ctor(System.Uri,System.Boolean,System.Int64,System.Int64,System.Collections.Generic.IList{System.Fabric.Description.ApplicationMetricDescription})">
            <summary>
            Creates a new instance of <see cref="T:System.Fabric.Description.ApplicationUpdateDescription"/> with application capacity parameters.
            </summary>
            <param name="applicationName">URI of the application instance name.</param>
            <param name="removeApplicationCapacity">
            Indicates if application capacity should be removed
            (see <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.RemoveApplicationCapacity"/>).
            </param>
            <param name="minimumNodes">
            Minimum number of nodes
            (see <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes"/>).
            </param>
            <param name="maximumNodes">
            Maximum number of nodes
            (see <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes"/>)
            </param>
            <param name="metrics">
            Application capacity metrics
            (see <see cref="F:System.Fabric.Description.ApplicationUpdateDescription.Metrics"/>)
            </param>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpdateDescription.ApplicationName">
            <summary>
            <para>Gets or sets the URI name of the application instance.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpdateDescription.RemoveApplicationCapacity">
            <summary>
            Gets or sets the RemoveApplicationCapacity flag.
            </summary>
            <value>
            Used to clear all parameters related to Application Capacity for this application.
            It is not possible to specify this parameter together with other Application Capacity parameters.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes">
            <summary>
            Gets or sets the maximum number of nodes where this application can be instantiated.
            </summary>
            <value>
            <para>
            Number of nodes this application is allowed to span. Default value is zero.
            If it is zero, Application can be placed on any number of nodes in the cluster.
            If this parameter is not specified when updating an application, then the maximum number of nodes remains unchanged.
            </para>
            <para>
            If this parameter is smaller than <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes"/> an
            <see cref="T:System.ArgumentException"/> will be thrown when <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)" />
            is called.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes">
            <summary>
            Gets or sets the minimum number of nodes.
            </summary>
            <value>
            <para>
            Number of nodes where Service Fabric will reserve Capacity in the cluster for this Application to be placed.
            Note that this does not mean that the Application is guaranteed to have replicas on all those nodes.
            </para>
            <para>
            If this parameter is set to zero, no capacity will be reserved. If this parameter is not set when updating application then the minimum number of nodes remains unchanged.
            </para>
            <para>
            If this parameters is greater than <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes"/> and if both parameters are specified then an
            <see cref="T:System.ArgumentException"/> will be thrown when <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)" />
            is called.
            </para>
            </value>
        </member>
        <member name="F:System.Fabric.Description.ApplicationUpdateDescription.Metrics">
            <summary>
            Gets or sets the list of metrics for which the application capacity is defined.
            </summary>
            <value>
            Specifies the metric Capacity of the Application. Capacity is specified for each metric using
            <see cref="T:System.Fabric.Description.ApplicationMetricDescription"/>.
            If this parameter is not set, then application capacity metrics will remain unchanged when updating application.
            </value>
        </member>
        <member name="T:System.Fabric.Description.ApplicationHealthQueryDescription">
            <summary>
            <para>Represents the query input for getting application health. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationHealthQueryDescription.#ctor(System.Uri)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be <languageKeyword>null</languageKeyword>.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate the application health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate application health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy specified in the application manifest
            to evaluate the application.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the application. Only events 
            that match the filter will be returned. All events will be used to evaluate the application aggregated health state.</para>
            </summary>
            <value>
            <para>The filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the application.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the application aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.ServicesFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.ServiceHealthState" /> children. Only children that match the filter will 
            be returned. All children will be used to evaluate the application aggregated health state.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.ServiceHealthState" /> children.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the application aggregated health state.
            If the filter is not specified, all service children of the application are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.DeployedApplicationsFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthState" /> children. Only children that match the 
            filter will be returned. All children will be used to evaluate the application aggregated health state.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter" /> children.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the application aggregated health state.
            If the filter is not specified, all deployed application children of the application are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.HealthStatisticsFilter">
            <summary>
            Gets or sets the health statistics filter.
            </summary>
            <value>The health statistics filter.</value>
            <remarks>
            <para>
            The health statistics filter controls whether the <see cref="T:System.Fabric.Health.ApplicationHealth"/> returned by the query
            contains the application health statistics. If not specified, the statistics are included.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ApplicationHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.ApplicationPackageCleanupPolicy">
            <summary>
            <para>Enumerates the options for the cleanup of application package policy.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationPackageCleanupPolicy.Invalid">
            <summary>
            <para> Indicates that the cleanup policy provided is invalid. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationPackageCleanupPolicy.Default">
            <summary>
            <para>Indicates that the cleanup policy of application packages are based on the cluster setting "CleanupApplicationPackageOnProvisionSuccess".
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationPackageCleanupPolicy.Automatic">
            <summary>
            <para>Indicates that the service fabric runtime determines when the application package is cleaned up from the image store.By default cleanup is done after a successful provision.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationPackageCleanupPolicy.Manual">
            <summary>
            <para>Indicates that the user has to explicitly clean up the application package by using <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationParameter">
            <summary>
            <para>Provides an application parameter override to be applied when creating or upgrading an application. Note, overridden application parameter values are not preserved across application upgrades. To retain the overridden parameter values across application upgrades, the user should
            first fetch the list of overridden application parameters through <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)">GetApplication</see> query and then pass that list of overridden parameters to <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationParameter.Name">
            <summary>
            <para>Gets the name of the application parameter to override.</para>
            </summary>
            <value>
            <para>The name of the application parameter to override.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationParameter.Value">
            <summary>
            <para>Gets the value of the application parameter to override.</para>
            </summary>
            <value>
            <para>The value of the application parameter to override.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameter.ToString">
            <summary>
            Returns a string representation of the <see cref="T:System.Fabric.Description.ApplicationParameter" /> class.
            </summary>
            <returns>
            Returns a string that displays an application parameter with format "name" = "value" followed by a newline.
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ApplicationParameterList">
            <summary>
            <para>Represents the list of application parameters applied to the current version of the application. Retrieved using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)" />.</para>
            <para>This class derives from a KeyedCollection whose string key is the name of the associated ApplicationParameter.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList" /> class.</para>
            </summary>
            <param name="comparer">
            <para>The equality comparer.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList" /> class.</para>
            </summary>
            <param name="comparer">
            <para>The equality comparer.</para>
            </param>
            <param name="dictionaryCreationThreshold">
            <para>The creation threshold.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.ToString">
            <summary>
            Overrides ToString() method.
            </summary>
            <returns>
            Returns a string that displays all applications parameters and their values.
            </returns>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.GetKeyForItem(System.Fabric.Description.ApplicationParameter)">
            <summary>
            <para>Gets the key name for the specified application parameter.</para>
            </summary>
            <param name="item">
            <para>Application parameter for which to get the key.</para>
            </param>
            <returns>
            <para>Returns the key name.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ApplicationPrincipalsDescription">
            <summary>
            <para>Describes the application principals of the service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationPrincipalsDescription.#ctor">
            <summary>
            <para>Creates and initializes an <see cref="T:System.Fabric.Description.ApplicationPrincipalsDescription" /> object. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationPrincipalsDescription.Users">
            <summary>
            <para>Gets the users that must be created as a part of the application environment setup in the application manifest.</para>
            </summary>
            <value>
            <para>The users that must be created as a part of the application environment setup in the application manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationPrincipalsDescription.Groups">
            <summary>
            <para>Gets the groups that must be created as a part of the application environment setup in the application manifest.</para>
            </summary>
            <value>
            <para>The groups that must be created as a part of the application environment setup in the application manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationPrincipalsDescription.ManagedIdentities">
            <summary>
            <para>Gets the identity that must be created as a part of the application environment setup in the application manifest.</para>
            </summary>
            <value>
            <para>The identity that must be created as a part of the application environment setup in the application manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationPrincipalsDescription.TokenServiceEndpoint">
            <summary>
            Token service endpoint managing the application identity
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationPrincipalsDescription.DefaultIdentity">
            <summary>
            Default application identity
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationQueryDescription">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationPagedListAsync(System.Fabric.Description.ApplicationQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationQueryDescription.ApplicationNameFilter">
            <summary>
            <para>Gets or sets the URI name of application to query for.</para>
            </summary>
            <value>
            <para>The URI name of application to query for.</para>
            </value>
            <remarks>
            <para>At most one of ApplicationNameFilter, ApplicationTypeNameFilter, or ApplicationDefinitionKindFilter can be specified.</para>
            <para>If no filters are specified, all applications which fit a page are returned.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationQueryDescription.ApplicationTypeNameFilter">
            <summary>
            <para>Gets or sets the application type name used to filter the applications to query for.
            Applications that are of this application type will be returned.</para>
            </summary>
            <value>
            <para>The application type name used to filter the applications to query for.</para>
            </value>
            <remarks>
            <para>At most one of ApplicationNameFilter, ApplicationTypeNameFilter, or ApplicationDefinitionKindFilter can be specified.</para>
            <para>If no filters are specified, all applications which fit a page are returned.</para>
            <para>This filter is case sensitive.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationQueryDescription.ExcludeApplicationParameters">
            <summary>
            <para>Gets or sets the flag that specifies whether application parameters will be excluded from the result.</para>
            </summary>
            <value>
            <para>Flag that specifies whether application parameters will be excluded from the result.</para>
            </value>
            <remarks>
            <para>This flag can be set to true in order to limit the result size when parameters are huge.
            Default value is false.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationQueryDescription.ExcludeManagedApplicationIdentity">
            <summary>
            <para>Gets or sets the flag that specifies whether application identity will be excluded from the result.</para>
            </summary>
            <value>
            <para>Flag that specifies whether application identity will be excluded from the result.</para>
            </value>
            <remarks>
            <para>This flag can be set to true in order to limit the result size when identity is huge.
            Default value is false.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationQueryDescription.ApplicationDefinitionKindFilter">
            <summary>
            <para>Gets or sets the definition kind used to filter the applications that will be returned.
            </para>
            </summary>
            <value>
            <para>The definition kind used to filter the applications.</para>
            </value>
            <remarks>
            <para>At most one of ApplicationNameFilter, ApplicationTypeNameFilter, or ApplicationDefinitionKindFilter can be specified.</para>
            <para>If no filters are specified, all applications are returned which fits a page.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ApplicationMetricDescription">
            <summary>
            Specifies the application capacity for one metric.
            </summary>
            <seealso cref="T:System.Fabric.Description.ApplicationDescription"/>
            <seealso cref="T:System.Fabric.Description.ApplicationUpdateDescription"/>
        </member>
        <member name="P:System.Fabric.Description.ApplicationMetricDescription.Name">
            <summary>
            Gets or sets the name of the metric.
            </summary>
            <value>
            The name of the metric.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationMetricDescription.NodeReservationCapacity">
            <summary>
            Gets or sets the node reservation capacity for Service Fabric application.
            </summary>
            <value>
            <para>
            Specifies the amount of Metric Load which is reserved on nodes which have instances of this Application.
            If <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes"/> is specified, then
            the product of these values will be the Capacity reserved in the cluster for the Application.
            </para>
            <para>
            If set to zero, no capacity is reserved for this metric.
            </para>
            <para>
            When setting application capacity (<see cref="T:System.Fabric.Description.ApplicationDescription"/>) or when updating
            application capacity ((<see cref="T:System.Fabric.Description.ApplicationUpdateDescription"/>) this value must be smaller than
            or equal to <see cref="P:System.Fabric.Description.ApplicationMetricDescription.MaximumNodeCapacity"/> for each metric.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationMetricDescription.MaximumNodeCapacity">
            <summary>
            Gets or sets the maximum node capacity for Service Fabric application.
            </summary>
            <value>
            <para>
            Specifies the Maximum Load for an instance of this Application on a single Node.
            Even if Capacity of the node is greater than this value, Service Fabric will limit the
            total load of services within the Application on each node to this value.
            </para>
            <para>If set to zero, capacity for this metric is unlimited on each node.</para>
            <para>
            When creating a new application with application capacity defined, the product of <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes"/>
            and this value must always be smaller than or equal to <see cref="P:System.Fabric.Description.ApplicationMetricDescription.TotalApplicationCapacity"/>.
            </para>
            <para>
            When updating existing application with application capacity, the product of <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes"/>
            and this value must always be smaller than or equal to <see cref="P:System.Fabric.Description.ApplicationMetricDescription.TotalApplicationCapacity"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationMetricDescription.TotalApplicationCapacity">
            <summary>
            Gets or sets the total metric capacity for Service Fabric application.
            </summary>
            <value>
            <para>
            Specifies the total metric capacity for this Application in the Cluster.
            Service Fabric will try to limit the sum of loads of services within the Application to this value.
            </para>
            <para>
            When creating a new application with application capacity defined, the product of <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes"/>
            and <see cref="P:System.Fabric.Description.ApplicationMetricDescription.MaximumNodeCapacity"/> must always be smaller than or equal to this value.
            </para>
            <para>
            When creating a new application with application capacity defined, the product of <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes"/>
            and <see cref="P:System.Fabric.Description.ApplicationMetricDescription.MaximumNodeCapacity"/> must always be smaller than or equal to this value.
            </para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ApplicationTypeDefinitionKindFilter">
            <summary>
            <para>Enumerates the filters used for matching the definition kind of applications type that should be returned by query.</para>
            </summary>
            <remarks>This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its members.</remarks>
        </member>
        <member name="F:System.Fabric.Description.ApplicationTypeDefinitionKindFilter.Default">
            <summary>
            <para>Indicates no filter is added on definition kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationTypeDefinitionKindFilter.All">
            <summary>
            <para>Indicates no filter is added on definition kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationTypeDefinitionKindFilter.ServiceFabricApplicationPackage">
            <summary>
            <para>Indicates a filter that matches application types defined and created by a Service Fabric application package provided by the user.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationTypeDefinitionKindFilter.Compose">
            <summary>
            <para>Indicates a filter that matches application types defined and created implicitly as part of a compose deployment.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ApplicationTypeDefinitionKindFilter.MeshApplicationDescription">
            <summary>
            <para>Indicates a filter that matches application types defined and created implicitly as part of a mesh application deployment.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationUpgradeDescription">
            <summary>
            <para>
            Describes the upgrade policy and the application to be upgraded.
            </para>
            </summary>
            <seealso>
            <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-application-upgrade">Service Fabric application upgrade</see>.
            </seealso>
        </member>
        <member name="M:System.Fabric.Description.ApplicationUpgradeDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationUpgradeDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.ApplicationName">
            <summary>
            <para>Gets or sets the URI name of the application instance that needs to be upgraded.</para>
            </summary>
            <value>
            <para>The URI name of the application instance that needs to be upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.TargetApplicationTypeVersion">
            <summary>
            <para>Gets or sets the version of the application type to which the application instance is upgrading.</para>
            </summary>
            <value>
            <para>The version of the application type to which the application instance is upgrading.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.UpgradePolicyDescription">
            <summary>
            <para>Gets or sets the description of the policy to be used for upgrading this application instance.</para>
            </summary>
            <value>
            <para>The description of the policy to be used for upgrading this application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.ApplicationParameters">
            <summary>
            <para>Gets or sets a subset of the collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml. This property can be used to override a subset of the application parameters. Additionally, overridden
            application parameters are not preserved across application upgrades, so to retain overridden parameters across applicaiton upgrades, one can add the ApplicationParameters returned from <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)" /> to this property.</para>
            </summary>
            <value>
            <para>A subset from the collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </value>
            <remarks>
            The maximum allowed length of a parameter value is 1024*1024 characters (including the terminating null character).
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.ManagedApplicationIdentity">
            <summary>
            Application identity
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationUpgradeUpdateDescription">
            <summary>
            <para>Used to modify the upgrade parameters describing the behavior of application upgrades. See 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationUpgradeUpdateDescription.#ctor">
            <summary>
            <para>Creates an instance of the <see cref="T:System.Fabric.Description.ApplicationUpgradeUpdateDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeUpdateDescription.ApplicationName">
            <summary>
            <para>Gets or sets the name of the application with a current upgrade to modify.</para>
            </summary>
            <value>
            <para>The name of the application with a current upgrade to modify.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeUpdateDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.HealthPolicy"/>.</para>
            </summary>
            <value>
            <para>the new value of <see cref="P:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.HealthPolicy"/>.</para>
            </value>
            <remarks>The application health policy is used to evaluate the application health.</remarks>
        </member>
        <member name="T:System.Fabric.Description.ClusterHealthQueryDescription">
            <summary>
            <para>Provides query input for getting <see cref="T:System.Fabric.Health.ClusterHealth" />. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ClusterHealthQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ClusterHealthPolicy" /> used to evaluate the cluster health. The policy 
            will be used to evaluate the aggregated health state of the events reported on cluster as well as the aggregated health states of the nodes.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ClusterHealthPolicy" /> used to evaluate the cluster health.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the cluster.</para>
            </summary>
            <value>
            <para>The filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the cluster.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the cluster aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.NodesFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.NodeHealthState" /> children. Only children that match the filter 
            will be returned.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.NodeHealthState" /> children.</para>
            </value>
            <remarks><para> Only nodes that match the filter will be returned. 
            All nodes will be used to evaluate the cluster aggregated health state.
            If the filter is not specified, all cluster nodes are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.ApplicationsFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.ApplicationHealthState" /> children. Only children that match the 
            filter will be returned.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.ApplicationHealthState" /> children.</para>
            </value>
            <remarks><para> Only applications that match the filter will be returned. 
            All applications will be used to evaluate the cluster aggregated health state.
            If the filter is not specified, all cluster applications are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.ApplicationHealthPolicyMap">
            <summary>
            <para>Gets the application health policies used to evaluate the health of the applications from the cluster. Each entry specifies 
            as key the application name and as value an <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate the 
            application health.</para>
            </summary>
            <value>
            <para>The application health policies used to evaluate the health of the applications from the cluster.</para>
            </value>
            <remarks><para>If an application is not specified in the map, the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> found 
            in its application manifest will be used for evaluation. The map is empty by default.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.HealthStatisticsFilter">
            <summary>
            Gets or sets the health statistics filter.
            </summary>
            <value>The health statistics filter.</value>
            <remarks>
            <para>
            The health statistics filter controls whether the <see cref="T:System.Fabric.Health.ClusterHealth"/> returned by the query
            contains the cluster health statistics. If not specified, the statistics are included.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.ClusterHealthChunkQueryDescription">
            <summary>
            Describes the cluster health chunk query input.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ClusterHealthChunkQueryDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy">
            <summary>
            Gets or sets the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health. 
            </summary>
            <value>the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health.</value>
            <remarks>The policy will be used to evaluate the aggregated health state of the events reported on cluster and the aggregated health state of the nodes.
            If not specified, the cluster health policy described in the manifest or the default cluster health policy are used.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies">
            <summary>
            Gets the application health policies used to evaluate the health of the applications from the cluster. 
            </summary>
            <value>The application health policies used to evaluate the health of the specified applications.</value>
            <remarks>Each entry specifies as key the application name and as value an
            <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate the application health.
            If an application is not specified in the map, the ApplicationHealthPolicy found in the application manifest will be used for evaluation. 
            The map is empty by default.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> to be applied to the application children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> to be applied to the application children health states.</value>
            <remarks>The list can contain one default application filter and/or application filters for specific applications or application types to fine-grain entities returned by the query.
            All application children that match the filter will be returned as children of the cluster.
            If empty, no application is returned.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> to be applied to the node children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> to be applied to the node children health states.</value>
            <remarks>
            All node children that match the filter will be returned as children of the cluster.
            If empty, no node is returned.</remarks>
        </member>
        <member name="T:System.Fabric.Description.ClusterManifestQueryDescription">
            <summary>
            <para>
            Describes the query parameters for use with <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.Fabric.Description.ClusterManifestQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ClusterManifestQueryDescription.#ctor">
            <summary>
            <para>
            Constructs query parameters for retrieving the contents of a cluster manifest.
            </para>
            </summary>
            <remarks>
            <para>
            By default, the current running cluster manifest will be retrieved. To query
            for another cluster manifest version that was previously provisioned using
            <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String)" />, specify the desired query version using
            <see cref="P:System.Fabric.Description.ClusterManifestQueryDescription.ClusterManifestVersion" />.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterManifestQueryDescription.ClusterManifestVersion">
            <summary>
            <para>
            Gets or sets the version of the cluster manifest to retrieve.
            </para>
            </summary>
            <value>
            <para>The version of the cluster manifest.</para>
            </value>
            <remarks>
            <para>
            When set to null (default) or an empty string, the current running cluster manifest will be retrieved.
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.CodePackageDescription">
            <summary>
            <para>Describes a code package that includes its entry point.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.CodePackageDescription.SetupEntryPoint">
            <summary>
            <para>Gets the setup entry point for the code package.</para>
            </summary>
            <value>
            <para>The setup entry point for the code package.</para>
            </value>
            <remarks>
            <para>Service Fabric  provides support for an additional entry point for application/service developers to configure and set up the 
            environment for their services before the main entry point starts.  </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.CodePackageDescription.EntryPoint">
            <summary>
            <para>Gets the entry point for the code package.</para>
            </summary>
            <value>
            <para>The entry point for the code package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.CodePackageDescription.IsShared">
            <summary>
            Gets a flag indicating whether the code package is shared.
            </summary>
            <value>Flag indicating whether the code package is shared.</value>
        </member>
        <member name="T:System.Fabric.Description.CodePackageEntryPointKind">
            <summary>
            <para>Enumerates the possible types of entry points.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.Invalid">
            <summary>
            <para>Indicates that the HOST Type is invalid. Do not use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.None">
            <summary>
            <para>Indicates that the HOST Type is None.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.Exe">
            <summary>
            <para>Indicates that the HOST Type is EXE. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.DllHost">
            <summary>
            <para>Indicates that the HOST Type is DLL. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.Container">
            <summary>
            <para>Indicates that the HOST Type is CONTAINER. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.DllHostIsolationPolicy">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.Invalid">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.SharedDomain">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.DedicatedDomain">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.DedicatedProcess">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationPackageDescription">
            <summary>
            <para>Describes a configuration package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationPackageDescription.Settings">
            <summary>
            <para>DEPRECATED. Gets the parsed configuration settings from the configuration package.</para>
            </summary>
            <value>
            <para>The parsed configuration settings from the configuration package.</para>
            </value>
            <remarks>This property is obsolete. Use Settings property of System.Fabric.ConfigurationPackage type instead.</remarks>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationProperty">
            <summary>
            <para>Specifies a configuration setting and its value that can be used to configure a service or application.</para> 
            <para>The settings are specified in the settings.xml file in the service manifest. For more information see https://docs.microsoft.com/azure/service-fabric/service-fabric-application-model</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.Name">
            <summary>
            <para>Gets the name of the setting as specified in the settings.xml file in the service manifest.</para>
            </summary>
            <value>
            <para>The name of the setting.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.Value">
            <summary>
            <para>Gets the value of the setting.</para>
            </summary>
            <value>
            <para>The value of the setting.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.MustOverride">
            <summary>
            <para>Gets a flag indicating whether the setting must be overridden in the application manifest.</para>
            </summary>
            <value>
            <para>Flag indicating whether the setting must be overridden in the application manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.IsEncrypted">
            <summary>
            <para>Gets a flag indicating whether the configuration is encrypted. </para>
            </summary>
            <value>
            <para>Returns true if the configuration is encrypted; false, otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.Type">
            <summary>
            <para>Gets the type of the setting "Encrypted/SecretsStore/Inline.</para>
            </summary>
            <value>
            <para>The value of the setting.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ConfigurationProperty.DecryptValue">
            <summary>
            <para>Decrypts an encrypted value and returns it as a SecureString.</para>       
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Security.SecureString" />.</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <para>The value of the <see cref="T:System.Fabric.Description.ConfigurationProperty" /> is not encrypted.</para>
            </exception>
            <remarks>See https://docs.microsoft.com/azure/service-fabric/service-fabric-application-secret-management for an example on how to encrypt a secret and store it in the configuration and how to use this method to decrypt the value at runtime.</remarks>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationSection">
            <summary>
            <para>Specifies a named collection of configuration properties.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationSection.Name">
            <summary>
            <para> The name of the section. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationSection.Parameters">
            <summary>
            <para>The key/value pair of a configuration property. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationSettings">
            <summary>
            <para>Describes the configuration settings.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationSettings.Sections">
            <summary>
            <para>Gets the name/value pair collection of the sections. </para>
            </summary>
            <value>
            <para>the name/value pair collection of the sections.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DataPackageDescription">
            <summary>
            <para>Describes a data package. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.DeleteApplicationDescription">
            <summary>
            <para>Describes an application to be deleted by using 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DeleteApplicationDescription.#ctor(System.Uri)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.DeleteApplicationDescription" />. </para>
            </summary>
            <param name="applicationName">
            <para>URI of the application instance name.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.DeleteApplicationDescription.ApplicationName">
            <summary>
            <para>Gets the URI name of the application instance.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeleteApplicationDescription.ForceDelete">
            <summary>
            <para>Gets or sets the flag that specifies whether the application should be given a chance to gracefully clean up its state and close.</para>
            </summary>
            <value>
            <para>Flag that specifies whether the application should be given a chance to gracefully clean up its state and close.</para>
            <para>If the ForceDelete flag is set then the application won't be closed gracefully and stateful services in it may leak persisted state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DeleteComposeDeploymentDescriptionWrapper">
            <summary>
            <para>Describes an application to be deleted by using 
            <see cref="M:System.Fabric.FabricClient.ComposeDeploymentClient.DeleteComposeDeploymentWrapperAsync(System.Fabric.Description.DeleteComposeDeploymentDescriptionWrapper,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DeleteComposeDeploymentDescriptionWrapper.#ctor(System.String)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.DeleteComposeDeploymentDescriptionWrapper" />. </para>
            </summary>
            <param name="deploymentName">
            <para>The name of compose deployment.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.DeleteComposeDeploymentDescriptionWrapper.DeploymentName">
            <summary>
            <para>Gets the name of the compose deployment.</para>
            </summary>
            <value>
            <para>The name of the compose deployment.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DeleteNetworkDescription">
            <summary>
            <para>Describes a container network to be deleted by using 
            <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.DeleteNetworkAsync(System.Fabric.Description.DeleteNetworkDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>    
        </member>
        <member name="M:System.Fabric.Description.DeleteNetworkDescription.#ctor(System.String)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.DeleteNetworkDescription" />. </para>
            </summary>
            <param name="networkName">
            <para>Name of the container network.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.DeleteNetworkDescription.NetworkName">
            <summary>
            <para>Gets or sets name of the container network.</para>
            </summary>
            <value>
            <para>Name of the container network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DeleteServiceDescription">
            <summary>
            <para>Describes an service to be deleted by using 
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DeleteServiceDescription.#ctor(System.Uri)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.DeleteServiceDescription" />. </para>
            </summary>
            <param name="serviceName">
            <para>URI of the service instance name.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.DeleteServiceDescription.ServiceName">
            <summary>
            <para>Gets the URI name of the service instance.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeleteServiceDescription.ForceDelete">
            <summary>
            <para>Gets the flag that specifies whether the service should be given a chance to gracefully clean up its state and close.</para>
            </summary>
            <value>
            <para>Flag that specifies whether the service should be given a chance to gracefully clean up its state and close.</para>
            <para>If the ForceDelete flag is set then the service won't be closed gracefully and stateful services may leak persisted state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceFromTemplateDescription">
            <summary>
            Describes a Service Fabric service to be created from Service Template that is pre-defined in the current Application Manifest.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceFromTemplateDescription.#ctor(System.Uri,System.Uri,System.String,System.String,System.Fabric.Description.ServicePackageActivationMode,System.Byte[])">
            <summary>
            Creates an instance of <see cref="T:System.Fabric.Description.ServiceFromTemplateDescription"/> with specified parameter.
            </summary>
            <param name="applicationName">The Service Fabric Name of the application under which the service will be created.</param>
            <param name="serviceName">Name of the service to create.</param>
            <param name="serviceDnsName">DNS name of the service to create.</param>
            <param name="serviceTypeName">Name of ServiceType. This has to be same as the ServiceTypeName specified in the Service Manifest.</param>
            <param name="servicePackageActivationMode">
            <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> to use for service creation.
            </param>
            <param name="initializationData">Initialization data that will be passed to service.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceFromTemplateDescription.ApplicationName">
            <summary>
            The Service Fabric Name of the application under which the service will be created.
            </summary>
            <value>
            Returns <see cref="T:System.Uri" /> representing Service Fabric application name.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceFromTemplateDescription.ServiceName">
            <summary>
            Name of the service to create.
            </summary>
            <value>
            Returns <see cref="T:System.Uri" /> representing Service Fabric service name.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceFromTemplateDescription.ServiceDnsName">
            <summary>
            The DNS name of the service to create.
            </summary>
            <value>
            Returns <see cref="T:System.String" /> representing Service Fabric service DNS name.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceFromTemplateDescription.ServiceTypeName">
            <summary>
            Name of the service type to create.
            </summary>
            <value>
            Returns <see cref="T:System.String" /> representing Service Fabric service type name.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceFromTemplateDescription.ServicePackageActivationMode">
            <summary>
            Gets or sets the <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> of service.
            </summary>
            <value>
             An <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> enumeration.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceFromTemplateDescription.InitializationData">
            <summary>
            Gets or sets the initialization data that will be passed to service group instances or replicas when they are created.
            </summary>
            <value>
            <para>Returns an array of <see cref="T:System.Byte" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupFromTemplateDescription">
            <summary>
            Describes a Service Group to be created from a Service Group Template that is pre-defined in the current Application Manifest.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupFromTemplateDescription.#ctor(System.Uri,System.Uri,System.String,System.Fabric.Description.ServicePackageActivationMode,System.Byte[])">
            <summary>
            Creates an instance of <see cref="T:System.Fabric.Description.ServiceGroupFromTemplateDescription"/> with specified parameter.
            </summary>
            <param name="applicationName">Application name for the Service Group.</param>
            <param name="serviceName">>Service name for the Service Group.</param>
            <param name="serviceTypeName">Service Type Name for the Service Group.</param>
            <param name="servicePackageActivationMode">
            <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> to use for service group creation.
            </param>
            <param name="initializationData">Initialization data that will be passed to Service Group.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupFromTemplateDescription.ApplicationName">
            <summary>
            Name of the application to which service group belongs.
            </summary>
            <value>
            The <see cref="T:System.Uri" /> representing Service Fabric application name.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupFromTemplateDescription.ServiceName">
            <summary>
            Name of the service group to create.
            </summary>
            <value>
            The <see cref="T:System.Uri" /> representing Service Fabric service group name.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupFromTemplateDescription.ServiceTypeName">
            <summary>
            Name of the service to create.
            </summary>
            <value>
            The <see cref="T:System.String" /> representing Service Fabric service type name.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupFromTemplateDescription.ServicePackageActivationMode">
            <summary>
            Gets or sets the <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> of service group.
            </summary>
            <value>
            A <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> enumeration.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupFromTemplateDescription.InitializationData">
            <summary>
            <para> Gets or sets the initialization data that will be passed to service instances or replicas when they are created. </para>
            </summary>
            <value>
            <para>Returns an array of <see cref="T:System.Byte" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DeployedApplicationHealthQueryDescription">
            <summary>
            <para>Describes query input for getting <see cref="T:System.Fabric.Health.DeployedApplicationHealth" />. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DeployedApplicationHealthQueryDescription.#ctor(System.Uri,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.DeployedApplicationHealthQueryDescription" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A required parameter can�t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A required parameter can't be empty.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate the deployed application health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy or the parent application to evaluate the deployed application.
            The application health policy is specified in the application manifest.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the deployed application. 
            Only events that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter" /> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the application aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.DeployedServicePackagesFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState" /> children. Only children that 
            match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStatesFilter" /> used to filter returned deployed service packages.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the deployed application aggregated health state.
            If the filter is not specified, all deployed service package children of the deployed application are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.HealthStatisticsFilter">
            <summary>
            Gets or sets the health statistics filter.
            </summary>
            <value>The health statistics filter.</value>
            <remarks>
            <para>
            The health statistics filter controls whether the <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/> returned by the query
            contains the deployed application health statistics. If not specified, the statistics are included.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkCodePackageListAsync(System.Fabric.Description.DeployedNetworkCodePackageQueryDescription)" />.</para>
            </summary> 
        </member>
        <member name="M:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription.NodeName">
            <summary>
            Gets or sets the node name to query for.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription.NetworkName">
            <summary>
            Gets or sets the network name to query for.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription.ApplicationNameFilter">
            <summary>
            <para>Gets or sets the URI name of the application used to filter the code packages to query for.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription.ServiceManifestNameFilter">
            <summary>
            <para>Gets or sets the service manifest name used to filter the code packages to query for.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DeployedNetworkCodePackageQueryDescription.CodePackageNameFilter">
            <summary>
            <para>Gets or sets the code package name used to filter the code packages to query for.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.DeployedNetworkQueryDescription">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkListAsync(System.Fabric.Description.DeployedNetworkQueryDescription)" />.</para>
            </summary> 
        </member>
        <member name="M:System.Fabric.Description.DeployedNetworkQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.DeployedNetworkQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DeployedNetworkQueryDescription.NodeName">
            <summary>
            Gets or sets the node name to query for.        
            </summary>
        </member>
        <member name="T:System.Fabric.Description.DeployedServicePackageHealthQueryDescription">
            <summary>
            <para>Describes the query input for getting <see cref="T:System.Fabric.Health.DeployedServicePackageHealth" />. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.#ctor(System.Uri,System.String,System.String)">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.Description.DeployedServicePackageHealthQueryDescription" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="serviceManifestName">
            <para>The service manifest name. Cannot be null or empty.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A required parameter can't be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A required parameter can't be empty.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.#ctor(System.Uri,System.String,System.String,System.String)">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.Description.DeployedServicePackageHealthQueryDescription" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="serviceManifestName">
            <para>The service manifest name. Cannot be null or empty.</para>
            </param>
            <param name="servicePackageActivationId">
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package.
            ServicePackageActivationId of a deployed service package can obtained by using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A required parameter can't be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A required parameter can't be empty.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String" /> representing the node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String" /> representing the service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of the service package.
            </summary>
            <value>
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package. 
            ServicePackageActivationId of a deployed service package can obtained by using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in which case
            it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>. 
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate the health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the deployed service package health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the deployed service 
            package. Only events that match the filter will be returned. All events will be used to evaluate the aggregated health state.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter" /> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the entity aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="M:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.DllHostEntryPointDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DllHostEntryPointDescription.IsolationPolicy">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.DllHostIsolationPolicy" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DllHostEntryPointDescription.HostedDlls">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.DllHostEntryPointDescription.ToString">
            <summary>
            <para> Reserved for future use.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedDllDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DllHostHostedDllDescription.#ctor(System.Fabric.Description.DllHostHostedDllKind)">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <param name="kind">
            <para>Reserved for future use.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.DllHostHostedDllDescription.Kind">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.DllHostHostedDllKind" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedUnmanagedDllDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DllHostHostedUnmanagedDllDescription.DllName">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.DllHostHostedUnmanagedDllDescription.ToString">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedManagedDllDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.DllHostHostedManagedDllDescription.AssemblyName">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.DllHostHostedManagedDllDescription.ToString">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedDllKind">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostHostedDllKind.Invalid">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostHostedDllKind.Unmanaged">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostHostedDllKind.Managed">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ComposeDeploymentDescriptionWrapper">
            <summary>
            <para>Describes a compose application to be created by using 
            <see cref="M:System.Fabric.FabricClient.ComposeDeploymentClient.CreateComposeDeploymentAsync(System.Fabric.Description.ComposeDeploymentDescriptionWrapper)" />.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ComposeDeploymentUpgradeDescriptionWrapper">
            <summary>
            <para>Describes a compose application to be created by using 
            <see cref="M:System.Fabric.FabricClient.ComposeDeploymentClient.UpgradeComposeDeploymentAsync(System.Fabric.Description.ComposeDeploymentUpgradeDescriptionWrapper)" />.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ComposeDeploymentRollbackDescriptionWrapper">
            <summary>
            <para>Describes a rollback of compose deployment upgrade by using
            <see cref="M:System.Fabric.FabricClient.ComposeDeploymentClient.RollbackComposeDeploymentUpgradeAsync(System.Fabric.Description.ComposeDeploymentRollbackDescriptionWrapper,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ComposeDeploymentRollbackDescriptionWrapper.#ctor(System.String)">
            <summary>
            <para>Creates an instance of <see cref="T:System.Fabric.Description.ComposeDeploymentRollbackDescriptionWrapper" />. </para>
            </summary>
            <param name="deploymentName">
            <para>The name of compose deployment.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ComposeDeploymentRollbackDescriptionWrapper.DeploymentName">
            <summary>
            <para>Gets the name of the compose deployment.</para>
            </summary>
            <value>
            <para>The name of the compose deployment.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ComposeDeploymentStatusQueryDescriptionWrapper">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.QueryClient.GetComposeDeploymentStatusPagedListAsync(System.Fabric.Description.ComposeDeploymentStatusQueryDescriptionWrapper)" />.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.EndpointResourceDescription">
            <summary>
            <para>Describes the endpoint resource.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.EndpointResourceDescription.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Description.EndpointResourceDescription"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Name">
            <summary>
            <para>Gets or sets the name of the endpoint.</para>
            </summary>
            <value>
            <para>The name of the endpoint.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Protocol">
            <summary>
            <para>Gets the protocol used by this endpoint.</para>
            </summary>
            <value>
            <para>The protocol used by this endpoint.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.EndpointType">
            <summary>
            <para>Gets the type of the endpoint.</para>
            </summary>
            <value>
            <para>The type of the endpoint.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Certificate">
            <summary>
            <para>Do not use. This property is not supported.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Port">
            <summary>
            <para>Gets the port assigned for this endpoint.</para>
            </summary>
            <value>
            <para>The port assigned for this endpoint.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.UriScheme">
            <summary>
            <para>Gets the Uri scheme for the endpoint.</para>
            </summary>
            <value>
            <para>The uri scheme for endpoint like http, https ftp.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.PathSuffix">
            <summary>
            <para>Gets the Path suffix for the endpoint.</para>
            </summary>
            <value>
            <para>The path suffix for endpoint like /myapp1.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.CodePackageName">
            <summary>
            <para>
            Gets the name of code package that was specified in the CodePackageRef attribute
            of endpoint resource in service manifest.
            </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
            <remarks>
            If no CodePackageRef attribute was specified in endpoint resource in service manifest,
            its value is empty string.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.IpAddressOrFqdn">
            <summary>
            <para>
            Gets the IP address associated with this endpoint resource.
            </para>
            </summary>
            <value>
            <para>Returns he IP address associated with this endpoint resource.</para>
            </value>
            <remarks>
            <para>
            If CodePackageRef attribute was specified in endpoint resource in service manifest and 
            referenced code package <see cref="P:System.Fabric.Description.EndpointResourceDescription.CodePackageName"/> had specified network settings for
            explicit IP address assignment, its value is the IP address that was assigned to this
            code package by Service Fabric runtime. For all other cases, its value is the IP address
            (or FQDN) of the machine on which service is running.
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.EndpointProtocol">
            <summary>
            <para>Enumerates the kinds of endpoint protocols.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointProtocol.Http">
            <summary>
            <para>Indicates an HTTP endpoint.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointProtocol.Https">
            <summary>
            <para>Indicates an HTTPS endpoint.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointProtocol.Tcp">
            <summary>
            <para>Indicates a TCP endpoint.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointProtocol.Udp">
            <summary>
            <para>Indicates a UDP endpoint.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.EndpointType">
            <summary>
            <para>Enumerates the kinds of endpoint types.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointType.Input">
            <summary>
            <para>Indicates an external facing endpoint.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointType.Internal">
            <summary>
            <para>Indicates an internal facing endpoint.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.EntryPointDescription">
            <summary>
            <para>Describes an entry point that is associated with a code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.EntryPointDescription.#ctor(System.Fabric.Description.CodePackageEntryPointKind)">
            <summary>
            <para>Creates and initializes an <see cref="P:System.Fabric.Description.EntryPointDescription.Kind" /> object with the specified 
            <see cref="T:System.Fabric.Description.CodePackageEntryPointKind" />.</para>
            </summary>
            <param name="kind">
            <para>A <see cref="T:System.Fabric.Description.CodePackageEntryPointKind" /> specifying the type of entry point.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.EntryPointDescription.Kind">
            <summary>
            <para>Indicates an entry point type.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.CodePackageEntryPointKind" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ExeHostEntryPointDescription">
            <summary>
            <para>Provides information about the executable entry point.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.Program">
            <summary>
            <para>Gets or sets the executable name as specified in the service manifest.</para>
            </summary>
            <value>
            <para>The executable name as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.Arguments">
            <summary>
            <para>Gets or sets the arguments passed to the executable as specified in the service manifest. </para>
            </summary>
            <value>
            <para>The arguments passed to the executable as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.WorkingFolder">
            <summary>
            <para>Gets or sets the working folder for the executable as specified in the service manifest.</para>
            </summary>
            <value>
            <para>The working folder for the executable as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.IsExternalExecutable">
            <summary>
            <para>Gets a value that indicates whether the program is an external executable outside of the code package.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the program is an external executable outside of the code package. 
            Windows cluster loads external executables from the sequence of: working folder, Windows directory, and PATH environment variable.
            Linux cluster loads external executables from the standard directory. By default, the directory is "/usr/bin". It can be modifed from "LinuxExternalExecutablePath" config.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.ConsoleRedirectionEnabled">
            <summary>
            <para>Gets or sets a value that indicates whether to enable or disable console redirection for executables. Default is <languageKeyword>false</languageKeyword>.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> to enable console redirection for executables; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.ConsoleRedirectionFileRetentionCount">
            <summary>
            <para>Gets or sets the maximum number of files used for console redirection before overwriting content in circular way. </para>
            </summary>
            <value>
            <para>The maximum number of files used for console redirection before overwriting content in circular way.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.ConsoleRedirectionFileMaxSizeInKb">
            <summary>
            <para>Gets or sets the maximum size in KB for console redirection file.</para>
            </summary>
            <value>
            <para>The maximum size in KB for console redirection file.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.PeriodicInterval">
            <summary>
            <para>Gets or sets the time period, if executable needs to be activated periodically. </para>
            </summary>
            <value>
            <para>The time period the executable needs to be activated periodically.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ExeHostEntryPointDescription.ToString">
            <summary>
            <para>Gets the string representation of this entry point.</para>
            </summary>
            <returns>
            <para>The string representation of this entry point.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ExeHostWorkingFolder">
            <summary>
            <para>Enumerates the possible start folder types.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.Invalid">
            <summary>
            <para>Do not use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.Work">
            <summary>
            <para>Indicates that the start folder is the application’s work folder.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.CodePackage">
            <summary>
            <para>Indicates that the start folder is the Code Package’s folder.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.CodeBase">
            <summary>
            <para>Indicates that the start folder is from where the executable / program that is specified in the ExeHost is loaded. This folder can differ 
            from the Code Package folder if there are multiple levels in the Code Package folder and a specified program is from one of the nested folders.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription">
            <summary>
            <para>Describes a provision application type operation which uses an application package from an external store,
            as opposed to a package uploaded to the Service Fabric image store.
            The application type can be provisioned using
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescriptionBase,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription.SfpkgExtension">
            <summary>
            <para>
            The extension for a Service Fabric application package compressed into a single file.
            Service Fabric recognizes files with this extension as application packages
            and can provision the application type contained within.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription.#ctor(System.Uri,System.String,System.String)">
            <summary>
            <para>Creates an instance of <see cref="T:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription" />
            using the download URI of the 'sfpkg' application package
            and the application type information.</para>
            </summary>
            <param name="applicationPackageDownloadUri">
            <para>
            The path to the '.sfpkg' application package from where the application package can be downloaded using HTTP or HTTPS protocols.
            </para>
            </param>
            <param name="applicationTypeName"><para>The application type name, defined in the application manifest.</para></param>
            <param name="applicationTypeVersion"><para>The application type version, defined in the application manifest.</para></param>
            <remarks>
            <para>
            The application package can be stored in an external store that provides GET operation to download the file.
            Supported protocols are HTTP and HTTPS, and the path must allow READ access.
            </para>
            <para>
            The download of the application package may take a long time, depending on its size and the network speed.
            We recommend you set the async parameter to <languageKeyword>true</languageKeyword>.
            In this case, the provision operation returns when the request is accepted by the system and the provision operation continues without any timeout limit.
            By default, async is set to false.
            </para>
            <para>
            You can query the provision operation state
            using <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync" />.
            </para>
            <para>
            The pending provision operation can be interrupted using <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.Fabric.Description.UnprovisionApplicationTypeDescription)" />.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription.ApplicationTypeName">
            <summary>
            <para>Gets the application type name.
            </para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
            <remarks><para>
            The application type name represents the name of the application type found in the application manifest.
            </para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription.ApplicationTypeVersion">
            <summary>
            <para>Gets the application type version.
            </para>
            </summary>
            <value>
            <para>The application type version.</para>
            </value>
            <remarks><para>
            The application type version represents the version of the application type found in the application manifest.
            </para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription.ApplicationPackageDownloadUri">
            <summary>
            <para>
            Gets the path to the '.sfpkg' application package from where the application package can be downloaded using HTTP or HTTPS protocols.
            </para>
            </summary>
            <value>
            The path to the '.sfpkg' application package from where the application package can be downloaded using HTTP or HTTPS protocols.
            </value>
        </member>
        <member name="M:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription.ToString">
            <summary>
            Gets a string representation of the provision application type operation.
            </summary>
            <returns>A string representation of the provision application type operation.</returns>
        </member>
        <member name="T:System.Fabric.Description.FabricUpgradeDescription">
            <summary>
            <para>Represents a class to encapsulate a Service Fabric upgrade description.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.FabricUpgradeDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.FabricUpgradeDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeDescription.TargetCodeVersion">
            <summary>
            <para>Gets or sets the target code version for the Service Fabric upgrade.</para>
            </summary>
            <value>
            <para>The target code version for the Service Fabric upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeDescription.TargetConfigVersion">
            <summary>
            <para>Gets or sets the target configuration version for the Service Fabric upgrade.</para>
            </summary>
            <value>
            <para>The target configuration version for the Service Fabric upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeDescription.UpgradePolicyDescription">
            <summary>
            <para>Gets or sets the upgrade policy description.</para>
            </summary>
            <value>
            <para>The upgrade policy description.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.FabricUpgradeUpdateDescription">
            <summary>
            <para>Used to modify the upgrade parameters describing the behavior cluster upgrades.
            See <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.FabricUpgradeUpdateDescription.#ctor">
            <summary>
            <para>Creates an instance of the <see cref="T:System.Fabric.Description.FabricUpgradeUpdateDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeUpdateDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.HealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The cluster health policy used to evaluate cluster health during upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeUpdateDescription.EnableDeltaHealthEvaluation">
            <summary>
            <para>Gets or sets a flag indicating whether delta evaluation is enabled.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> when delta health evaluation is enabled; <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
            <remarks>
            <para>When delta evaluation is enabled, the cluster health evaluation ensures that the degradation of health respects tolerated limits,
            both globally, across all nodes, and per each upgrade domain that is evaluated. The tolerated thresholds are specified in 
            <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy"/>.</para>
            <para>Delta evaluation is disabled by default.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeUpdateDescription.UpgradeHealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.UpgradeHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The cluster upgrade health policy used to evaluate cluster health during upgrade.</para>
            </value>
            <remarks><para>
            The upgrade health policy is used when <see cref="P:System.Fabric.Description.FabricUpgradeUpdateDescription.EnableDeltaHealthEvaluation"/> is set to <languageKeyword>true</languageKeyword>. 
            The delta evaluation is disabled by default.
            </para></remarks>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeUpdateDescription.ApplicationHealthPolicyMap">
            <summary>
            Gets or sets the application health policies used to evaluate the applications health as part of
            the cluster health evaluation. 
            </summary>
            <value>The application health policies used to evaluate the health of the specified applications.</value>
            <remarks>
            <para>
            During cluster upgrade, the health of the cluster is evaluated to determine whether the cluster is still healthy. 
            As part of the cluster health evaluation, all applications are evaluated and aggregated in the cluster health.
            The application health policy map is used to evaluate the applications as part of the cluster evaluation.
            </para>
            <para>
            Each entry specifies as key the application name and as value an <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> 
            used to evaluate the application health of that application.
            </para>
            <para>
            If an application is not specified in the map, the ApplicationHealthPolicy found in the application manifest will be used for evaluation. </para>
            <para>
            The custom application health policies are also used to evaluate cluster health during upgrade, through
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/> or
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/>.
            </para>
            <para>
            The map is null by default, which means that the update doesn't apply to previously set application health policies.
            To update the application health policies, first create the map then add entries for desired applications.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ImageStoreListDescription">
            <summary>
            <para>Provides information about how to get the image store content </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ImageStoreListDescription.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            <para>Creates an instance of the <see cref="T:System.Fabric.Description.ImageStoreListDescription"/> class.</para>
            </summary>
            <param name="remoteLocation">
            <para>Relative path to file or folder in the image store from its root.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token returned by a previous query.</para>
            </param>
            <param name="isRecursive">
            <para>Specifies if the listing should loop through all files in the given relative path.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ImageStoreListDescription.RemoteLocation">
            <summary>
            <para>Gets the image store relative path to list.</para>
            </summary>
            <value>
            <para>Relative path to the file or folder in the image store from its root.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ImageStoreListDescription.ContinuationToken">
            <summary>
            <para>Gets the token that can be used by queries to get the next page.</para>
            </summary>
            <value>
            <para>The token that can be used by queries to get the next page.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ImageStoreListDescription.IsRecursive">
            <summary>
            <para>Specifies if the listing should loop through all files in the given relative path.</para>
            </summary>
            <value>
            <para>The flag that indicates whether the listing should loop through all files in the given relative path.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.InstanceLifecycleDescription">
            <summary>
            <para>
            Class for describing a instance lifecycle behavior.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.InstanceLifecycleDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.InstanceLifecycleDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.InstanceLifecycleDescription.IsRestoreReplicaLocationAfterUpgradeSpecified">
            <summary>
            <para> Indicator whether the IsSingletonReplicaMoveAllowedDuringUpgrade parameter is specified. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.InstanceLifecycleDescription.RestoreReplicaLocationAfterUpgrade">
            <summary>
            <para>Gets/sets RestoreReplicaLocationAfterUpgrade parameter.</para>
            </summary>
            <value>
            <para>If RestoreReplicaLocationAfterUpgrade isn't set it will take default value set in the same parameter on the cluster level.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.InstanceLifecycleDescription.ToString">
            <summary>
            <para>
            Returns a string of the InstanceLifecycleDescription.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.LocalNetworkConfigurationDescription">
            <summary>
            <para>Specifies the configuration of a local container network described by <see cref="T:System.Fabric.Description.LocalNetworkDescription" /></para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.LocalNetworkConfigurationDescription.#ctor">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.LocalNetworkConfigurationDescription" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.LocalNetworkConfigurationDescription.#ctor(System.String)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.LocalNetworkConfigurationDescription" /> with network address prefix.</para>
            </summary>
            <param name="networkAddressPrefix">
            <para>Address prefix of the cotnainer network.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.LocalNetworkConfigurationDescription.NetworkAddressPrefix">
            <summary>
            <para>Gets or sets the network address prefix.</para>
            </summary>
            <value>
            <para>Address prefix of the container network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.LocalNetworkDescription">
            <summary>
            <para>Describes a local container network</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.LocalNetworkDescription.#ctor">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.LocalNetworkDescription" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.LocalNetworkDescription.#ctor(System.Fabric.Description.LocalNetworkConfigurationDescription)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.LocalNetworkDescription" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.LocalNetworkDescription.NetworkConfiguration">
            <summary>
            <para>Gets or sets configuration of the container network.</para>
            </summary>
            <value>
            <para>Configuration of the container network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.NetworkDescription">
            <summary>
            <para>Describes the base class for network descriptions.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NetworkDescription.#ctor(System.Fabric.NetworkType)">
            <summary>
            <para>Base class constructor used by specific network description classes.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NetworkDescription.NetworkType">
            <summary>
            <para>Gets type of the container network.</para>
            </summary>
            <value>
            <para>Type of the container network.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.NetworkQueryDescription">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync(System.Fabric.Description.NetworkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary> 
        </member>
        <member name="M:System.Fabric.Description.NetworkQueryDescription.#ctor">
            <summary>
            <para>Base class constructor used by specific network query description classes.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NetworkQueryDescription.NetworkNameFilter">
            <summary>
            <para>Gets or sets the network name used to filter the container networks to query for.
            The network with this network name will be returned.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NetworkQueryDescription.NetworkStatusFilter">
            <summary>
            <para>Gets or sets the network status used to filter the container networks to query for.
            The networks with this network status will be returned.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.NetworkApplicationQueryDescription">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkApplicationListAsync(System.Fabric.Description.NetworkApplicationQueryDescription)" />.</para>
            </summary> 
        </member>
        <member name="M:System.Fabric.Description.NetworkApplicationQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.NetworkApplicationQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NetworkApplicationQueryDescription.NetworkName">
            <summary>
            <para>Gets or sets name of the network to query for.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NetworkApplicationQueryDescription.ApplicationNameFilter">
            <summary>
            Gets or sets the application name used to filter the applications to query for.
            The application that is of this application name will be returned.
            </summary>
        </member>
        <member name="T:System.Fabric.Description.NetworkNodeQueryDescription">
            <summary>
            <para>Represents the query input used by <see cref="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkNodeListAsync(System.Fabric.Description.NetworkNodeQueryDescription)" />.</para>
            </summary> 
        </member>
        <member name="M:System.Fabric.Description.NetworkNodeQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.NetworkNodeQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NetworkNodeQueryDescription.NetworkName">
            <summary>
            <para>Gets or sets name of the network to query for.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NetworkNodeQueryDescription.NodeNameFilter">
            <summary>
            Gets or sets the node name used to filter the nodes to query for.
            The node that is of this node name will be returned.
            </summary>
        </member>
        <member name="T:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription">
            <summary>
            <para>Describes the behavior to use when performing an application upgrade.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the health policy to use when performing health checks against an upgrading application.</para>
            </summary>
            <value>
            <para>The health policy to use when performing health checks against an upgrading application.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription">
            <summary>
            <para>Describes the behavior to use when performing a cluster upgrade.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the health policy to use when performing health checks against an upgrading cluster.</para>
            </summary>
            <value>
            <para>The health policy to use when performing health checks against an upgrading cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.EnableDeltaHealthEvaluation">
            <summary>
            <para>Gets or sets a flag indicating whether delta evaluation is enabled.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> when delta health evaluation is enabled; <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
            <remarks>
            <para>When delta evaluation is enabled, the cluster health evaluation ensures that the degradation of health respects tolerated limits,
            both globally, across all nodes, and per each upgrade domain that is evaluated. The tolerated thresholds are specified in 
            <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy"/>.</para>
            <para>Delta evaluation is disabled by default.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.UpgradeHealthPolicy">
            <summary>
            <para>Gets or sets the delta health policy to use when performing health checks against an upgrading cluster.</para>
            </summary>
            <value>
            <para>The delta health policy to use when performing health checks against an upgrading cluster.</para>
            </value>
            <remarks><para>
            The upgrade health policy is used when <see cref="P:System.Fabric.Description.FabricUpgradeUpdateDescription.EnableDeltaHealthEvaluation"/> is set to <languageKeyword>true</languageKeyword>. 
            Delta evaluation is disabled by default.
            </para></remarks>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.ApplicationHealthPolicyMap">
            <summary>
            Gets or sets the application health policies used to evaluate the applications health as part of
            the cluster health evaluation. 
            </summary>
            <value>The application health policies used to evaluate the health of the specified applications.</value>
            <remarks>
            <para>
            During cluster upgrade, the health of the cluster is evaluated to determine whether the cluster is still healthy. 
            As part of the cluster health evaluation, all applications are evaluated and aggregated in the cluster health.
            The application health policy map is used to evaluate the applications as part of the cluster evaluation.
            </para>
            <para>
            Each entry specifies as key the application name and as value an <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> 
            used to evaluate the application health of that application.</para>
            <para>
            If an application is not specified in the map, the ApplicationHealthPolicy found in the application manifest will be used for evaluation. </para>
            <para>
            The custom application health policies are also used to evaluate cluster health during upgrade, through
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/> or
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/>.</para>
            <para>
            The map is empty by default.
            </para></remarks>
        </member>
        <member name="T:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription">
            <summary>
            <para>Specifies the behavior to use when performing a monitored application or cluster upgrade.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription.MonitoringPolicy">
            <summary>
            <para>Gets or sets the monitoring policy to use when performing an upgrade.</para>
            </summary>
            <value>
            <para>The monitoring policy to use when performing an upgrade.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.NamedPartitionSchemeDescription">
            <summary>
            <para>Describes the named partition scheme of the service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NamedPartitionSchemeDescription.#ctor">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NamedPartitionSchemeDescription.PartitionNames">
            <summary>
            <para>Gets the list of names that represent each partition.</para>
            </summary>
            <value>
            <para>The list of names that represent each partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.NamedRepartitionDescription">
            <summary>
            <para>Describes partitioning changes for an existing service of partition scheme type <see cref="F:System.Fabric.Description.PartitionScheme.Named" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NamedRepartitionDescription.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Initializes a new instance of this class.</para>
            </summary>
            <param name="namesToAdd">
            <para>
            A list of partition names to add to the service.
            </para>
            </param>
            <param name="namesToRemove">
            <para>
            A list of partition names to remove from the service.
            </para>
            </param>
            <remarks>
            <para>
            Either <paramref name="namesToAdd"/> or <paramref name="namesToRemove" /> must be non-empty.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.NamedRepartitionDescription.NamesToAdd">
            <summary>
            <para>Gets the list of partition names to add to the service.</para>
            </summary>
            <value>
            <para>The list of partition names to add.</para>
            </value>
            <remarks>
            <para>
            Note that no data migration is performed when adding a new partition name to stateful services.
            The newly added partition will have no user data.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.NamedRepartitionDescription.NamesToRemove">
            <summary>
            <para>Gets the list of partition names to remove from the service.</para>
            </summary>
            <value>
            <para>The list of partition names to remove.</para>
            </value>
            <remarks>
            <para>
            Note that removing a partition name from a stateful service results in the permanent 
            loss of all data stored in that partition. No migration of data is performed during
            the removal and the operation is not reversible. Re-adding a previously removed
            partition name results in a new partition containing no user data.
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.NodeHealthQueryDescription">
            <summary>
            <para>Describes query input for getting <see cref="T:System.Fabric.Health.NodeHealth" />. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NodeHealthQueryDescription.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.NodeHealthQueryDescription" /> class.</para>
            </summary>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para>A required parameter can't be null or empty.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.NodeHealthQueryDescription.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.NodeHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ClusterHealthPolicy" /> used to evaluate the node health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ClusterHealthPolicy" /> used to evaluate the node health.</para>
            </value>
            <remarks><para>If not specified, the health store uses the cluster health policy from the manifest (if exists) or the default, strict health policy.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.NodeHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the node. Only events 
            that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The filter for the health event.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the node aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="M:System.Fabric.Description.NodeHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.NodeQueryDescription">
            <summary>
            <para>Describes a set of filters used when running the query
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/>.</para>
            </summary>
            <remarks>
            <para>This query description can be customized by setting individual properties.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.NodeQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.NodeQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NodeQueryDescription.NodeNameFilter">
            <summary>
            <para>Gets or sets the name of the node to query for.</para>
            </summary>
            <value>
            <para>The full name of node to query for.</para>
            </value>
            <remarks>
            <para>The node name is a case-sensitive exact match. For example, "Test" will not match "TestNode".
            Gets all nodes if the node name filter is not set.
            If the node name does not match any node on the cluster, an empty list is returned.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.NodeQueryDescription.NodeStatusFilter">
            <summary>
            <para>Gets or sets the status of the node to filter by.</para>
            </summary>
            <value>
            <para>The node status of the nodes to get details for.</para>
            </value>
            <remarks>
            <para>This describes the state of the node, such as up or down.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.NodeQueryDescription.ToString">
            <summary>
            Overrides ToString() method to print all content of the query description.
            </summary>
            <returns>
            Returns a string containing all the properties of the query description.
            </returns>
        </member>
        <member name="T:System.Fabric.Description.PackageDescription">
            <summary>
            <para>Represents a base class for all package descriptions.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.Name">
            <summary>
            <para>Gets the name of the package.</para>
            </summary>
            <value>
            <para>The name of the package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.Version">
            <summary>
            <para>Gets the version of the package.</para>
            </summary>
            <value>
            <para>The version of the package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.ServiceManifestName">
            <summary>
            <para>Gets the name of the service manifest.</para>
            </summary>
            <value>
            <para>The name of the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.ServiceManifestVersion">
            <summary>
            <para>Gets the service manifest version.</para>
            </summary>
            <value>
            <para>The service manifest version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.Path">
            <summary>
            <para>Gets the path to the package.</para>
            </summary>
            <value>
            <para>The path to the package.</para>
            </value>
            <remarks>This property is obsolete.
            Use Path property in <see cref="T:System.Fabric.CodePackage"/>, <see cref="T:System.Fabric.ConfigurationPackage"/> or <see cref="T:System.Fabric.DataPackage"/> types.</remarks>
        </member>
        <member name="T:System.Fabric.Description.PartitionHealthQueryDescription">
            <summary>
            <para>Describes query input for getting <see cref="T:System.Fabric.Health.PartitionHealth" />. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.PartitionHealthQueryDescription.#ctor(System.Guid)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.Description.PartitionHealthQueryDescription" /> class.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.PartitionId">
            <summary>
            <para>Gets or sets the partition identifier.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Guid" /> representing the partition identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate partition health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the partition health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the partition. Only 
            events that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter" /> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the partition aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.ReplicasFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.ReplicaHealthState" /> children. Only children that match the filter 
            will be returned. All children will be used to evaluate the partition aggregated health state.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ReplicaHealthStatesFilter" /> used to filter returned replicas.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the partition aggregated health state.
            If the filter is not specified, all partition children are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.HealthStatisticsFilter">
            <summary>
            Gets or sets the health statistics filter.
            </summary>
            <value>The health statistics filter.</value>
            <remarks>
            <para>
            The health statistics filter controls whether the <see cref="T:System.Fabric.Health.PartitionHealth"/> returned by the query
            contains the partition health statistics. If not specified, the statistics are included.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PartitionHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.ProvisionApplicationTypeDescription">
            <summary>
            <para>Describes a provision application type operation which uses an application package copied to a relative path in the image store.
            The application type can be provisioned using
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescriptionBase,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ProvisionApplicationTypeDescription.#ctor(System.String)">
            <summary>
            <para>Creates an instance of <see cref="T:System.Fabric.Description.ProvisionApplicationTypeDescription" />
            using the relative path to the application package in the image store.</para>
            </summary>
            <param name="buildPath">
            <para>The relative path to the application package in the image store specified during
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)"/>.</para>
            </param>
            <remarks>
            <para>
            The pending provision operation can be interrupted using <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.Fabric.Description.UnprovisionApplicationTypeDescription)" />.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath">
            <summary>
            <para>Gets the relative path to the application package in the image store specified during
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)"/>.</para>
            </summary>
            <value>
            <para>The application package build path.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ProvisionApplicationTypeDescription.ApplicationPackageCleanupPolicy">
            <summary>
            <para>Gets or sets the policy indicating the application package cleanup policy </para>
            </summary>
            <value>
            <para>The policy indicating whether or not the cleanup of the application package is determined by service fabric runtime or determined by the cluster wide setting (CleanupApplicationPackageOnProvisionSuccess).
            By default the value is to use cluster wide setting.</para>
            </value>
            <remarks>
            <para>If the value is <see cref="F:System.Fabric.Description.ApplicationPackageCleanupPolicy.Automatic"/>, then the service fabric runtime determines when to perform the application package cleanup.By default, cleanup is done after a successful provision.
            If the value is <see cref="F:System.Fabric.Description.ApplicationPackageCleanupPolicy.Manual"/>, then user has to explictly clean up the application package by using <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)"/>.
            If the value is <see cref="F:System.Fabric.Description.ApplicationPackageCleanupPolicy.Default"/>, then cluster configuration setting "CleanupApplicationPackageOnProvisionSuccess" determines how application package cleanup should occur.
            The application package that is referred to was previously uploaded to the incoming location using 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ProvisionApplicationTypeDescription.ToString">
            <summary>
            Gets a string representation of the provision application type operation.
            </summary>
            <returns>A string representation of the provision application type operation.</returns>
        </member>
        <member name="T:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase">
             <summary>
             <para>Represents the base class for provision application type classes.
             The provision description can be used to provision application types using
             <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescriptionBase,System.TimeSpan,System.Threading.CancellationToken)" />.
             </para>
             </summary>
             <remarks>
             <para>
             Supported types of provision operations are:
            �<list type="bullet">
            �<item><description><see cref="T:System.Fabric.Description.ProvisionApplicationTypeDescription"/></description></item>
            �<item><description><see cref="T:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription"/></description></item>
             </list>
             </para>
             </remarks>
        </member>
        <member name="M:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.#ctor(System.Fabric.Description.ProvisionApplicationTypeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase"/> class.
            </summary>
            <param name="kind">The kind of the provision application type operation.</param>
        </member>
        <member name="P:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.Kind">
            <summary>
            <para>Gets the kind of the provision application type operation.</para>
            </summary>
            <value>The kind of the provision application type operation.</value>
        </member>
        <member name="P:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.Async">
            <summary>
            <para>Gets or sets the flag indicating whether provisioning should occur asynchronously.</para>
            </summary>
            <value>
            <para>If this flag is false, then the behavior is equivalent to calling
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)" />. The timeout argument is applied to the provision operation itself and the returned task completes only when the provision operation completes in the system.</para>
            <para>If this flag is true, then the timeout argument is only applied to message delivery
            and the returned task completes once the system has accepted the request.
            The system will process the provision operation without any timeout limit and its state can be queried
            using <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync" />.
            The pending provision operation can be interrupted using <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ProvisionApplicationTypeKind">
            <summary>
            <para>Represents the provision application type kind,
            which gives information about how the application package is provisioned to image store.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ProvisionApplicationTypeKind.Invalid">
            <summary>
            <para>Indicates that the provision kind is invalid. This value is default and should not be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ProvisionApplicationTypeKind.ImageStorePath">
            <summary>
            <para>Indicates that the provision is for a package that was previously uploaded to the image store
            using <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan)"/>.
            The upload operation copied the application package to a image store relative path that
            must be provided to the provision operation.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ProvisionApplicationTypeKind.ExternalStore">
            <summary>
            <para>Indicates that the provision is for an application package that was previously uploaded to
            an external store.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.RepartitionDescription">
            <summary>
            <para>Describes partitioning changes for an existing service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.RepartitionDescription.#ctor(System.Fabric.Description.PartitionScheme)">
            <summary>
            <para>Initializes a new instance of this class.</para>
            </summary>
            <param name="kind">
            <para>
            The kind specifies the derived type of this instance.
            </para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.RepartitionDescription.PartitionKind">
            <summary>
            <para>Gets a value indicating the derived type of this instance.</para>
            </summary>
            <value>
            <para>The derived type of this instance.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.UnprovisionApplicationTypeDescription">
            <summary>
            <para>Describes an application type to be unprovisioned by using 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.Fabric.Description.UnprovisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UnprovisionApplicationTypeDescription.#ctor(System.String,System.String)">
            <summary>
            <para>Creates an instance of <see cref="T:System.Fabric.Description.UnprovisionApplicationTypeDescription" />
            used to unprovision an application type previously provisioned using
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescriptionBase)"/>.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The application type name to unprovision</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version to unprovision</para>
            </param>
            <remarks><para>
            The application type version and name are defined in the application manifest.
            They can be obtained using <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync"/>.
            </para></remarks>
        </member>
        <member name="P:System.Fabric.Description.UnprovisionApplicationTypeDescription.ApplicationTypeName">
            <summary>
            <para>Gets the application type name to unprovision.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
            <remarks><para>
            The application type name represents the name of the application type found in the application manifest.
            </para></remarks>
        </member>
        <member name="P:System.Fabric.Description.UnprovisionApplicationTypeDescription.ApplicationTypeVersion">
            <summary>
            <para>Gets the application type version to unprovision.</para>
            </summary>
            <value>
            <para>The application type version.</para>
            </value>
            <remarks><para>
            The application type version represents the version of the application type found in the application manifest.
            </para></remarks>
        </member>
        <member name="P:System.Fabric.Description.UnprovisionApplicationTypeDescription.Async">
            <summary>
            <para>Gets or sets the flag indicating whether unprovisioning should occur asynchronously.</para>
            </summary>
            <value>
            <para>If this flag is false, then the behavior is equivalent to calling <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)" />. The timeout argument is applied to the unprovision operation itself and the returned task completes only when the unprovision operation completes in the system.</para>
            <para>If this flag is true, then the timeout argument is only applied to message delivery and the returned task completes once the system has accepted the request. The system will process the unprovision operation without any timeout limit and its state can be queried using <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ReplicaHealthQueryDescription">
            <summary>
            <para>Describes the query input for getting <see cref="T:System.Fabric.Health.ReplicaHealth" />. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ReplicaHealthQueryDescription.#ctor(System.Guid,System.Int64)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.Description.ReplicaHealthQueryDescription" /> class.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The stateful service replica id or the stateless service instance.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.PartitionId">
            <summary>
            <para>Gets the partition identifier.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Guid" /> representing the partition identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.ReplicaOrInstanceId">
            <summary>
            <para>The stateful service replica id or stateless service instance.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Int64" /> representing the stateful service replica id or the stateless service instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the replica health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the replica. Only 
            events that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter" /> used to filter the events returned by query.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the replica aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="M:System.Fabric.Description.ReplicaHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.ReplicaLifecycleDescription">
            <summary>
            <para>
            Class for describing a replica lifecycle behavior.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ReplicaLifecycleDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ReplicaLifecycleDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ReplicaLifecycleDescription.IsIsSingletonReplicaMoveAllowedDuringUpgradeSpecified">
            <summary>
            <para> Indicator whether the IsSingletonReplicaMoveAllowedDuringUpgrade parameter is specified. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaLifecycleDescription.IsSingletonReplicaMoveAllowedDuringUpgrade">
            <summary>
            <para>Gets/sets IsSingletonReplicaMoveAllowedDuringUpgrade parameter.</para>
            </summary>
            <value>
            <para>If IsSingletonReplicaMoveAllowedDuringUpgrade isn't set it will take default value set in the same parameter on the cluster level.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaLifecycleDescription.IsRestoreReplicaLocationAfterUpgradeSpecified">
            <summary>
            <para> Indicator whether the RestoreReplicaLocationAfterUpgrade parameter is specified. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaLifecycleDescription.RestoreReplicaLocationAfterUpgrade">
            <summary>
            <para>Gets/sets RestoreReplicaLocationAfterUpgrade parameter.</para>
            </summary>
            <value>
            <para>If RestoreReplicaLocationAfterUpgrade isn't set it will take default value set in the same parameter on the cluster level.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ReplicaLifecycleDescription.ToString">
            <summary>
            <para>
            Returns a string of the ReplicaLifecycleDescription.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.RollingUpgradeMonitoringPolicy">
            <summary>
            <para>Represents a class to encapsulate a rolling upgrade monitoring policy.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.RollingUpgradeMonitoringPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.RollingUpgradeMonitoringPolicy" /> class.</para>
            </summary>
            <remarks>
            <para>The initialization sets the properties of the <see cref="T:System.Fabric.Description.RollingUpgradeMonitoringPolicy" /> class with the following defaults.</para>
            <para>Property</para>
            <para>Default value</para>
              <list type="table">
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction" />
                    </para>
                  </term>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.UpgradeFailureAction.Invalid" />
                    </para>
                    <para>This value must be changed or a <see cref="T:System.ArgumentException" /> will be thrown before the upgrade begins.</para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration" />
                    </para>
                  </term>
                  <description>
                    <para>
                      <see cref="F:System.TimeSpan.Zero" />
                    </para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration" />
                    </para>
                  </term>
                  <description>
                    <para>
                      <see cref="T:System.TimeSpan" /> value that defaults to 120 seconds.
                    </para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout" />
                    </para>
                  </term>
                  <description>
                    <para>600 seconds</para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout" />
                    </para>
                  </term>
                  <description>
                    <para>TimeSpan.FromSeconds(uint.MaxValue)</para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout" />
                    </para>
                  </term>
                  <description>
                    <para>TimeSpan.FromSeconds(uint.MaxValue)</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction">
            <summary>
            <para>Gets or sets the action to take if an upgrade fails. The default is <see cref="F:System.Fabric.UpgradeFailureAction.Invalid" />.</para>
            </summary>
            <value>
            <para>The action to take if an upgrade fails.</para>
            </value>
            <exception cref="T:System.ArgumentException">
            <para>The <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction" /> property is set to 
            <see cref="F:System.Fabric.UpgradeFailureAction.Invalid" />.</para>
            </exception>
            <remarks>
            <para>The <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction" /> property must be changed from the default 
            of <see cref="F:System.Fabric.UpgradeFailureAction.Invalid" /> or a <see cref="T:System.ArgumentException" /> will be thrown before the upgrade begins.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration">
            <summary>
            <para>Gets or sets the length of time to wait after completing an upgrade domain before performing health checks.</para>
            </summary>
            <value>
            <para>The length of time to wait after completing an upgrade domain before performing health checks.</para>
            </value>
            <remarks>
            <para>The default is <see cref="F:System.TimeSpan.Zero" />.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration">
            <summary>
            <para>Gets or sets the length of time that health checks must pass continuously before the upgrade proceeds 
            to the next upgrade domain.</para>
            </summary>
            <value>
            <para>The length of time that health checks must pass continuously.</para>
            </value>
            <remarks>
            <para>The default is 120 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout">
            <summary>
            <para>Gets or sets the length of time that health checks can fail continuously before the upgrade fails and the action specified by <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction" /> occurs.</para>
            </summary>
            <value>
            <para>The length of time that health checks can fail continuously.</para>
            </value>
            <remarks>
            <para>The default is 600 seconds. Setting <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout" /> 
            to <see cref="F:System.TimeSpan.Zero" /> will result in only a single health check.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout">
            <summary>
            <para>Gets or sets the length of time that the overall upgrade can take before the upgrade fails and the action specified by <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction" /> occurs.</para>
            </summary>
            <value>
            <para>The upgrade timeout.</para>
            </value>
            <remarks>
            <para>The default is TimeSpan.FromSeconds(uint.MaxValue).</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout">
            <summary>
            <para>Gets or sets the length of time that the processing of any upgrade domain can take before the upgrade fails and the action specified by <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction" /> occurs.</para>
            </summary>
            <value>
            <para>The timeout for any upgrade domain.</para>
            </value>
            <remarks>
            <para>The default is TimeSpan.FromSeconds(uint.MaxValue).</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.RollingUpgradePolicyDescription">
            <summary>
            <para>Description of the rolling upgrade policy.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.RollingUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.RollingUpgradePolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeMode">
            <summary>
            <para>Type: <see cref="T:System.Fabric.RollingUpgradeMode" />Specifies the types of upgrade (<see cref="T:System.Fabric.RollingUpgradeMode" />) to be 
            used for upgrading the application instance. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.RollingUpgradeMode" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.ForceRestart">
            <summary>
            Specifies if the service host should be restarted even when there are no code package changes as part of the upgrade. Set this flag to 
            true if the service cannot dynamically accept config or data package changes.
            </summary>
            <value>Returns <see cref="T:System.Boolean" />.</value>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeReplicaSetCheckTimeout">
            <summary>
            <para>Specifies the duration Service Fabric should wait before upgrading the services of an application instance
            in an upgrade domain if the services do not have quorum.</para>
            </summary>
            <value>
            <para>The duration Service Fabric should wait before upgrading the services of an application instance
            in an upgrade domain if the services do not have quorum.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.SortOrder">
            <summary>
            <para>Gets or sets the sort order for upgrade domains.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeSortOrder" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.InstanceCloseDelayDuration">
            <summary>
            <para>Duration to wait before a stateless instance which is impacted by application/cluster upgrade is closed, to allow the active requests to drain gracefully.
            This wait duration is effective only for the instances of those services which have a non-zero value configured for the InstanceCloseDelayDuration, and will override the pre-configured value.
            For details: <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCloseDelayDuration" /></para>
            </summary>
            <value></value>
        </member>
        <member name="T:System.Fabric.Description.RunAsPolicyDescription">
            <summary>
            <para>Describes the RunAsPolicy associated with a CodePackage specified in application manifest. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.RunAsPolicyDescription.UserName">
            <summary>
            <para>Gets or sets the UserName specified in RunAsPolicy associated with a CodePackage.</para>
            </summary>
            <value>
            <para>The UserName specified in RunAsPolicy associated with a CodePackage.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.SecurityGroupDescription">
            <summary>
            <para>Represents a description of a security group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.SecurityGroupDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.SecurityGroupDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.Name">
            <summary>
            <para>Gets the name of the group to be created as part of environment setup for an application.</para>
            </summary>
            <value>
            <para>The name of the group to be created as part of environment setup for an application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.Sid">
            <summary>
            <para>
            Gets the primary SecurityIdentifier for the SecurityGroup.
            </para>
            </summary>
            <value>
             The primary SecurityIdentifier for the SecurityGroup.
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.DomainGroupMembers">
            <summary>
            <para>Gets the domain groups to be added as members to this group.</para>
            </summary>
            <value>
            <para>The domain groups to be added as members to this group.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.SystemGroupMembers">
            <summary>
            <para>Gets the system groups to be added as members to this group.</para>
            </summary>
            <value>
            <para>The system groups to be added as members to this group.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.DomainUserMembers">
            <summary>
            <para>Gets the domain users to be added as members to this group.</para>
            </summary>
            <value>
            <para>The domain users to be added as members to this group.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.SecurityUserDescription">
            <summary>
            <para>Represents a description for a security user.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.SecurityUserDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.SecurityUserDescription" /> class. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.Name">
            <summary>
            <para>Gets the name of the user to be created as part of environment setup for the application manifest. </para>
            </summary>
            <value>
            <para>The name of the user to be created as part of environment setup for the application manifest. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.Sid">
            <summary>
            <para>
            Gets the primary SecurityIdentifier for the SecurityUser.
            </para>
            </summary>
            <value>
              The primary SecurityIdentifier for the SecurityUser
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.ParentSystemGroups">
            <summary>
            <para>Gets the local groups to which this user is to be added.</para>
            </summary>
            <value>
            <para>The local groups to which this user is to be added.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.ParentApplicationGroups">
            <summary>
            <para>Gets the parent groups in the security group description, to which this user is to be added. </para>
            </summary>
            <value>
            <para>The parent groups in the security group description, to which this user is to be added. </para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ManagedIdentityDescription">
            <summary>
            <para>Represents a description of a security identity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ManagedIdentityDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ManagedIdentityDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ManagedIdentityDescription.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ManagedIdentityDescription" /> class.</para>
            </summary>
            <param name="name"></param>
            <param name="principalId"></param>
        </member>
        <member name="P:System.Fabric.Description.ManagedIdentityDescription.Name">
            <summary>
            <para>Gets the name of an identity.</para>
            </summary>
            <value>
            <para>The name of the identity.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ManagedIdentityDescription.PrincipalId">
            <summary>
            <para>Gets the principal id of an identity.</para>
            </summary>
            <value>
            <para>The principal id of the identity.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ManagedIdentityDescriptionList">
            <summary>
            <para>Represents the list of application parameters applied to the current version of the application. Retrieved using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)" />.</para>
            <para>This class derives from a KeyedCollection whose string key is the name of the associated ApplicationParameter.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ManagedIdentityDescriptionList.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ManagedIdentityDescriptionList.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList" /> class.</para>
            </summary>
            <param name="comparer">
            <para>The equality comparer.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ManagedIdentityDescriptionList.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList" /> class.</para>
            </summary>
            <param name="comparer">
            <para>The equality comparer.</para>
            </param>
            <param name="dictionaryCreationThreshold">
            <para>The creation threshold.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ManagedIdentityDescriptionList.ToString">
            <summary>
            Overrides ToString() method.
            </summary>
            <returns>
            Returns a string that displays all applications parameters and their values.
            </returns>
        </member>
        <member name="M:System.Fabric.Description.ManagedIdentityDescriptionList.GetKeyForItem(System.Fabric.Description.ManagedIdentityDescription)">
            <summary>
            <para>Gets the key name for the specified application parameter.</para>
            </summary>
            <param name="item">
            <para>Application parameter for which to get the key.</para>
            </param>
            <returns>
            <para>Returns the key name.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ManagedApplicationIdentityDescription">
            <summary>
            <para>Provides an application parameter override to be applied when creating or upgrading an application.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ManagedApplicationIdentityDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ManagedApplicationIdentityDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ManagedApplicationIdentityDescription.ManagedIdentities">
            <summary>
            <para>Gets the name of the application parameter to override.</para>
            </summary>
            <value>
            <para>The name of the application parameter to override.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ManagedApplicationIdentityDescription.TokenServiceEndpoint">
            <summary>
            The token service endpoint managing the application identity.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ManagedApplicationIdentityDescription.ToString">
            <summary>
            Returns a string representation of the <see cref="T:System.Fabric.Description.ApplicationParameter" /> class.
            </summary>
            <returns>
            Returns a string that displays an application parameter with format "name" = "value" followed by a newline.
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServiceCorrelationDescription">
            <summary>
            <para>Creates a particular correlation between services.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceCorrelationDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceCorrelationDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceCorrelationDescription.ServiceName">
            <summary>
            <para>Gets or sets the name of the service that you want to establish the correlation relationship with.</para>
            </summary>
            <value>
            <para>The name of the service that you want to establish the correlation relationship with.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceCorrelationDescription.Scheme">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Description.ServiceCorrelationScheme" /> which describes the relationship between this 
            service and the service specified via <see cref="P:System.Fabric.Description.ServiceCorrelationDescription.ServiceName" />.</para>
            </summary>
            <value>
            <para>The service correlation scheme.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceCorrelationDescription.ToString">
            <summary>
            <para> 
            Returns a string of the ServiceCorrelationDescription in the form 'ServiceName', 'Scheme'
            </para>
            </summary>
            <returns>
            <para>A string representing the ServiceCorrelationDescription object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServiceTagsCollection">
            <summary>
            <para>
            Class for describing a service tags. 
            Every tags collection consists of tags required for placement, and tags required for service running.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceTagsCollection.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceTagsCollection" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceTagsCollection.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceTagsCollection" /> class with the specified mechanism and trigger. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceTagsCollection.TagsRequiredToPlace">
            <summary>
            <para>Gets service tags required to place.</para>
            </summary>
            <value>
            <para>Tags required to place associated with this service tags collection.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTagsCollection.TagsRequiredToRun">
            <summary>
            <para>Gets service tags required to run.</para>
            </summary>
            <value>
            <para>Tags required to run associated with this service tags collection.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ServiceTagsCollection.ToString">
            <summary>
            <para> 
            Returns a string of the ServiceTagsCollection.
            </para>
            </summary>
            <returns>
            <para>A string representing the Service tags object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ScalingPolicyDescription">
            <summary>
            <para>
            Class for describing a scaling policy. 
            Every scaling policy consists of a <see cref="T:System.Fabric.Description.ScalingTriggerDescription" /> which describes when scaling should occur and a <see cref="T:System.Fabric.Description.ScalingMechanismDescription" /> which describes how is scaling performed.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ScalingPolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ScalingPolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ScalingPolicyDescription.#ctor(System.Fabric.Description.ScalingMechanismDescription,System.Fabric.Description.ScalingTriggerDescription)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ScalingPolicyDescription" /> class with the specified mechanism and trigger. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ScalingPolicyDescription.ScalingMechanism">
            <summary>
            <para>Gets the scaling mechanism.</para>
            </summary>
            <value>
            <para>Scaling mechanism associated with this scaling policy description.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ScalingPolicyDescription.ScalingTrigger">
            <summary>
            <para>Gets the scaling trigger.</para>
            </summary>
            <value>
            <para>Scaling trigger associated with this scaling policy description.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ScalingPolicyDescription.ToString">
            <summary>
            <para> 
            Returns a string of the ScalingPolicyDescription.
            </para>
            </summary>
            <returns>
            <para>A string representing the AddRemoveIncrementalNamedPartitionScalingMechanism object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ScalingMechanismKind">
            <summary>
            <para>Enumerates the available mechanisms for scaling.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ScalingMechanismKind.Invalid">
            <summary>
            <para>All Service Fabric enumerations have a reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ScalingMechanismKind.ScalePartitionInstanceCount">
            <summary>
            <para>Indicates a mechanism for scaling where new instances are added or removed from a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ScalingMechanismKind.AddRemoveIncrementalNamedPartition">
            <summary>
            <para>Indicates a mechanism for scaling where new named partitions are added or removed from a service.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ScalingMechanismDescription">
            <summary>
            <para>
            Base class for describing different scaling mechanisms. Scaling mechanisms are a method of describing what should be done when a scaling operation is triggered.
            See <see cref="T:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism" /> and <see cref="T:System.Fabric.Description.PartitionInstanceCountScaleMechanism" /> as examples of scaling mechanisms.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ScalingMechanismDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ScalingMechanismDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ScalingMechanismDescription.#ctor(System.Fabric.Description.ScalingMechanismKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ScalingMechanismDescription" /> class of a particular kind.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ScalingMechanismDescription.Kind">
            <summary>
            <para>Gets the kind of the scaling mechanism.</para>
            </summary>
            <value>
            <para>Scaling mechanism kind associated with this scaling policy mechanism.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.PartitionInstanceCountScaleMechanism">
            <summary>
            <para>
            Represents a scaling mechanism for adding or removing instances of stateless service partition. 
            When this mechanism is used this will affect all partitions of a service and do independent scaling of each of them.
            Should be used with <see cref="T:System.Fabric.Description.AveragePartitionLoadScalingTrigger" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.PartitionInstanceCountScaleMechanism.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.PartitionInstanceCountScaleMechanism" /> class of a particular kind.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.PartitionInstanceCountScaleMechanism.MinInstanceCount">
            <summary>
            <para>Gets or sets the minimum number of instances which the service should have according to this scaling policy. </para>
            </summary>
            <value>
            <para>The minimum number of instances. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PartitionInstanceCountScaleMechanism.MaxInstanceCount">
            <summary>
            <para>Gets or sets the maximum number of instances which the service should have according to this scaling policy. </para>
            </summary>
            <value>
            <para>The maximum number of instances. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PartitionInstanceCountScaleMechanism.ScaleIncrement">
            <summary>
            <para>Gets or sets the amount of instances that should be added/removed when scaling is performed. </para>
            </summary>
            <value>
            <para>The number of instances by wich to perform the upshift/downshift. </para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.PartitionInstanceCountScaleMechanism.ToString">
            <summary>
            <para> 
            Returns a string representation of the PartitionInstanceCountScaleMechanism.
            </para>
            </summary>
            <returns>
            <para>A string representing the PartitionInstanceCountScaleMechanism object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism">
            <summary>
            <para>
            Represents a scaling mechanism for adding or removing named partitions of a service. 
            When this mechanism is used there will be new named partitions added or removed from this service.
            The expected schema of named partitions is "0","1",..."N-1" when N partitions are needed.
            Should be used with <see cref="T:System.Fabric.Description.AverageServiceLoadScalingTrigger" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism" /> class of a particular kind.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism.MinPartitionCount">
            <summary>
            <para>Gets or sets the minimum number of partitions which the service should have according to this scaling policy. </para>
            </summary>
            <value>
            <para>The minimum number of instances. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism.MaxPartitionCount">
            <summary>
            <para>Gets or sets the maximum number of partitions which the service should have according to this scaling policy.</para>
            </summary>
            <value>
            <para>The maximum number of instances. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism.ScaleIncrement">
            <summary>
            <para>Gets or sets the amount of partitions that should be added/removed when scaling is performed. </para>
            </summary>
            <value>
            <para>The number of instances by which to perform the upshift/downshift whenever a scaling operation is triggered. </para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism.ToString">
            <summary>
            <para> 
            Returns a string representation of the AddRemoveIncrementalNamedPartitionScalingMechanism.
            </para>
            </summary>
            <returns>
            <para>A string representing the AddRemoveIncrementalNamedPartitionScalingMechanism object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ScalingTriggerKind">
            <summary>
            <para>Enumerates the available triggers for scaling.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ScalingTriggerKind.Invalid">
            <summary>
            <para>All Service Fabric enumerations have a reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ScalingTriggerKind.AveragePartitionLoadTrigger">
            <summary>
            <para>Indicates a trigger where scaling decisions are made based on average load of a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ScalingTriggerKind.AverageServiceLoadTrigger">
            <summary>
            <para>Indicates a trigger where scaling decisions are made based on average load of a service.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ScalingTriggerDescription">
            <summary>
            <para>
            Base class for describing different scaling triggers. Scaling triggers are used to describe under which conditions a scaling operation should happen.
            See <see cref="T:System.Fabric.Description.AveragePartitionLoadScalingTrigger" /> and <see cref="T:System.Fabric.Description.AverageServiceLoadScalingTrigger" /> as examples of scaling triggers.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ScalingTriggerDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ScalingTriggerDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ScalingTriggerDescription.#ctor(System.Fabric.Description.ScalingTriggerKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ScalingTriggerDescription" /> class of a particular kind.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ScalingTriggerDescription.Kind">
            <summary>
            <para>Gets the kind of the scaling trigger.</para>
            </summary>
            <value>
            <para>Scaling trigger kind associated with this scaling trigger description.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.AveragePartitionLoadScalingTrigger">
            <summary>
            <para>
            Represents a scaling policy related to an average load of a metric/resource of a partition.
            When this policy is used the service fabric platform will trigger scaling if the average load of a partition does not fit inside the limits specified for a particular metric.
            Should be used with <see cref="T:System.Fabric.Description.PartitionInstanceCountScaleMechanism" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.AveragePartitionLoadScalingTrigger.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.AveragePartitionLoadScalingTrigger" /> class of a particular kind.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.AveragePartitionLoadScalingTrigger.MetricName">
            <summary>
            <para>Gets or sets the name of the metric based on which scaling should be performed. </para>
            </summary>
            <value>
            <para>The name of metric which should be used for scaling operations. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AveragePartitionLoadScalingTrigger.LowerLoadThreshold">
            <summary>
            <para>Gets or sets the lower limit of the load value of a particular metric. If the average load over a time period is less than this value scale in is performed by the service fabric platform. </para>
            </summary>
            <value>
            <para>The lower limit of the load value of a metric. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AveragePartitionLoadScalingTrigger.UpperLoadThreshold">
            <summary>
            <para>Gets or sets the upper limit of the load value of a particular metric. If the average load over a time period is greater than this value scale out is performed by the service fabric platform. </para>
            </summary>
            <value>
            <para>The upper limit of the load value of a metric. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AveragePartitionLoadScalingTrigger.ScaleInterval">
            <summary>
            <para>
            Gets or sets the time interval which should be considered when checking whether scaling should be performed.
            Every ScaleInterval there will be a check of average load based on which scaling will be triggered if necessary.
            </para>
            </summary>
            <value>
            <para>The time interval to be considered for scaling. </para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.AveragePartitionLoadScalingTrigger.ToString">
            <summary>
            <para> 
            Returns a string representation of the AverageLoadScalingPolicyDescription.
            </para>
            </summary>
            <returns>
            <para>A string representing the AverageLoadScalingPolicyDescription object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.AverageServiceLoadScalingTrigger">
            <summary>
            <para>
            Represents a scaling policy related to an average load of a metric/resource of a service.
            When this policy is used the service fabric platform will trigger scaling if the average load of a service does not fit inside the limits specified for a particular metric.
            Should be used with <see cref="T:System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.AverageServiceLoadScalingTrigger.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.AverageServiceLoadScalingTrigger" /> class of a particular kind.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.AverageServiceLoadScalingTrigger.MetricName">
            <summary>
            <para>Gets or sets the name of the metric based on which scaling should be performed. </para>
            </summary>
            <value>
            <para>The name of metric which should be used for scaling operations. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AverageServiceLoadScalingTrigger.LowerLoadThreshold">
            <summary>
            <para>Gets or sets the lower limit of the load value of a particular metric. If the average load over a time period is less than this value scale in is performed by the service fabric platform. </para>
            </summary>
            <value>
            <para>The lower limit of the load value of a metric. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AverageServiceLoadScalingTrigger.UpperLoadThreshold">
            <summary>
            <para>Gets or sets the upper limit of the load value of a particular metric. If the average load over a time period is greater than this value scale out is performed by the service fabric platform. </para>
            </summary>
            <value>
            <para>The upper limit of the load value of a metric. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AverageServiceLoadScalingTrigger.UseOnlyPrimaryLoad">
            <summary>
            <para>Gets or sets whether only the load of primary replica should be considered for scaling. </para>
            </summary>
            <value>
            <para>If set to true, then trigger will only consider the load of primary replicas of stateful service. If set to false, trigger will consider load of all replicas. This parameter cannot be set to true for stateless service. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.AverageServiceLoadScalingTrigger.ScaleInterval">
            <summary>
            <para>
            Gets or sets the time interval which should be considered when checking whether scaling should be performed.
            Every ScaleInterval there will be a check of average load based on which scaling will be triggered if necessary.
            </para>
            </summary>
            <value>
            <para>The time interval to be considered for scaling. </para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.AverageServiceLoadScalingTrigger.ToString">
            <summary>
            <para> 
            Returns a string representation of the AverageLoadScalingPolicyDescription.
            </para>
            </summary>
            <returns>
            <para>A string representing the AverageLoadScalingPolicyDescription object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServiceCorrelationScheme">
            <summary>
            <para>Indicates that this service is associated with another service, and describes the relationship with that service.</para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.Invalid">
            <summary>
            <para>An invalid correlation scheme. Cannot be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.Affinity">
            <summary>
            <para>Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring 
            the Aligned or NonAlignedAffinity options.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.AlignedAffinity">
            <summary>
            <para>Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the 
            default and is the same as selecting the “Affinity” scheme.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.NonAlignedAffinity">
            <summary>
            <para>Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not 
            guarantee that replicas of particular role will be collocated. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceDescription">
            <summary>
            <para> A ServiceDescription contains all of the information necessary to create a service. </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            <para>Initialize an instance of <see cref="T:System.Fabric.Description.ServiceDescription" /> with service kind.</para>
            </summary>
            <param name="kind">
            <para>Describe the kind of service type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServiceDescription.#ctor(System.Fabric.Description.ServiceDescription)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceDescription" /> class with parameters from another 
            <see cref="T:System.Fabric.Description.ServiceDescription" /> object.
            </para>
            </summary>
            <param name="other">
            <para>The service description from which parameters are copied.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.Kind">
            <summary>
            <para>Gets the service kind (for example, Stateful or Stateless) of this service.</para>
            </summary>
            <value>
            <para>The service kind.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PlacementConstraints">
            <summary>
            <para> Gets or sets the placement constraints for this service.</para>
            </summary>
            <value>
            <para> Returns the placement constraints.</para>
            </value>
            <remarks>
            <para>Placement constraints are Boolean statements which allow services to select for particular node properties (and the values of 
            those properties) in order to control where it is legal to place them.  Node properties are key value pairs that define some additional 
            metadata about a node, usually related to the hardware capabilities of the node.  Examples of hardware characteristics that could be exposed 
            as node properties are “HasDisk”, “MemorySize”, “StorageSize”, “NumberOfCores” etc.  When deploying a service, an administrator can define 
            the properties that the service cares about as well as simple Boolean operators which define requirements for the values of those 
            properties.  Ex: (HasDisk==true &amp;&amp; MemorySize&gt;=2048).  During runtime, Service Fabric load balancing will only place services 
            on nodes that have properties with values which match those required by the service.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ServiceTypeName">
            <summary>
            <para>Gets or sets the service type name.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ApplicationName">
            <summary>
            <para>Gets or sets the URI of the application.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
            <remarks>
            <para>This is the unique name of an application and is used to group services together for management. The scheme must 
            be "fabric:/" and the application name must be a prefix of the service name.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ServiceName">
            <summary>
            <para>Gets or sets the URI of this service.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PartitionSchemeDescription">
            <summary>
            <para>Gets or sets the partition scheme description to be used for this service.</para>
            </summary>
            <value>
            <para>The partition scheme to be used for the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.InitializationData">
            <summary>
            <para>Gets or sets the initialization data that will be passed to service instances or replicas when they are created.</para>
            </summary>
            <value>
            <para>Returns the initialization data.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.Metrics">
            <summary>
            <para>
            Gets or sets the keyed collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" />s
            that describe the load metrics defined for this service.
            </para>
            </summary>
            <value>
            <para>Returns the collection of load metric descriptions.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.Correlations">
            <summary>
            <para>
            Gets the list of <see cref="T:System.Fabric.Description.ServiceCorrelationDescription" />s that describe the correlations
            of this service with other services.
            </para>
            </summary>
            <value>
            <para>Returns the list of correlation descriptions.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PlacementPolicies">
            <summary>
            <para> 
            Gets the list of <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" />s that describe the placement policies
            for this service.
            </para>
            </summary>
            <value>
            <para>Returns the list of placement policy descriptions.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.IsDefaultMoveCostSpecified">
            <summary>
            <para> 
            Gets whether a default <see cref="T:System.Fabric.MoveCost" /> is specified for the service.
            </para>
            </summary>
            <value>
            <para>A flag indicating whether a default <see cref="T:System.Fabric.MoveCost" /> is specified for the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.DefaultMoveCost">
            <summary>
            <para> 
            Gets or sets the default <see cref="T:System.Fabric.MoveCost" /> value for the service.
            </para>
            </summary>
            <value>
            <para> The default <see cref="T:System.Fabric.MoveCost" /> value that should be set to for the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ServiceDnsName">
            <summary>
            <para>
            Gets or sets the service DNS name. If this is specified, then the service can be 
            accessed via its DNS name instead of <see cref="P:System.Fabric.Description.ServiceDescription.ServiceName"/>.
            </para>
            </summary>
            <value>
            <para>The DNS name of the service or <c>null</c> if the service doesn't have a DNS name specified.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ScalingPolicies">
            <summary>
            <para>
            Gets or sets the list of <see cref="T:System.Fabric.Description.ScalingPolicyDescription" /> for this service.
            </para>
            </summary>
            <value>
            <para>The scaling policies associated with this service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ServiceTags">
            <summary>
            <para>Gets or sets the list of tags that will influence service placement and running.</para>
            </summary>
            <value>
            <para>The list of tags that will influence service placement and running.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ServicePackageActivationMode">
            <summary>
            <para> 
            Gets or sets the <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> of a service.
            </para>
            </summary>
            <value>
            <para> 
            A <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> enumeration that represents activation mode 
            of the service package that contains the <see cref="P:System.Fabric.Description.ServiceDescription.ServiceTypeName"/> and will be activated to host the
            replica(s) or instance(s) of the service described by this <see cref="T:System.Fabric.Description.ServiceDescription"/> object. Please
            see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> for more details.
            </para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceDescriptionKind">
            <summary>
            <para>Enumerates the kinds of service descriptions.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceDescriptionKind.Invalid">
            <summary>
            <para>All Service Fabric enumerations have a reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceDescriptionKind.Stateless">
            <summary>
            <para>Indicates a stateless service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceDescriptionKind.Stateful">
            <summary>
            <para>Indicates a stateful service.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupDescription">
            <summary>
            <para>Provides a collection of information that is necessary to create and describe a service group.  </para>
            </summary>
            <remarks>
            <para>A service group description contains a <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> and a list of members in the 
            service group. The service description provides information, such as the metrics, application name, service group name, and initialization 
            information for this service group. The list of member definitions describes the services inside the service group.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupDescription.#ctor(System.Fabric.Description.ServiceDescription)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> class with the specified 
            <see cref="T:System.Fabric.Description.ServiceDescription" />.</para>
            </summary>
            <param name="serviceDescription">
            <para>The <see cref="T:System.Fabric.Description.ServiceDescription" /> to use as the basis for the <see cref="T:System.Fabric.Description.ServiceGroupDescription" />.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupDescription.MemberDescriptions">
            <summary>
            <para>Specifies the list of <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" /> objects for the members of this service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupDescription.ServiceDescription">
            <summary>
            <para>Describes the service group’s service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.ServiceDescription" />.</para>
            </value>
            <remarks>
            <para>The service description describes how the system should partition the service group, including the partitioning scheme, such as the key, 
            the key range and other properties.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupMemberDescription">
            <summary>
            <para>Describes a service that belongs to a service group.  </para>
            </summary>
            <remarks>
            <para>A <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" /> contains a subset of a normal stateless or stateful service 
            description. These fields are relevant to the service inside the group. Other fields that are present in a normal service description, such as 
            partitioning information, become properties of the service group via its <see cref="T:System.Fabric.Description.ServiceGroupDescription" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupMemberDescription.#ctor(System.String,System.Uri,System.Byte[])">
            <summary>
            <para>Creates a <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" /> object and initializes it with the specified parameters.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name of the service group member.</para>
            </param>
            <param name="serviceName">
            <para>The fully qualified name to set for the member. For example, if the group name is fabric:/G1 and the member is M1, then the full name 
            to specify is fabric:/G1#M1.</para>
            </param>
            <param name="initializationData">
            <para>The byte[] that is provided as the initialization data to the member’s factory.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupMemberDescription.#ctor">
            <summary>
            <para>Creates an empty <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" /> object.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.ServiceTypeName">
            <summary>
            <para>Gets or sets the service type of this service group member.</para>
            </summary>
            <value>
            <para>The service type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.ServiceName">
            <summary>
            <para>Gets or sets the name of the service within the service group.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the service name.</para>
            </value>
            <remarks>
            <para>Services are independently named inside the service group. This name is used as a portion of the stable fabric name to resolve 
            the service. For example, if the service group’s name is "fabric:/groupA" and the service name provided here is "svc1", then a client 
            should resolve the name “fabric:/groupA#svc1” to resolve this service.</para>
            </remarks>
            <seealso cref="T:System.Fabric.Description.ServiceDescription" />
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.InitializationData">
            <summary>
            <para>Gets or sets the initialization data for this service group member.</para>
            </summary>
            <value>
            <para>the initialization data for this service group member.</para>
            </value>
            <remarks>
            <para>This information is passed by the service group factory to the service factories that correspond to the object when it is created 
            as initialization data for instances of this service group member, similar to how initialization data is passed when normal stateless or 
            stateful service instances are created.</para>
            </remarks>
            <seealso cref="M:System.Fabric.IStatelessServiceFactory.CreateInstance(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)" />
            <seealso cref="M:System.Fabric.IStatefulServiceFactory.CreateReplica(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)" />
            <seealso cref="P:System.Fabric.Description.ServiceDescription.InitializationData" />
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.Metrics">
            <summary>
            <para>Gets or sets the collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" /> objects for this service. The metrics 
            collection contains the <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" /> objects that are relevant to this service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupTypeDescription">
            <summary>
            <para>Represents the type description of the Fabric service group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupTypeDescription.#ctor">
            <summary>
            <para>Initialize an instance of <see cref="T:System.Fabric.Description.ServiceGroupTypeDescription" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeDescription.ServiceTypeDescription">
            <summary>
            <para>Gets or sets the service group type.</para>
            </summary>
            <value>
            <para>The service group type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeDescription.Members">
            <summary>
            <para>Gets or sets the collection of members of this service group.</para>
            </summary>
            <value>
            <para>The collection of members of this service group.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeDescription.UseImplicitFactory">
            <summary>
            <para>Gets or sets the flag indicates whether to use implicit factory.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> to use implicit factory; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupTypeMemberDescription">
            <summary>
            <para>Represents the type of member description for the service group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupTypeMemberDescription.#ctor">
            <summary>
            <para>initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupTypeMemberDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeMemberDescription.ServiceTypeName">
            <summary>
            <para>Gets the name of the service type.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeMemberDescription.LoadMetrics">
            <summary>
            <para>Gets or sets the collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" /> for this service.</para>
            </summary>
            <value>
            <para>The collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" /> for this service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupUpdateDescription">
            <summary>
            <para>Modifies the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> of an existing service group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupUpdateDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupUpdateDescription.#ctor(System.Fabric.Description.ServiceUpdateDescription)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription" /> class from the specified 
            <see cref="T:System.Fabric.Description.ServiceUpdateDescription" />.</para>
            </summary>
            <param name="updateDescription">
            <para>The <see cref="T:System.Fabric.Description.ServiceUpdateDescription" /> that will be used to create the 
            <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription" /></para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupUpdateDescription.ServiceUpdateDescription">
            <summary>
            <para>Gets or sets the description of a service update.</para>
            </summary>
            <value>
            <para>The description of a service update.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceHealthQueryDescription">
            <summary>
            <para>Provides query input for getting <see cref="T:System.Fabric.Health.ServiceHealth" />. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceHealthQueryDescription.#ctor(System.Uri)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceHealthQueryDescription" /> class.</para>
            </summary>
            <param name="serviceName">
            <para>The service name. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName">
            <summary>
            <para>Gets the <see cref="T:System.Uri" /> of the service name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> of the service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the service health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent" /> reported on the service. Only events 
            that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter" /> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the service aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.PartitionsFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.PartitionHealthState" /> children. Only children that match the filter 
            will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.PartitionHealthStatesFilter" /> used to filter returned partition health states.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the service aggregated health state.
            If the filter is not specified, all partition children are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.HealthStatisticsFilter">
            <summary>
            Gets or sets the health statistics filter.
            </summary>
            <value>The health statistics filter.</value>
            <remarks>
            <para>
            The health statistics filter controls whether the <see cref="T:System.Fabric.Health.ServiceHealth"/> returned by the query
            contains the service health statistics. If not specified, the statistics are included.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServiceLoadMetricDescription">
            <summary>
            <para>Specifies a metric to load balance a service during runtime.</para>
            </summary>
            <remarks>
            <para>Note that to provide metrics for services is optional, because Service Fabric uses default metrics. Provide metrics only if the service 
            requires advanced load balancing features, such as balancing that is based on specific node characteristics and resources.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceLoadMetricDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceLoadMetricDescription.Name">
            <summary>
            <para>Gets or sets the name of the metric. </para>
            </summary>
            <value>
            <para>The name of the metric.</para>
            </value>
            <remarks>
            <para>If the service chooses to <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})" /> 
            during runtime, the name that is provided via the <see cref="T:System.Fabric.LoadMetric" /> at that time should match the name that is specified in 
            <see cref="P:System.Fabric.Description.ServiceLoadMetricDescription.Name" /> exactly.</para>
            <para>Note that metric names are case sensitive.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceLoadMetricDescription.Weight">
            <summary>
            <para>Determines the metric weight relative to the other metrics that are configured for this service. During runtime, if two metrics end up in 
            conflict, the Cluster Resource Manager prefers the metric with the higher weight.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.ServiceLoadMetricWeight" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceLoadMetricDescription.PrimaryDefaultLoad">
            <summary>  
            <para>Please refer to the derived class <see cref="T:System.Fabric.Description.StatefulServiceLoadMetricDescription"/> or 
            <see cref="T:System.Fabric.Description.StatelessServiceLoadMetricDescription"/> for usage.</para>
            </summary>  
            <remarks>
            <para>This property is deprecated, please use the corresponding property in the derived class.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceLoadMetricDescription.SecondaryDefaultLoad">
            <summary>  
            <para>Please refer to the derived class <see cref="T:System.Fabric.Description.StatefulServiceLoadMetricDescription"/> or 
            <see cref="T:System.Fabric.Description.StatelessServiceLoadMetricDescription"/> for usage.</para>
            </summary>  
            <remarks>
            <para>This property is deprecated, please use the corresponding property in the derived class.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceLoadMetricDescription.ToString(System.Boolean)">
            <summary>
            Pretty print out details of <see cref="T:System.Fabric.Description.StatefulServiceLoadMetricDescription"/>
            or <see cref="T:System.Fabric.Description.StatelessServiceLoadMetricDescription"/>.
            </summary>
            <returns>A string representation of <see cref="T:System.Fabric.Description.StatefulServiceLoadMetricDescription"/>
            or <see cref="T:System.Fabric.Description.StatelessServiceLoadMetricDescription"/>.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServiceLoadMetricWeight">
            <summary>
            <para>Describes the weight of a metric.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.Zero">
            <summary>
            <para>Specifies the metric weight of the service load as Zero. Disable Service Fabric Load Balancing for this metric. Note that metrics 
            that are not balanced during runtime can still be used to control capacity on nodes and can still be reported via 
            <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.Low">
            <summary>
            <para>Specifies the metric weight of the service load as Low.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.Medium">
            <summary>
            <para>Specifies the metric weight of the service load as Medium.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.High">
            <summary>
            <para>Specifies the metric weight of the service load as High.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceNotificationFilterDescription">
            <summary>
            <para>Represents a class that is used to describe a filter for service notification delivery, registered 
            via <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceNotificationFilterDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceNotificationFilterDescription.#ctor(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> class.</para>
            </summary>
            <param name="name"><para>The name for which service notifications should be delivered.</para></param>
            <param name="matchNamePrefix"><para>Flag that indicates whether all service notifications for which Name is a prefix will be delivered.</para></param>
            <param name="matchPrimaryChangeOnly"><para>Flag that indicates whether to match the service notification delivery by filtering out notifications in which the primary replica endpoint has not changed. This flag has no effect for stateless services.</para></param>
        </member>
        <member name="P:System.Fabric.Description.ServiceNotificationFilterDescription.Name">
            <summary>
            <para>Gets the name for which service notifications should be delivered. The name must be in the fabric: scheme. The root name ("fabric:") is allowed.</para>
            </summary>
            <value>
            <para>The name for which service notifications should be delivered.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceNotificationFilterDescription.MatchNamePrefix">
            <summary>
            <para>Gets a value that indicates whether all service notifications for which Name is a prefix will be delivered.</para>
            </summary>
            <remarks>
            The prefix match occurs as a URI segment prefix match rather than a string prefix match against service names. A filter with the name "fabric:/abc" will prefix match services named "fabric:/abc" and "fabric:/abc/def", but not a service named "fabric:/abc_def".
            </remarks>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if all service notification for which Name is a prefix will be delivered; otherwise, 
            <languageKeyword>false</languageKeyword>. The default is <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceNotificationFilterDescription.MatchPrimaryChangeOnly">
            <summary>
            <para>Gets a value that indicates whether to match the service notification delivery by filtering out notifications in which the primary 
            replica endpoint has not changed. This flag has no effect for stateless services.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the filtering matches primary change only; otherwise, <languageKeyword>false</languageKeyword>. 
            The default is <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.PartitionScheme">
            <summary>
            <para>Enumerates the ways that a service can be partitioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.Invalid">
            <summary>
            <para>All Service Fabric enumerations reserve the "Invalid" value.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.Singleton">
            <summary>
            <para>Indicates that the service is singleton-partitioned. This means that there is only one partition, or the service is not partitioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.UniformInt64Range">
            <summary>
            <para>Indicates that the service is uniform int64 range-partitioned. This means that each partition owns a range of int64 keys.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.Named">
            <summary>
            <para>Indicates that the service is named-partitioned. This means that each partition is associated with a string name.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.PartitionSchemeDescription">
            <summary>
            <para>Describes how the service is partitioned. This is the parent entity from which the actual partitioning scheme descriptions are derived.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.PartitionSchemeDescription.#ctor(System.Fabric.Description.PartitionScheme)">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.Description.PartitionSchemeDescription" /> class. </para>
            </summary>
            <param name="scheme">
            <para>
                <see cref="T:System.Fabric.Description.PartitionScheme" /> defines the kind of partition scheme.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.PartitionSchemeDescription.#ctor(System.Fabric.Description.PartitionSchemeDescription)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.PartitionSchemeDescription" /> class with parameters from another 
            <see cref="T:System.Fabric.Description.PartitionSchemeDescription" /> object.
            </para>
            </summary>
            <param name="other">
            <para>The partition scheme description from which parameters are copied.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.PartitionSchemeDescription.Scheme">
            <summary>
            <para>Specifies how the service is partitioned. A common use is that it enables programmers to cast the description into 
            <see cref="T:System.Fabric.Description.SingletonPartitionSchemeDescription" />, <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription" />, 
            or <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription" />.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.PartitionScheme" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription">
            <summary>
            <para>Represents a policy which indicates that a particular fault or upgrade domain should not be used for placement of the instances or 
            replicas of the service this policy is applied to.</para>
            </summary>
            <remarks>
            <para>As an example, in geographically distributed rings there may be a service which must not be run in a particular region due to political 
            or legal requirements. In this case that domain could be defined as invalid with this policy. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.DomainName">
            <summary>
            <para>Gets or sets the name of the fault domain, as a string, that it is invalid to place this service in.</para>
            </summary>
            <value>
            <para>The name of the fault domain, as a string, that it is invalid to place this service in.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the InvalidDomain Service Placement Policy in the form 'InvalidDomain, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription">
            <summary>
            <para>
            Placement policy description that requires a replica to be placed in a particular domain.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor">
            <summary>
            <para>
            Instantiates a new <see cref="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription" /> object.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription)">
            <summary> 
            A copy constructor for the ServicePlacementRequiredDomainPolicyDescription class
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.DomainName">
            <summary>
            <para> 
            Gets or sets the name of the domain specified in a ServicePlacementRequiredDomainPolicyDescription
            </para>
            </summary>
            <value>
            <para> A string containing the name of the domain that the ServicePlacementRequiredDomainPolicyDescription should respect.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the RequiredDomain Service Placement Policy in the form 'RequiredDomain, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" /> which indicates that the service’s Primary replicas 
            should optimally be placed in a particular domain.</para>
            </summary>
            <remarks>
            <para>This constraint is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to 
            indicate that a service’s primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with 
            regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this 
            domain due to failures, capacity limits, or other constraints.</para>
            </remarks>
            <example>
              <code>
            //create the service placement policy
            ServicePlacementPreferPrimaryDomainPolicyDescription placementPolicy = new ServicePlacementPreferPrimaryDomainPolicyDescription();
            placementPolicy.DomainName = @"fd:\Datacenter1";
            
            //add it to the Stateful Service Description
            StatefulServiceDescription ssd = new StatefulServiceDescription();
            ssd.PlacementPolicies.Add(placementPolicy);</code>
            </example>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.#ctor">
            <summary>
            <para>initializing a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.DomainName">
            <summary>
            <para>Gets or sets the string name of the domain in which the Primary replica should be preferentially located.</para>
            </summary>
            <value>
            <para>The string name of the domain in which the Primary replica should be preferentially located.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the PreferPrimaryDomain Service Placement Policy in the form 'PreferPrimaryDomain, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription">
            <summary>
            <para>Specifies the placement policy which indicates that two replicas from the same partition should never be placed in the same fault or upgrade domain.  
            While this is not common it can expose the service to an increased risk of concurrent failures due to unplanned outages or other cases of subsequent/concurrent 
            failures. As an example, consider a case where replicas are deployed across different data center, with one replica per location. In the event that one of 
            the datacenters goes offline, normally the replica that was placed in that datacenter will be packed into one of the remaining datacenters. If this is not 
            desirable then this policy should be set.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the RequiredDomainDistribution Service Placement Policy in the form 'RequiredDomainDistribution, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription">
            <summary>
            <para>Specifies the placement policy which allows placement of multiple stateless instances of a service partition on a node.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the AllowMultipleStatelessInstancesOnNode Service Placement Policy in the form 'AllowMultipleStatelessInstancesOnNode' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription">
            <summary>
            <para>
            Placement policy description that describes a service placement where all replicas must be able to be placed in order for any replicas to be created.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription.#ctor">
            <summary>
              <para />
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the ServicePlacementNonPartiallyPlaceServicePolicyDescription
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementPolicyDescription">
            <summary>
            <para>Represents the base type for all PlacementPolicyDescription types in the cluster.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementPolicyType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" /> class.</para>
            </summary>
            <param name="type">
            <para>The service placement policy type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementPolicyDescription)">
            <summary>
            <para> 
            Constructor for a ServicePlacementPolicyDescription
            </para>
            </summary>
            <param name="other">
            <para> The ServicePlacementPolicyDescription that the new object should be constructed from.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementPolicyDescription.Type">
            <summary>
            <para>Gets the service placement policy type.</para>
            </summary>
            <value>
            <para>The service placement policy type.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementPolicyType">
            <summary>
            <para>Indicates the type of the specific <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.Invalid">
            <summary>
            <para>Invalid placement policy type. Indicates that the type of the policy specified was unknown or invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.InvalidDomain">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" /> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription" />, which indicates that a particular fault or 
            upgrade domain cannot be used for placement of this service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.RequireDomain">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" /> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription" /> indicating that the replicas of 
            the service must be placed in a specific domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.PreferPrimaryDomain">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" /> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription" />, which indicates that if possible 
            the Primary replica for the partitions of the service should be located in a particular domain as an optimization.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.RequireDomainDistribution">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" /> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription" />, indicating that the system 
            will disallow placement of any two replicas from the same partition in the same domain at any time.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.NonPartiallyPlaceService">
            <summary>
              <para />
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.AllowMultipleStatelessInstancesOnNode">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription" /> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription" />, indicating that the system 
            will allow placement of multiple replicas from the same stateless partition on the same node at any time.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceQueryDescription">
            <summary>
            <para>Represents the multiple filters that can be specified to refine the return.
            Used by <see cref="M:System.Fabric.FabricClient.QueryClient.GetServicePagedListAsync(System.Fabric.Description.ServiceQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceQueryDescription.#ctor(System.Uri)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceQueryDescription.ApplicationName">
            <summary>
            <para>Gets the URI name of application that contains services to query for.</para>
            </summary>
            <value>
            <para>The URI name of application that contains services to query for.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceQueryDescription.ServiceNameFilter">
            <summary>
            <para>Gets or sets the URI name of service to query for.</para>
            </summary>
            <value>
            <para>The URI name of service to query for.</para>
            </value>
            <remarks>
            <para>ServiceNameFilter and ServiceTypeNameFilter can not be specified together.</para>
            <para>If neither ServiceNameFilter nor ServiceTypeNameFilter is specified, all services of the specified application are returned.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceQueryDescription.ServiceTypeNameFilter">
            <summary>
            <para>Gets or sets the service type name used to filter the services to query for.
            Services that are of this service type will be returned.</para>
            </summary>
            <value>
            <para>The service type name used to filter the services to query for.</para>
            </value>
            <remarks>
            <para>ServiceNameFilter and ServiceTypeNameFilter can not be specified together.</para>
            <para>If neither ServiceNameFilter nor ServiceTypeNameFilter is specified, all services of the specified application are returned.</para>
            <para>This filter is case sensitive.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ServiceTypeDescription">
            <summary>
            <para>Describes the service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription" /> class with specified service description kind.
            </para>
            </summary>
            <param name="kind">
            <para>The service description kind.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceTypeDescription)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription" /> class with parameters from another 
            <see cref="T:System.Fabric.Description.ServiceTypeDescription" /> object.
            </para>
            </summary>
            <param name="other">
            <para>The service type description from which parameters are copied.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.ServiceTypeName">
            <summary>
            <para>Gets or sets the name of the service type.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.ServiceTypeKind">
            <summary>
            <para>Gets or sets the kind of service type.</para>
            </summary>
            <value>
            <para>The kind of service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.PlacementConstraints">
            <summary>
            <para>Gets or sets the constraint to be used when instantiating this service in a Service Fabric cluster.</para>
            </summary>
            <value>
            <para>The constraint to be used when instantiating this service in a Service Fabric cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.LoadMetrics">
            <summary>
            <para>Gets the type of load metric is reported by the service.</para>
            </summary>
            <value>
            <para>The type of load metric is reported by the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Extensions">
            <summary>
            <para>Gets the extensions for the service type.</para>
            </summary>
            <value>
            <para>The extensions for the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Extensions_">
            <summary>
            INTERNAL USE ONLY. Wrapper of property "Extensions". Needed for serialization.
            </summary>
            <value>
            INTERNAL USE ONLY. Wrapper of property "Extensions". Needed for serialization.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Policies">
            <summary>
            <para>Gets the policies of the service type.</para>
            </summary>
            <value>
            <para>The policies of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.IsStateful">
            <summary>
            <para>
            Indicates whether the service is stateful.
            </para>
            </summary>
            <value>
            <para>Flag indicating whether the service is stateful.</para>
            </value>
            <remarks>
            <para>Exposed by REST API and native code.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.ReadCommonProperties(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            <para>Reads the properties of the service type.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The name of the service type.</para>
            </param>
            <param name="placementConstraints">
            <para>The constraints to be used.</para>
            </param>
            <param name="loadMetricsList">
            <para>The type of load metric.</para>
            </param>
            <param name="descriptionExtensionList">
            <para>The description extension list.</para>
            </param>
        </member>
        <member name="T:System.Fabric.Description.ServiceUpdateDescription">
            <summary>
            <para>Describes changes to the <see cref="T:System.Fabric.Description.ServiceDescription" /> of an existing service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceUpdateDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceUpdateDescription" /> class with no changes specified.
            The relevant properties must be explicitly set to specify changes.
            </para>
            </summary>
            <param name="kind">
            <para>
            The kind specifies the derived type of this instance
            (e.g. <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription" /> or <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription" />).
            </para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Kind">
            <summary>
            <para>
            Gets a value indicating the derived type of this instance 
            (e.g. <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription" /> or <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription" />).
            </para>
            </summary>
            <value>
            <para>The derived type of this instance.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.Kind" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementConstraints">
            <summary>
            <para>
            Gets or sets the placement constraints for this service, which restricts the nodes where replicas of this service can be placed.
            </para>
            </summary>
            <value>
            <para>The placement constraints expression.</para>
            </value>
            <example> nodeName == node1 || nodeType == databaseNode </example>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.PlacementConstraints" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Metrics">
            <summary>
            <para>Gets or sets a map of service load metric names to service load metric descriptions.</para>
            </summary>
            <value>
            <para>The map of service load metrics.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.Metrics" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Correlations">
            <summary>
            <para>Gets or sets a list of service correlations.</para>
            </summary>
            <value>
            <para>The list of service correlations.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.Correlations" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementPolicies">
            <summary>
            <para>Gets or sets a list of service placement policies.</para>
            </summary>
            <value>
            <para>The list of service placement policies.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.PlacementPolicies" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.RepartitionDescription">
            <summary>
            <para>Gets or sets a description of service partitioning changes.</para>
            </summary>
            <value>
            <para>The service partitioning changes.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.PartitionSchemeDescription" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.DefaultMoveCost">
            <summary>
            <para>Gets or sets the default move cost.</para>
            </summary>
            <value>
            <para>The default move cost.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.DefaultMoveCost" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.ServiceDnsName">
            <summary>
            <para>Gets or sets DNS name for the service.</para>
            </summary>
            <value>
            <para>Service DNS name</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.ServiceDnsName" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.ScalingPolicies">
            <summary>
            <para>
            Gets or sets the list <see cref="T:System.Fabric.Description.ScalingPolicyDescription" /> for this service.
            </para>
            </summary>
            <value>
            <para>The list of scaling policies associated with this service. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.ServiceTags">
            <summary>
            <para>Gets or sets collection tags that represent service tags.</para>
            </summary>
            <value>
            <para>Collection of tags that represent service tags.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.ServiceDescription.ServiceTags" /></para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.SingletonPartitionSchemeDescription">
            <summary>
            <para>Describes the partition scheme of a singleton-partitioned, or non-partitioned service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.SingletonPartitionSchemeDescription.#ctor">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.Description.SingletonPartitionSchemeDescription" /> class.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.StatefulServiceDescription">
            <summary>
            <para>Represents the extend <see cref="T:System.Fabric.Description.ServiceDescription" /> to provide additional information necessary to create stateful services.</para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.StatefulServiceDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.HasPersistedState">
            <summary>
            <para>Gets or sets a value indicating whether this instance has persisted state.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the instance has persisted state; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks><para>When a <see cref="T:System.Fabric.FabricReplicator" /> at a secondary replica receives an operation
            for a persistent service, it must wait for the service to acknowledge that the data has been persisted before it can send that acknowledgment
            back to the primary. For non-persistent services, the operation can be acknowledged immediately upon receipt.</para>
            <para>When a 
            persistent service replica fails, the Service Fabric will not immediately consider that replica as lost because the persistent state for that replica
            still exists. If the replica is recovered, it can be recreated using the persisted state. In contrast, beginning to build a replacement replica
            immediately may be costly and unnecessary, especially when the failures are transient. To configure how long Service Fabric should wait for the
            persistent replica to recover before building a new (replacement) replica from scratch, use the
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" /> parameter. For non-persistent services (those
            with <see cref="P:System.Fabric.Description.StatefulServiceDescription.HasPersistedState" /> set to <languageKeyword>false</languageKeyword>), Service Fabric
            will immediately begin creating a new replica (since there is no persistent state to recover from, and hence no point in waiting for local recovery).</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize">
            <summary>
            <para> Gets or sets the target size of the replica set.</para>
            </summary>
            <value>
            <para>The target size of the replica set.</para>
            </value>
            <remarks>
            <para>The number of replicas that the system creates and maintains for each partition of this service.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize">
            <summary>
            <para>Gets or sets the minimum allowed replica set size for this service.</para>
            </summary>
            <value>
            <para>The minimum allowed replica set size for this service.</para>
            </value>
            <remarks>
            <para>
            Defines the minimum number of replicas that Service Fabric will keep in its view of the replica set for a given partition. For example, if
            the <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize" /> is set to five, then normally (without failures)
            there will be five replicas in the view of the replica set. However, this number will decrease during failures.
            For example, if the <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize" /> is five and the
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" /> is three, then three concurrent failures will leave
            three replicas in the replica set's view (two up, one down). Service Fabric uses majority quorum on the number of replicas
            maintained in this view, which is two for this example. This means that the primary will continue to be able
            to replicate operations AND that the remaining secondary replica MUST apply the operation in order for the replica set to make progress.
            If the total number of replicas drops below the majority quorum of the <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" />,
            then further writes will be disallowed.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration">
            <summary>
            <para>Gets or sets the duration, in seconds, between when a replica goes down and when a new replica is created.</para>
            </summary>
            <value>
            <para>The duration as a <see cref="T:System.TimeSpan" /> object.</para>
            </value>
            <remarks>
            <para>When a persistent replica goes down, this timer starts.  When it expires Service Fabric will create a new replica on any node in the
            cluster. This configuration is to reduce unnecessary state copies. When a persisted replica goes down, the system waits for it to come
            back up for <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" /> seconds before creating a new
            replica which will require a copy. Note that a replica that is down is not considered lost, yet.</para>
            <para>The default value is 1800 seconds (30 minutes).</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.QuorumLossWaitDuration">
            <summary>
            <para>Gets or sets the maximum duration, for which a partition is allowed to be in a state of quorum loss.</para>
            </summary>
            <value>
            <para>The wait duration as a <see cref="T:System.TimeSpan" /> object.</para>
            </value>
            <remarks>
            <para>If the partition is still in quorum loss after this duration, Service Fabric will recover the partition from the quorum loss by considering the down
            replicas as lost. Note that this can potentially incur data loss. The default value is Infinity and it is not recommended to change this value.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.StandByReplicaKeepDuration">
            <summary>
            <para>Gets or sets the definition on how long StandBy replicas should be maintained before being removed.</para>
            </summary>
            <value>
            <para>The definition on how long StandBy replicas should be maintained before being removed.</para>
            </value>
            <remarks>
            <para>Sometimes a replica will be down for longer than the <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" />.
            In these cases a new replica will be built to replace it. Sometimes however the loss is not permanent and the persistent replica is eventually recovered.
            This now constitutes a StandBy replica. StandBy replicas will preferentially be used in the case of subsequent failures or resource balancing actions,
            since they represent persistent state that already exists and which can be used to expedite recovery. The
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.StandByReplicaKeepDuration" /> defines how long such StandBy replicas should be maintained
            before being removed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.ServicePlacementTimeLimit">
            <summary>
            <para>Gets or sets the duration for which replicas can stay InBuild before reporting that build is stuck.</para>
            </summary>
            <value>
            <para>The duration for which replicas can stay InBuild before reporting that build is stuck.</para>
            </value>
            <remarks>
            <para>ServicePlacementTimeLimit is the time for which partitions of the service can remain in the InBuild state before an error health report is generated
            to indicate that the build is stuck. If not specified, the default value is taken from the PlacementTimeLimit parameter in cluster settings for FailoverManager.
            <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-fabric-settings#failovermanager" > Check PlacementTimeLimit config. </see>
            This setting is useful when the PlacementTimeLimit parameter in cluster settings for FailoverManager is not appropriate for all services. In such cases, ServicePlacementTimeLimit
            can be used to specify the expected InBuild duration on a per-service basis.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.DropSourceReplicaOnMove">
            <summary>
            <para>Enables or disables the behavior where source Secondary replica is being dropped when a new replica starts building.</para>
            </summary>
            <value>
            <para>Drop source Secondary replica when new replica starts building.</para>
            </value>
            <remarks>
            <para>DropSourceReplicaOnMove is the feature which enables source Secondary replicas to be dropped before new Secondary replicas finish the build.
            If not specified, the default value is false.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.ReplicaLifecycleDescription">
            <summary>
            <para>Defines how replica will behave during its lifecycle.</para>
            </summary>
            <value>
            <para>Defines how replica will behave during its lifecycle.</para>
            </value>
            <remarks>
            <para>ReplicaLifecycleDescription is the section which allows user to granually controle how replicas will behave during their lifecycle.
            If some configuration in this section is not specified, the default value is taken from the cluster parameter of the same name (if existing).</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.StatefulServiceLoadMetricDescription">
            <summary>
            <para>Specifies a metric for a stateful service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceLoadMetricDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.StatefulServiceLoadMetricDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceLoadMetricDescription.PrimaryDefaultLoad">
            <summary>       
            <para>Gets or sets the default amount of load that this service creates for this metric when it is a Primary replica.</para>       
            </summary>        
            <value><para>The default amount of load that this service creates for this metric when it is a Primary replica.</para></value>        
            <remarks>        
            <para>Specifying default load values for custom metrics enables the Service Fabric Cluster Resource Manager to efficiently place services when they are first created.        
             If default load is not specified Service Fabric Cluster Resource Manager will assume zero load for this replica until the primary replica of this service reports its load.         
            <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})" />.       
            </para>        
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceLoadMetricDescription.SecondaryDefaultLoad">
            <summary>        
            <para>Gets or sets the default amount of load that this service creates for this metric when it is a Secondary replica.</para>        
            </summary>        
            <value><para>The default amount of load that this service creates for this metric when it is a Secondary replica.</para></value>        
            <remarks>        
            <para>Specifying default load values for custom metrics enables the Service Fabric Cluster Resource Manager to efficiently place services when they are first created.        
             If default load is not specified Service Fabric Cluster Resource Manager will assume zero load for this replica until the secondary replica of this service reports its load.         
            <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})" />.        
            </para>        
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceLoadMetricDescription.ToString">
            <summary>
            Pretty print out details of <see cref="T:System.Fabric.Description.StatefulServiceLoadMetricDescription"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Description.StatefulServiceLoadMetricDescription"/>.</returns>
            <example>
            CPU,High,90,10
            </example>
        </member>
        <member name="T:System.Fabric.Description.StatefulServiceTypeDescription">
            <summary>
            <para>Describes the stateful service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceTypeDescription.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Description.StatefulServiceTypeDescription" /> class. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceTypeDescription.HasPersistedState">
            <summary>
            <para>Gets or sets a flag indicating whether this is a persistent service which stores states on the local disk.</para>
            </summary>
            <value>
            <para>A flag indicating whether this is a persistent service which stores states on the local disk.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.StatefulServiceUpdateDescription">
            <summary>
            <para>
            Describes changes to the <see cref="T:System.Fabric.Description.StatefulServiceDescription" /> of a running service performed via 
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceUpdateDescription.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription" /> class with no changes specified.
            The relevant properties must be explicitly set to specify changes.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize">
            <summary>
            <para>Gets or sets the target replica set size.</para>
            </summary>
            <value>
            <para>The target replica set size.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize" />.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize">
            <summary>
            <para>Gets or sets the minimum replica set size.</para>
            </summary>
            <value>
            <para>The minimum replica set size.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.ReplicaRestartWaitDuration">
            <summary>
            <para>Gets or sets the replica restart wait duration.</para>
            </summary>
            <value>
            <para>The replica restart wait duration.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.QuorumLossWaitDuration">
            <summary>
            <para>Gets or sets the quorum loss wait duration.</para>
            </summary>
            <value>
            <para>The quorum loss wait duration.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.QuorumLossWaitDuration" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.StandByReplicaKeepDuration">
            <summary>
            <para>Gets or sets the standby replica keep duration.</para>
            </summary>
            <value>
            <para>The standby replica keep duration.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.StandByReplicaKeepDuration" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.ServicePlacementTimeLimit">
            <summary>
            <para>Gets or sets the service placement time limit.</para>
            </summary>
            <value>
            <para>The service placement time limit.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.ServicePlacementTimeLimit" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.DropSourceReplicaOnMove">
            <summary>
            <para>Enable or disable dropping of source Secondary replica on move.</para>
            </summary>
            <value>
            <para>Drop source Secondary replica on move (before the new replica finishes building).</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.DropSourceReplicaOnMove" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.ReplicaLifecycleDescription">
            <summary>
            <para>Defines how replica will behave during its lifecycle.</para>
            </summary>
            <value>
            <para>Defines how replica will behave during its lifecycle.</para>
            </value>
            <remarks>
            <para>ReplicaLifecycleDescription is the section which allows user to granually controle how replicas will behave during their lifecycle.
            If some configuration in this section is not specified, the default value is taken from the cluster parameter of the same name (if existing).</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.StatelessServiceDescription">
            <summary>
            <para>Extends <see cref="T:System.Fabric.Description.ServiceDescription" /> to provide additional necessary information to create a stateless service. </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceDescription.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Description.StatelessServiceDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount">
            <summary>
            <para>Gets or sets the instance count of this service partition. </para>
            </summary>
            <value>
            <para>The instance count of this service partition. </para>
            </value>
            <remarks>
            <para>The <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" /> property indicates the number of instances to be
            created for this service. The specified number of instances will be maintained by Service Fabric. For a partitioned stateless service,
            <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" /> indicates the number of instances to be kept per partition.</para>
            Note, -1 is a special value for <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" />. If <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" />
            is set to -1, the number of instances to be kept per partition is equal to the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceDescription.MinInstanceCount">
            <summary>
            <para>Gets or sets the minimum instance count. </para>
            </summary>
            <value>
            <para>The minimum instance count. Defaults to 1 if not provided.</para>
            </value>
            <remarks>
            <para>The <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstanceCount" /> property indicates the minimum number of 
            instances that must be up to meet the <see href="https://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-model-ensureavailabilitysafetycheck">EnsureAvailability safety check</see> during operations like upgrade or deactivate node.
            The actual number that is used is max(
            <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstanceCount" />, 
            ceil( <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstancePercentage" />/100.0 * <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" />) 
            ). </para>
            Note, if <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" /> is set to -1, during MinInstanceCount computation -1 is first converted
            into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceDescription.MinInstancePercentage">
            <summary>
            <para>Gets or sets the minimum instance percentage. </para>
            </summary>
            <value>
            <para>The minimum instance percentage. Defaults to 0 if not provided. Note that the MinInstanceCount parameter must always be greater than 0, so 
            defaulting to 0 guarantees MinInstancePercentage has no effect because MinInstanceCount will have precedence. </para>
            </value>
            <remarks>
            <para>The <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstancePercentage" /> property is the minimum percentage of
            <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" /> that must be up to meet the  
            <see href="https://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-model-ensureavailabilitysafetycheck">EnsureAvailability safety check</see> during operations like upgrade or deactivate node.
            The actual number that is used is max(
            <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstanceCount" />, 
            ceil( <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstancePercentage" />/100.0 * <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" />) 
            ). </para>
            Note, if <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" /> is set to -1, during MinInstancePercentage computation, -1 is first converted
            into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceDescription.InstanceCloseDelayDuration">
            <summary>
            <para>Gets or sets the duration for which the close of a replica is delayed.</para>
            </summary>
            <value>
            <para>The duration for which the close of a replica is delayed.</para>
            </value>
            <remarks>
            <para>The <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCloseDelayDuration" /> property indicates the duration for which the
            graceful close of a stateless instance is delayed. This would be effective when the instance is closing during the application/cluster upgrade and disabling node.
            The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to this instance. In addition,
            clients that have subscribed to <see href="https://docs.microsoft.com/en-us/dotnet/api/system.fabric.fabricclient.servicemanagementclient.registerservicenotificationfilterasync">
            service endpoint change events</see> can do the following upon receiving the endpoint removal notification:
            - Stop sending new requests to this instance
            - Close existing connections after in-flight requests have completed
            - Connect to a different instance of the service partition for future requests.
            Note, the default value of <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCloseDelayDuration" /> is TimeSpan.Zero, which indicates
            that there won't be any delay or removal of the endpoint prior to closing the instance.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceDescription.InstanceRestartWaitDuration">
            <summary>
            <para>Gets or sets the duration between when an instance goes down and when a new replacement instance is created.</para>
            </summary>
            <value>
            <para>The duration as a <see cref="T:System.TimeSpan" /> object.</para>
            </value>
            <remarks>
            <para>When a stateless instance goes down, this timer starts. When it expires Service Fabric will create a new instance on any node in the 
            cluster. This configuration is to reduce unnecessary creation of a new instance in situations where the instance going down is likely to recover in a short time. For example, during an upgrade.</para>
            <para>The default value is TimeSpan.Zero, which indicates that when stateless instance goes down, Service Fabric will immediately start building its replacement.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceDescription.InstanceLifecycleDescription">
            <summary>
            <para>Defines how instance will behave during its lifecycle.</para>
            </summary>
            <value>
            <para>Defines how instance will behave during its lifecycle.</para>
            </value>
            <remarks>
            <para>InstanceLifecycleDescription is the section which allows user to granually controle how instances will behave during their lifecycle.
            If some configuration in this section is not specified, the default value is taken from the cluster parameter of the same name (if existing).</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.StatelessServiceLoadMetricDescription">
            <summary>
            <para>Specifies a metric for a stateless service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceLoadMetricDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.StatelessServiceLoadMetricDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceLoadMetricDescription.DefaultLoad">
            <summary>
            <para>Gets or sets the default amount of load that this service creates for this metric.</para>
            </summary>
            <value><para>The default amount of load that this service creates for this metric.</para></value>
            <remarks>
            <para>Specifying default load values for custom metrics enables the Service Fabric Cluster Resource Manager to efficiently place services when they are first created.
            If default load is not specified Service Fabric Cluster Resource Manager will assume zero load for this replica until the service reports its load.
            <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})" />.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceLoadMetricDescription.ToString">
            <summary>
            Pretty print out details of <see cref="T:System.Fabric.Description.StatelessServiceLoadMetricDescription"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Description.StatelessServiceLoadMetricDescription"/>.</returns>
            <example>
            CPU,High,90
            </example>
        </member>
        <member name="T:System.Fabric.Description.StatelessServiceTypeDescription">
            <summary>
            <para>Describes the type of stateless service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceTypeDescription.#ctor">
            <summary>
            <para>Creates and initializes an instance of the <see cref="T:System.Fabric.Description.StatelessServiceTypeDescription" /> object.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceTypeDescription.UseImplicitHost">
            <summary>
            <para>Specifies that the service does not implement Service Fabric interfaces. Service Fabric should start the specified executables (EXEs).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.StatelessServiceUpdateDescription">
            <summary>
            <para>
            Describes changes to the <see cref="T:System.Fabric.Description.StatelessServiceDescription" /> of a running service performed via 
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceUpdateDescription.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription" /> class with no changes specified.
            The relevant properties must be explicitly set to specify changes.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceUpdateDescription.InstanceCount">
            <summary>
            <para>Gets or sets the instance count</para>
            </summary>
            <value>
            <para>The instance count</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceUpdateDescription.MinInstanceCount">
            <summary>
            <para>Gets or sets the minimum instance count. </para>
            </summary>
            <value>
            <para>The minimum instance count</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstanceCount" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceUpdateDescription.MinInstancePercentage">
            <summary>
            <para>Gets or sets the minimum instance percentage. </para>
            </summary>
            <value>
            <para>The minimum instance percentage</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatelessServiceDescription.MinInstancePercentage" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceUpdateDescription.InstanceCloseDelayDuration">
            <summary>
            <para>Gets or sets the InstanceCloseDelayDuration</para>
            </summary>
            <value>
            <para>The duration for which the graceful close of a stateless instance is delayed. This would be effective when the instance is closing during the application/cluster upgrade and disabling node.
            The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to this instance.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCloseDelayDuration" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceUpdateDescription.InstanceRestartWaitDuration">
            <summary>
            <para>Gets or sets the duration Service Fabric will wait for stateless instance to come up. If intance does not come up within this duration, Service Fabric will create a new replacement instance.</para>
            </summary>
            <value>
            <para>The instance restart wait duration.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceRestartWaitDuration" /></para>
            </remarks>
            <remarks>
            <para>When a stateless instance goes down, this timer starts. When it expires Service Fabric will create a new instance on any node in the 
            cluster. This configuration is to reduce unnecessary creation of a new instance in situations where the instance going down is likely to recover in a short time. For example, during an upgrade.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceUpdateDescription.InstanceLifecycleDescription">
            <summary>
            <para>Gets or sets the section containing settings how instance will behave during its lifecycle.</para>
            </summary>
            <value>
            <para>Instance lifecycle description.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceLifecycleDescription" /></para>
            </remarks>
            <remarks>
            <para>InstanceLifecycleDescription is the section which allows user to granually controle how instances will behave during their lifecycle.
            If some configuration in this section is not specified, the default value is taken from the cluster parameter of the same name (if existing).</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationUpgradeDescription">
            <summary>
            <para>Represents a class to encapsulate parameters describing a Service Fabric cluster configuration upgrade.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ConfigurationUpgradeDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ConfigurationUpgradeDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ConfigurationUpgradeDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ConfigurationUpgradeDescription" /> class.
            </summary>
            <param name="clusterConfiguration">Cluster configuration string parameter to be used for upgrade.</param>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.ClusterConfiguration">
            <summary>
            This is the cluster configuration that will be applied to cluster.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.HealthCheckRetryTimeout">
            <summary>
            <para>Gets or sets the length of time between attempts to perform a health check if the application or cluster is not healthy.</para>
            </summary>
            <value>
            <para>The length of time between attempts to perform a health checks if the application or cluster is not healthy.</para>
            </value>
            <remarks>
            <para>To prevent a retry of the health check, set the <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout" /> 
            property value to <see cref="F:System.TimeSpan.Zero" />. The default is <see cref="F:System.TimeSpan.Zero" />.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.HealthCheckWaitDuration">
            <summary>
            <para>Gets or sets the length of time to wait after completing an upgrade domain before starting the health check process.</para>
            </summary>
            <value>
            <para>The length of time to wait after completing an upgrade domain before starting the health checks process.</para>
            </value>
            <remarks>
            <para>To use an infinite wait for the health check, set the <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration" /> 
            property value to <see cref="F:System.TimeSpan.Zero" />. The default is <see cref="F:System.TimeSpan.Zero" />.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.HealthCheckStableDuration">
            <summary>
            <para>Gets or sets the length of time that the application or cluster must remain healthy before the health check passes and the upgrade proceeds 
            to the next Upgrade Domain.</para>
            </summary>
            <value>
            <para>The length of time that the application or cluster must remain healthy.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.UpgradeDomainTimeout">
            <summary>
            <para>Gets or sets the timeout for the upgrade domain.</para>
            </summary>
            <value>
            <para>The timeout for the upgrade domain.</para>
            </value>
            <remarks>
            <para>The default is TimeSpan.FromSeconds(uint.MaxValue).</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.UpgradeTimeout">
            <summary>
            <para>Gets or sets the upgrade timeout.</para>
            </summary>
            <value>
            <para>The upgrade timeout.</para>
            </value>
            <remarks>
            <para>The default is TimeSpan.FromSeconds(uint.MaxValue).</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.MaxPercentUnhealthyApplications">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy applications from the <see cref="T:System.Fabric.Health.ClusterHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy applications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.MaxPercentUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy nodes.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes. Allowed values are integer values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
            <remarks>
            <para>
            The percentage represents the maximum tolerated percentage of nodes that can be unhealthy 
            before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node,
            the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy nodes
            over the total number of nodes in the cluster.
            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage: zero.
            </para>
            <para>In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.MaxPercentDeltaUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
            </para>
            </summary>
            <value>
            <para>The maximum allowed percentage of delta health degradation. Allowed values are integer values from zero to 100.</para>
            </value>
            <remarks>The delta is 
            measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. 
            The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated 
            limits. The default value is 10%.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.MaxPercentUpgradeDomainDeltaUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of upgrade domain nodes health degradation 
            allowed during cluster upgrades.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of upgrade domain delta health degradation. Allowed values are integer values from zero to 100.</para>
            </value>
            <remarks>The delta 
            is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the 
            time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains 
            to make sure the state of the upgrade domains is within tolerated limits. The default value is 15%.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationUpgradeDescription.ApplicationHealthPolicies">
            <summary>
            Gets or sets the application health policies used to evaluate the applications health as part of
            the cluster health evaluation. 
            </summary>
            <value>The application health policies used to evaluate the health of the specified applications.</value>
            <remarks>
            <para>
            During cluster upgrade, the health of the cluster is evaluated to determine whether the cluster is still healthy. 
            As part of the cluster health evaluation, all applications are evaluated and aggregated in the cluster health.
            The application health policy map is used to evaluate the applications as part of the cluster evaluation.
            </para>
            <para>
            Each entry specifies as key the application name and as value an <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> 
            used to evaluate the application health of that application.</para>
            <para>
            If an application is not specified in the map, the ApplicationHealthPolicy found in the application manifest will be used for evaluation. </para>
            <para>
            The custom application health policies are also used to evaluate cluster health during upgrade, through
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/> or
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/>.</para>
            <para>
            The map is empty by default.
            </para></remarks>
        </member>
        <member name="M:System.Fabric.Description.ConfigurationUpgradeDescription.ToString">
            <summary>
            Gets a string representation of the ConfigurationUpgradeDescription.
            </summary>
            <returns>A string representation of the ConfigurationUpgradeDescription.</returns>
        </member>
        <member name="T:System.Fabric.Description.NodeTransitionDescription">
            <summary>
            Describes information about how a node should be transitioned, and is used with StartNodeTransitionAsync().  
            This object should not be used directly, the derived classes should be used.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NodeTransitionDescription.#ctor(System.Fabric.NodeTransitionType,System.Guid,System.String,System.Numerics.BigInteger)">
            <summary>
            Constructs a NodeTransitionDescription
            </summary>
            <param name="nodeTransitionType">Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.</param>
            <param name="operationId">A Guid to identify this operation.  This should be unique, and should not be used with other operations.</param>        
            <param name="nodeName">The name of the node to start or stop.  The name can be determined through GetNodeListAsync().</param>
            <param name="nodeInstanceId">The node instance id of the target node.  This can be determined through GetNodeListAsync().</param>
        </member>
        <member name="P:System.Fabric.Description.NodeTransitionDescription.NodeTransitionType">
            <summary>
            NodeTransitionType determines what type of transition to perform.  Start will start a stopped node.  Stop will stop an up node.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NodeTransitionDescription.OperationId">
            <summary>
            A Guid to identify this operation.  This should be unique, and should not be used with other operations.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NodeTransitionDescription.NodeName">
            <summary>
            The name of the node to start or stop.  The name can be determined through GetNodeListAsync().
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NodeTransitionDescription.NodeInstanceId">
            <summary>
            The node instance id of the target node.  This can be determined through GetNodeListAsync().
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NodeTransitionDescription.ToString">
            <summary>
            Prints a string representation of this object.
            </summary>
        </member>
        <member name="T:System.Fabric.Description.NodeStartDescription">
            <summary>
            Describes information about how a node should be started using StartNodeTransitionAsync().  
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NodeStartDescription.#ctor(System.Guid,System.String,System.Numerics.BigInteger)">
            <summary>
            Create an instance of NodeStartDescription, which describes information about how a node should be started using StartNodeTransitionAsync().  
            </summary>
            <param name="operationId">A Guid to identify this operation.  This should be unique, and should not be used with other operations.</param>        
            <param name="nodeName">The name of the node to start or stop.  The name can be determined through GetNodeListAsync().</param>
            <param name="nodeInstanceId">The node instance id of the target node.  This can be determined through GetNodeListAsync().</param>
        </member>
        <member name="T:System.Fabric.Description.NodeStopDescription">
            <summary>
            Describes information about how a node should be stopped using StartNodeTransitionAsync().  
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NodeStopDescription.#ctor(System.Guid,System.String,System.Numerics.BigInteger,System.Int32)">
            <summary>
            Constructs a NodeTransitionDescription, which describes information about a node to stop.
            </summary>        
            <param name="operationId">A Guid to identify this operation.  This should be unique, and should not be used with other operations.</param>        
            <param name="nodeName">The name of the node to start or stop.  The name can be determined through GetNodeListAsync().</param>
            <param name="nodeInstanceId">The node instance id of the target node.  This can be determined through GetNodeListAsync().</param>
            <param name="stopDurationInSeconds">The duration to keep the node stopped.  After this time expires, the node will automatically come back up.  The units is in seconds.  The minimum value is 600, the maximum is 14400.</param>
        </member>
        <member name="P:System.Fabric.Description.NodeStopDescription.StopDurationInSeconds">
            <summary>
            The duration to keep the node stopped.  After this time expires, the node will automatically come back up.  The units is in seconds.  The minimum value is 600, the maximum is 14400.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NodeStopDescription.ToString">
            <summary>
            Prints a string representation of the object.
            </summary>        
        </member>
        <member name="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription">
            <summary>
            <para>Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.#ctor(System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription" /> class by specifying the partition count.</para>
            </summary>
            <param name="partitionCount">
            <para>The number of partitions in the scheme.</para>
            </param>
            <remarks>The low key of the range defaults to long.MinValue and the high key defaults to long.MaxValue.</remarks>
        </member>
        <member name="M:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.#ctor(System.Int32,System.Int64,System.Int64)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription" /> class 
            by specifying the partition count and the range values.</para>
            </summary>
            <param name="partitionCount">
            <para>The number of partitions in the scheme.</para>
            </param>
            <param name="lowKey">The low key of the range.</param>
            <param name="highKey">The high key of the range.</param>
        </member>
        <member name="P:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.PartitionCount">
            <summary>
            <para>Gets or sets the partition count.</para>
            </summary>
            <value>
            <para>The partition count.</para>
            </value>
            <remarks>
            <para>Specifies the number of partitions into which this service is partitioned. Each partition receives approximately the same 
            number of keys. The number is determined by subtracting <languagekeyword>HighKey</languagekeyword> from <languagekeyword>LowKey</languagekeyword> and dividing 
            the sum by <languagekeyword>PartitionCount</languagekeyword>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.LowKey">
            <summary>
            <para>Gets or sets the inclusive lower bound on the range of keys that is supported by the service.</para>
            </summary>
            <value>
            <para>The inclusive lower bound on the range of keys that is supported by the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.HighKey">
            <summary>
            <para>Gets or sets the inclusive upper bound on the range of keys that is supported by the service.</para>
            </summary>
            <value>
            <para>The inclusive upper bound on the range of keys that is supported by the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ConfigParameterOverride">
            <summary>
            <para>Specifies a named collection of configuration override.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverride.#ctor(System.String,System.String,System.String,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Constructor for ConfigParameterOverride
            </summary>
            <param name="sectionName">Section override name</param>
            <param name="parameterName">Parameter override name</param>
            <param name="parameterValue">Value of override</param>
            <param name="timeout">
                Time until override is considered as valid
                    - Maximum: 7 days
                    - Default: 1 day
            </param>
            <param name="persistAcrossUpgrade">Indicates whether override will be removed on upgrade or will still be considered as valid</param>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverride.SectionName">
            <summary>
            <para> The name of the section. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverride.ParameterName">
            <summary>
            <para> The name of the parameter override. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverride.ParameterValue">
            <summary>
            <para> Value of parameter override. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverride.Timeout">
            <summary>
            <para> Time until override is considered as valid. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverride.PersistAcrossUpgrade">
            <summary>
            <para> Indicates whether override will be removed on upgrade or will still be considered as valid. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ConfigParameterOverrideList">
            <summary>
            <para>Specifies a named collection of configuration overrides.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.#ctor">
            <summary>
            <para>Constructor for ConfigParameterOverrideList</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.#ctor(System.Collections.Generic.IList{System.Fabric.Description.ConfigParameterOverride})">
            <summary>
            <para>Constructor for ConfigParameterOverrideList with parameters.</para>
            </summary>
            <param name="input">
            <para>The list from which will List be constructed.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.IndexOf(System.Fabric.Description.ConfigParameterOverride)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.Insert(System.Int32,System.Fabric.Description.ConfigParameterOverride)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The location where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverrideList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.Add(System.Fabric.Description.ConfigParameterOverride)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to be added to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.Contains(System.Fabric.Description.ConfigParameterOverride)">
            <summary>
            <para>Indicates whether the list contains a specified item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specified item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.CopyTo(System.Fabric.Description.ConfigParameterOverride[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array of items to copy.</para>
            </param>
            <param name="arrayIndex">
            <para>The index where the array of items will be copied to.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverrideList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigParameterOverrideList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list is read only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.Remove(System.Fabric.Description.ConfigParameterOverride)">
            <summary>
            <para>Remove the specified item from this list</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Description.ConfigParameterOverrideList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.LoadedPartitionInformationQueryDescription">
            <summary>
            Represents a class for specifying a query to get top/least loaded partitions.
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetLoadedPartitionInfoListAsync(System.Fabric.Description.LoadedPartitionInformationQueryDescription)"/>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.LoadedPartitionInformationQueryDescription.#ctor(System.String,System.Uri)">
            <summary>
            Constructor for <see cref="T:System.Fabric.Description.LoadedPartitionInformationQueryDescription" />.
            </summary>
            <param name="metricName">
            Name of the metric based on which to get ordered list of partitions.
            (see <see cref="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.MetricName"/>).
            </param>
            <param name="serviceName">
            Name of service from which to get partitions. If service name is empty, get all partitions with the metric across all services.
            (see <see cref="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.ServiceName"/>).
            </param>
        </member>
        <member name="M:System.Fabric.Description.LoadedPartitionInformationQueryDescription.#ctor(System.String,System.Uri,System.Fabric.Ordering,System.Int64,System.String)">
            <summary>
            Constructor for <see cref="T:System.Fabric.Description.LoadedPartitionInformationQueryDescription" />.
            </summary>
            <param name="metricName">
            Name of the metric based on which to get ordered list of partitions.
            (see <see cref="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.MetricName"/>).
            </param>
            <param name="serviceName">
            Name of service from which to get partitions. If service name is empty, get all partitions with the metric across all services.
            (see <see cref="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.ServiceName"/>).
            </param>
            <param name="ordering">
            Desc (default): Sort partitions such that load is decreasing (non-increasing). Get most loaded partitions.
            Asc: Sort partitions such that load is increasing (non-decreasing). Get least loaded partitions.
            (see <see cref="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.Ordering"/>).
            </param>
            <param name="maxResults">
            The maximum number of results to be returned as part of the paged queries. 
            This parameter defines the upper bound for the number of results returned.
            The API may return fewer results than the specified maximum if they do not fit 
            in the message as per the max message size restrictions defined in the configuration or if there are fewer total results.
            If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
            </param>
            <param name="continuationToken">Specifies id of partition that is next to be returned.</param>
        </member>
        <member name="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.MetricName">
            <summary>
            Name of the metric based on which to get ordered list of partitions.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.ServiceName">
            <summary>
            Name of service from which to get partitions. Get all partitions if service name is empty.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.LoadedPartitionInformationQueryDescription.Ordering">
            <summary>
            Desc (default): Sort partitions such that load is decreasing (non-increasing). Get most loaded partitions.
            Asc: Sort partitions such that load is increasing (non-decreasing). Get least loaded partitions.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.LoadedPartitionInformationQueryDescription.Validate(System.Fabric.Description.LoadedPartitionInformationQueryDescription)">
            <summary>
            Check if queryDescription is valid.
            </summary>
            <param name="queryDescription">queryDescription that needs to be validated.</param>
        </member>
        <member name="M:System.Fabric.Description.LoadedPartitionInformationQueryDescription.ToNative(System.Fabric.Interop.PinCollection)">
            <summary>
            Create native object from this class.
            </summary>
            <param name="pinCollection"></param>
            <returns>Pointer to native object.</returns>
        </member>
        <member name="T:System.Fabric.Description.UpgradeKind">
            <summary>
            <para>Enumerates the possible kinds of upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.UpgradeKind.Invalid">
            <summary>
            <para>Indicates that this is an invalid upgrade. All Service Fabric enumerations have a reserved "Invalid" member.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.UpgradeKind.Rolling">
            <summary>
            <para>Indicates that this is a rolling upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.UpgradeKind.Rolling_ForceRestart">
            <summary>
            <para>Indicates that this is a rolling upgrade and the service host restarts.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.UpgradeKind.Rolling_NotificationOnly">
            <summary>
            <para>Indicates that this is a rolling upgrade and replicas are not restarted.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.UpgradePolicyDescription">
            <summary>
            <para>Describes the upgrade policy of the service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UpgradePolicyDescription.#ctor(System.Fabric.Description.UpgradeKind)">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Description.UpgradePolicyDescription" /> class with the upgrade kind.</para>
            </summary>
            <param name="kind">
            <para>
                <see cref="T:System.Fabric.Description.UpgradeKind" />: Describes the kind of upgrade.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.UpgradePolicyDescription.Kind">
            <summary>
            <para>Gets the kind of application upgrade.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.UpgradeKind" /> of the application upgrade.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.MetricLoadDescription">
            <summary>
            <para>Specifies metric load information.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.MetricLoadDescription.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
                Constructor for MetricLoadDescription where at least one out of current and predicted load values should be specified
            </summary>
            <param name="metricName">Metric name</param>
            <param name="currentLoad">Current load, can be null</param>
            <param name="predictedLoad">Predicted load, can be null</param>
        </member>
        <member name="P:System.Fabric.Description.MetricLoadDescription.MetricName">
            <summary>
            <para> The name of the metric. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.MetricLoadDescription.CurrentLoad">
            <summary>
            <para> The current value of the metric. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.UInt64" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.MetricLoadDescription.IsCurrentLoadSpecified">
            <summary>
            <para> Indicator whether the current load value is specified. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.MetricLoadDescription.PredictedLoad">
            <summary>
            <para> The predicted value of the metric. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.UInt64" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.MetricLoadDescription.IsPredictedLoadSpecified">
            <summary>
            <para> Indicator whether the predicted load value is specified. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ReplicaMetricLoadDescription">
            <summary>
            <para>Specifies metric loads of a partition's specific replica or instance.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ReplicaMetricLoadDescription.#ctor(System.String,System.Collections.Generic.IList{System.Fabric.Description.MetricLoadDescription})">
            <summary>
                Constructor for ReplicaMetricLoadDescription
            </summary>
            <param name="nodeName">Node name of a specific replica or instance</param>
            <param name="replicaOrInstanceLoadEntries">Replica or instance list of load entries</param>
        </member>
        <member name="P:System.Fabric.Description.ReplicaMetricLoadDescription.NodeName">
            <summary>
            <para> The name of the node. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaMetricLoadDescription.ReplicaOrInstanceLoadEntries">
            <summary>
            <para> Loads of a different metrics for a partition's replica or instance. </para>
            </summary>
            <value>
            <para>Returns vector of <see cref="T:System.Fabric.Description.MetricLoadDescription" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.PartitionMetricLoadDescription">
            <summary>
            <para>Specifies metric loads of a partition.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.PartitionMetricLoadDescription.#ctor(System.Guid,System.Collections.Generic.IList{System.Fabric.Description.MetricLoadDescription},System.Collections.Generic.IList{System.Fabric.Description.MetricLoadDescription},System.Collections.Generic.IList{System.Fabric.Description.ReplicaMetricLoadDescription})">
            <summary>
                Constructor for PartitionMetricLoadDescription, where at least on list of load entries should be provided.
            </summary>
            <param name="partitionId">Partition ID</param>
            <param name="primaryReplicaLoadEntries">List of load entries for primary replica, can be empty</param>
            <param name="secondaryReplicasOrInstancesLoadEntries">List of load entries for all secondary replicas or instances, can be empty</param>
            <param name="secondaryReplicaOrInstanceLoadEntriesPerNode">List of load entries for specific secondary replica or instance, can be empty</param>
        </member>
        <member name="P:System.Fabric.Description.PartitionMetricLoadDescription.PartitionId">
            <summary>
            <para> The partition ID. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Guid" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PartitionMetricLoadDescription.PrimaryReplicaLoadEntries">
            <summary>
            <para> Loads of a different metrics for a partition's primary replica. </para>
            </summary>
            <value>
            <para>Returns vector of <see cref="T:System.Fabric.Description.MetricLoadDescription"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PartitionMetricLoadDescription.SecondaryReplicasOrInstancesLoadEntries">
            <summary>
            <para> Loads of a different metrics for a partition's all secondary replicas or instances. </para>
            </summary>
            <value>
            <para>Returns vector of <see cref="T:System.Fabric.Description.MetricLoadDescription"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PartitionMetricLoadDescription.SecondaryReplicaOrInstanceLoadEntriesPerNode">
            <summary>
            <para> Partition's load information for specific secondary replicas or instances. </para>
            </summary>
            <value>
            <para>Returns vector of <see cref="T:System.Fabric.Description.MetricLoadDescription"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.UpdatePartitionLoadQueryDescription">
            <summary>
            <para>Represents the query input used by
            <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.UpdatePartitionLoadAsync(System.Fabric.Description.UpdatePartitionLoadQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UpdatePartitionLoadQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.UpdatePartitionLoadQueryDescription" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.UpdatePartitionLoadQueryDescription.PartitionMetricLoadDescriptionList">
            <summary>
            <para>Gets or sets the list of partitions with their load updates.</para>
            </summary>
            <value>
            <para>The list of partitions with their load updates.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.UpgradeUpdateDescriptionBase">
            <summary>
            <para>Represents the abstract base class for <see cref="T:System.Fabric.Description.ApplicationUpgradeUpdateDescription" /> and 
            <see cref="T:System.Fabric.Description.FabricUpgradeUpdateDescription" />.
            This class can be used to modify the upgrade parameters describing the behavior 
            of the application or cluster upgrades. Visit <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)" /> 
            and <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)" /> to see the usage.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UpgradeUpdateDescriptionBase.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.UpgradeUpdateDescriptionBase" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeMode">
            <summary>
            <para>Gets or sets the new value of <see cref="T:System.Fabric.RollingUpgradeMode" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="T:System.Fabric.RollingUpgradeMode" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.ForceRestart">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.ForceRestart" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.ForceRestart" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeReplicaSetCheckTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeReplicaSetCheckTimeout" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeReplicaSetCheckTimeout" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.FailureAction">
            <summary>
            <para>Gets or sets the new value of <see cref="T:System.Fabric.UpgradeFailureAction" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="T:System.Fabric.UpgradeFailureAction" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.HealthCheckWaitDuration">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.HealthCheckStableDuration">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.HealthCheckRetryTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeDomainTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout" />. </para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.InstanceCloseDelayDuration">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.InstanceCloseDelayDuration" />.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.InstanceCloseDelayDuration" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServicePackageActivationMode">
            <summary>
            <para>
            Describes service package activation mode for a Service Fabric service. This is specified at the time of
            creating the Service (using <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription)"/>)
            or ServiceGroup (using <see cref="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)"/>) via
            <see cref="P:System.Fabric.Description.ServiceDescription.ServicePackageActivationMode"/>.
            </para>
            <para>
            If no value is specified while creating the Service or ServiceGroup, then it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> mode.
            </para>
            </summary>
            <remarks>
            <para>
            Consider an example where you have an ApplicationType 'AppTypeA' which contains ServicePackage 'ServicePackageA' which registers
            'ServiceTypeA' and you create many Service(s) of 'ServiceTypeA'. Say 'fabric:/App1_of_AppTypeA/Serv_1' to 
            'fabric:/App1_of_AppTypeA/Serv_N' with ServicePackageActivation mode <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> and 'fabric:/App1_of_AppTypeA/Serv_11' 
            to 'fabric:/App1_of_AppTypeA/Serv_NN' with ServicePackageActivation mode <see cref="F:System.Fabric.Description.ServicePackageActivationMode.ExclusiveProcess"/>.
            </para>
            <para>
            On a given node, replica (or instance) of service 'fabric:/App1_of_AppTypeA/Serv_1' to 'fabric:/App1_of_AppTypeA/Serv_N' will be placed
            inside the same activation of 'ServicePackageA' whose <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> will always
            be an empty string. However, replica (or instance) of each of  'fabric:/App1_of_AppTypeA/Serv_11' to 'fabric:/App1_of_AppTypeA/Serv_NN'
            will be placed in its own dedicated activation of 'ServicePackageA' and each of these activation will have a unique non-empty string as
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/>.
            </para>
            <para>
            After you have created your service, you can obtain <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of activated 
            ServicePackage(s) on a node by querying <see cref="T:System.Fabric.Query.DeployedServicePackageList"/> on that node using
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/>.
            </para>
            </remarks>
        </member>
        <member name="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess">
            <summary>
            <para>
            This is the default activation mode. With this activation mode, replica(s) or instance(s) from
            different partition(s) of service, on a given node, will share same activation of service package on a node.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePackageActivationMode.ExclusiveProcess">
            <summary>
            <para>
            With this activation mode, each replica or instance of service, on a given node, will have its own dedicated activation
            of service package on a node.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.PagedApplicationTypeQueryDescription">
            <summary>
            <para>Describes a set of filters used when running the query
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync" />.</para>
            </summary>
            <remarks>
            <para>The default values of this query description ensure that results are returned from the first page and apply no filters.
            This query description can be customized by setting individual properties.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedApplicationTypeQueryDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.PagedApplicationTypeQueryDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.PagedApplicationTypeQueryDescription.ApplicationTypeNameFilter">
            <summary>
            <para>Gets or sets the application type to get details for.</para>
            </summary>
            <remarks>
            <para>
            Defaults to null, which matches all the application types.
            </para>
            <para>
            This parameter matches against the case sensitive exact application type names defined in the application manifest
            of all provisioned or provisioning application types. For example, the value "Test" does not match "TestApp" because it is only a partial match.
            This value should not contain the version of the application type, and matches all versions of the same application type name.
            To request all the application types do not set this value.
            </para>
            <para>
            ApplicationTypeNameFilter and ApplicationTypeDefinitionKindFilter can not be specified together.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedApplicationTypeQueryDescription.ApplicationTypeVersionFilter">
            <summary>
            <para>
            Gets or sets the application type version to get details for.
            </para>
            </summary>
            <remarks>
            <para>
            Defaults to null, which matches all the application type versions of a given application type name.
            This filter should be provided only if an application type name filter is also provided.
            </para>
            <para>
            This parameter matches against the case sensitive exact application type version defined in the application manifest
            of all provisioned or provisioning application types.
            For example, version "v1" does not match version "v1.0" because it is only a partial match.
            To request all the application type versions of an application type name, do not set this value.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedApplicationTypeQueryDescription.ContinuationToken">
            <summary>
            <para>Gets or sets the continuation token which can be used to retrieve the next page.</para>
            </summary>
            <remarks>
            <para>
            Defaults to null, which returns page one of query results.
            </para>
            <para>
            If too many results respect the filter, they may not fit into one message.
            Paging is used to account for this by splitting the collection of <see cref="T:System.Fabric.Query.ApplicationType"/>s into separate pages.
            The continuation token is used to know where the previous page left off, carrying significance only to the query itself.
            This value should be generated from
            running this query, and can be passed into the next query request in order to get subsequent pages.
            A non-null continuation token value is returned as part of the result only if there is a subsequent page.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedApplicationTypeQueryDescription.ExcludeApplicationParameters">
            <summary>
            <para>Gets or sets whether to exclude application parameters from the query result.</para>
            </summary>
            <remarks>
            <para>
            Defaults to false.
            </para>
            <para>
            Setting this to true leaves the <see cref="P:System.Fabric.Query.ApplicationType.DefaultParameters" /> blank.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedApplicationTypeQueryDescription.MaxResults">
            <summary>
            Gets or sets the max number of <see cref="T:System.Fabric.Query.ApplicationType" />s that can be returned per page.
            </summary>
            <remarks>
            <para>
            Defaults to the max value of type long.
            </para>
            <para>This defines only the upper bound for the number of application types returned, not a minimum.
            For example, if the page fits at most 1000 returned items according to max message size restrictions defined in the configuration,
            and the MaxResults value is set to 2000, then only 1000 results are returned, even if 2000 application types match
            the query description.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedApplicationTypeQueryDescription.ApplicationTypeDefinitionKindFilter">
            <summary>
            <para>Gets or sets the definition kind used to filter the application types that will be returned.
            </para>
            </summary>
            <value>
            <para>The definition kind used to filter the application types.</para>
            </value>
            <remarks>
            <para>If ApplicationTypeDefinitionKindFilter is not specified, the result would not be filtered by definition kind.</para>
            <para>ApplicationTypeNameFilter and ApplicationTypeDefinitionKindFilter can not be specified together.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedApplicationTypeQueryDescription.ToString">
            <summary>
            Overrides ToString() method to print all content of the query description.
            </summary>
            <returns>
            Returns a string containing all the properties of the query description.
            </returns>
        </member>
        <member name="T:System.Fabric.Description.PagedQueryDescriptionBase">
            <summary>
            <para>Represents the base class for all paged query descriptions.
            This class handles all functionality related to paging.</para>
            </summary>
            <remarks>
            <para>The default values of this query description ensure that results are returned from the first page and apply no paging related filters.
            This query description can be customized by setting individual properties.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedQueryDescriptionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.PagedQueryDescriptionBase"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.PagedQueryDescriptionBase.ContinuationToken">
            <summary>
            <para>Gets or sets the continuation token which can be used to retrieve the next page.</para>
            </summary>
            <remarks>
            <para>
            Defaults to null, which returns page one of query results.
            </para>
            <para>
            If too many results respect the filter, they may not fit into one message.
            Paging is used to account for this by splitting the collection of returned results into separate pages.
            The continuation token is used to know where the previous page left off, carrying significance only to the query itself.
            This value should be generated from
            running this query, and can be passed into the next query request in order to get subsequent pages.
            A non-null continuation token value is returned as part of the result only if there is a subsequent page.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedQueryDescriptionBase.MaxResults">
            <summary>
            Gets or sets the max number of result items that can be returned per page.
            </summary>
            <remarks>
            <para>
            If value is null, then no restrictions are placed on the number of results per page.
            </para>
            <para>This defines only the upper bound for the number of results returned, not a minimum.
            For example, if the page fits at most 1000 returned items according to max message size restrictions defined in the configuration,
            and the MaxResults value is set to 2000, then only 1000 results are returned, even if 2000 result items match
            the query description.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedQueryDescriptionBase.ToString">
            <summary>
            Overrides ToString() method to print all content of the query description.
            </summary>
            <returns>
            Returns a string containing all the properties of the query description.
            </returns>
        </member>
        <member name="T:System.Fabric.Description.PagedDeployedApplicationQueryDescription">
            <summary>
            <para>Describes a set of filters used when running the query
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationPagedListAsync(System.Fabric.Description.PagedDeployedApplicationQueryDescription)"/>.</para>
            </summary>
            <remarks>
            <para>This query description can be customized by setting individual properties.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedDeployedApplicationQueryDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.PagedDeployedApplicationQueryDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.PagedDeployedApplicationQueryDescription.NodeName">
            <summary>
            <para>Gets or sets the node on which to get a list of deployed applications.</para>
            </summary>
            <remarks>
            <para>
            This is a required parameter.
            </para>
            <para>
            This parameter matches against a case sensitive exact node name.
            For example, the value "Node" does not match "Node1" because it is only a partial match.
            An exception is thrown when the given node name does not match any node on the cluster.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedDeployedApplicationQueryDescription.ApplicationNameFilter">
            <summary>
            <para>Gets or sets the application name to get details for.</para>
            </summary>
            <remarks>
            <para>
            Defaults to null, which matches all the application names on the given node.
            If an application name is provided, a <see cref="T:System.Fabric.Query.DeployedApplicationPagedList" /> containing one item will be returned.
            </para>
            <para>
            This parameter matches against the case sensitive exact application names.
            For example, the value "fabric:/Test" does not match "fabric:/TestApp" because it is only a partial match.
            To request all the applications on the given node, do not set this value.
            An empty <see cref="T:System.Fabric.Query.DeployedApplicationPagedList" /> will be returned if the name does not match any applications on the node.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedDeployedApplicationQueryDescription.IncludeHealthState">
            <summary>
            <para>Gets or sets whether to include the health state of the deployed application from the query result.</para>
            </summary>
            <remarks>
            <para>
            Defaults to false.
            </para>
            <para>
            Setting this to true fills in the <see cref="P:System.Fabric.Query.DeployedApplication.HealthState" /> state. Otherwise, the value is 'Unknown'.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedDeployedApplicationQueryDescription.ToString">
            <summary>
            Overrides ToString() method to print all content of the query description.
            </summary>
            <returns>
            Returns a string containing all the properties of the query description.
            </returns>
        </member>
        <member name="T:System.Fabric.Description.PagedDeployedServicePackageQueryDescription">
            <summary>
            <para>Describes a set of filters used when running the query
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription)"/>.</para>
            </summary>
            <remarks>
            <para>This query description can be customized by setting individual properties.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedDeployedServicePackageQueryDescription.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.PagedDeployedServicePackageQueryDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.PagedDeployedServicePackageQueryDescription.NodeName">
            <summary>
            <para>Gets or sets the node on which to get a list of deployed service packages.</para>
            </summary>
            <remarks>
            <para>
            This is a required parameter.
            </para>
            <para>
            This parameter matches against a case sensitive exact node name.
            For example, the value "Node" does not match "Node1" because it is only a partial match.
            An exception is thrown when the given node name does not match any node on the cluster.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedDeployedServicePackageQueryDescription.ApplicationName">
            <summary>
            <para>Gets or sets the application name of the service packages to get details for.</para>
            </summary>
            <remarks>
            <para>
            This is a required parameter.
            </para>
            <para>
            This parameter matches against the case sensitive exact application names.
            For example, the value "fabric:/Test" does not match "fabric:/TestApp" because it is only a partial match.
            Error <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" /> will be returned if the name does not match any applications on the node.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedDeployedServicePackageQueryDescription.ServiceManifestNameFilter">
            <summary>
            <para>Gets or sets the service manifest name to get details for.</para>
            </summary>
            <remarks>
            <para>
            Defaults to null, which returns all service packages for the given application within page size limits.
            The service manifest names can be found in the application manifest.
            </para>
            <para>
            This query filters results to include only those service packages with the provided service manifest name.
            This parameter matches against the case sensitive exact service manifest names.
            For example, the value "Name" does not match "Name2" because it is only a partial match.
            An empty <see cref="T:System.Fabric.Query.DeployedServicePackagePagedList" /> will be returned if the name does not match any service manifests on the node.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.PagedDeployedServicePackageQueryDescription.IncludeHealthState">
            <summary>
            <para>Gets or sets whether or not to include the health state of the deployed service packages in the query result.</para>
            </summary>
            <remarks>
            <para>
            Defaults to false.
            </para>
            <para>
            Setting this to true fills in the <see cref="P:System.Fabric.Query.DeployedServicePackage.HealthState" /> field in the returned results. Otherwise, the HealthState value is 'Unknown'.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.PagedDeployedServicePackageQueryDescription.ToString">
            <summary>
            Overrides ToString() method to print all content of the query description.
            </summary>
            <returns>
            Returns a string containing all the properties of the query description.
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ContainerHostEntryPointDescription">
            <summary>
            <para>Provides information about the executable entry point.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ContainerHostEntryPointDescription.ImageName">
            <summary>
            <para>Gets or sets the Container Image name as specified in the service manifest.</para>
            </summary>
            <value>
            <para>The Container Image name as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ContainerHostEntryPointDescription.Commands">
            <summary>
            <para>Gets or sets the commands passed to the container as specified in the service manifest. </para>
            </summary>
            <value>
            <para>The commands passed to the container as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ContainerHostEntryPointDescription.EntryPoint">
            <summary>
            <para>Gets the entry point for the Contianer.</para>
            </summary>
            <value>
            <para>The entry point for the Contianer.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ContainerHostEntryPointDescription.ToString">
            <summary>
            <para>Gets the string representation of this entry point.</para>
            </summary>
            <returns>
            <para>The string representation of this entry point.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.ReplicaSetConfiguration">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="P:System.Fabric.ReplicaSetConfiguration.WriteQuorum">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="P:System.Fabric.ReplicaSetConfiguration.Replicas">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="T:System.Fabric.Ordering">
            <summary>
            Defines values for Ordering.
            </summary>
        </member>
        <member name="F:System.Fabric.Ordering.Desc">
            <summary>
            Sort load descending.
            </summary>
        </member>
        <member name="F:System.Fabric.Ordering.Asc">
            <summary>
            Sort load ascending.
            </summary>
        </member>
        <member name="T:System.Fabric.OrderingUtility">
            <summary>
            Utility methods for ordering class.
            </summary>
        </member>
        <member name="M:System.Fabric.OrderingUtility.GetString(System.Fabric.Ordering)">
            <summary>
            Get string from Ordering type.
            </summary>
            <param name="ordering">Represents ordering.</param>
            <returns>String that represents ordering.</returns>
        </member>
        <member name="M:System.Fabric.OrderingUtility.FromString(System.String)">
            <summary>
            Creates oreding from string.
            </summary>
            <param name="orderingStr">Represents ordering.</param>
            <returns>Ordering type.</returns>
        </member>
        <member name="T:System.Fabric.Result.StartNodeResult">
            <summary>
            Returns Start node result object.
            </summary>
            <remarks>
            This class returns the NodeResult for Start Node action.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.StartNodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Start node result constructor.
            </summary>
            <param name="nodeName">Node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="T:System.Fabric.Result.StopNodeResult">
            <summary>
            Returns Stop node result object.
            </summary>
            <remarks>
            This class returns the NodeResult for Stop Node action.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.StopNodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Stop node result constructor.
            </summary>
            <param name="nodeName">Node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="T:System.Fabric.Result.TestCommandResult">
            <summary>
            Base class for the result objects.
            </summary>
            <remarks>
            This class conditionally contains the Exception
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.TestCommandResult.#ctor">
            <summary>
            The base class for other test command result classes to derive from.  The only property in this class is Exception.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.TestCommandResult.Exception">
            <summary>
            This property contains an exception representing the reason a test command faulted.  It is not valid unless the corresponding TestCommandProgressState is Faulted. 
            </summary>
            <value>The Exception object.</value>
        </member>
        <member name="T:System.Fabric.Result.RestartDeployedCodePackageResult">
            <summary>
            Returns Restart deployed code package result object. 
            </summary>
            <remarks>
            This class returns nodeName, applicationName, serviceManifestName, codePackageName, codePackageInstanceId and SelectedReplica information 
            for which the deployed code package action was called. ReplicaSelector will be none in case application is selecetd using nodename, 
            application name, service manifest, code package name, and code package instance id.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartDeployedCodePackageResult.#ctor(System.String,System.Uri,System.String,System.String,System.String,System.Int64,System.Fabric.SelectedReplica)">
            <summary>
            Restart deployed code package result constructor.
            </summary>
            <param name="nodeName">node name</param>
            <param name="applicationName">application name</param>
            <param name="serviceManifestName">service manifest name</param>
            <param name="servicePackageActivationId">service package ActivationId</param>
            <param name="codePackageName">code package name</param>
            <param name="codePackageInstanceId">code package instance id</param>
            <param name="selectedReplica">selected replica</param>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.ApplicationName">
            <summary>
            Gets Application name.
            </summary>
            <value>The application name.</value>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.NodeName">
            <summary>
            Gets node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.ServiceManifestName">
            <summary>
            Gets service manifest name.
            </summary>
            <value>The service manifest name.</value>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            A string representing ActivationId of deployed service package. 
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specfied, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Result.RestartDeployedCodePackageResult.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.CodePackageName">
            <summary>
            Gets code package name.
            </summary>
            <value>The code package name.</value>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.CodePackageInstanceId">
            <summary>
            Gets code package instance id.
            </summary>
            <value>The code package instance id, as a long.</value>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.SelectedReplica">
            <summary>
            Gets selected replica.
            </summary>
            <value>The SelectedReplica object.</value>
        </member>
        <member name="M:System.Fabric.Result.RestartDeployedCodePackageResult.ToString">
            <summary>
            Formats the data inside RestartDeployedCodePackageResult as a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:System.Fabric.Result.RemoveReplicaResult">
            <summary>
            Returns Remove replica result object.
            </summary>
            <remarks>
            This class returns the selected replica for which remove action was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RemoveReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Remove replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="T:System.Fabric.Result.MovePrimaryResult">
            <summary>
            Represents a move primary replica result object.
            </summary>
            <remarks>
            This class returns the nodeName and SelectedPartition information for which move primary replica action was called. 
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.MovePrimaryResult.#ctor(System.String,System.Fabric.SelectedPartition)">
            <summary>
            Move primary replica result object constructor.
            </summary>
            <param name="nodeName">Node name where primary will be moving.</param>
            <param name="selectedPartition">Selected partition</param>
        </member>
        <member name="P:System.Fabric.Result.MovePrimaryResult.NodeName">
            <summary>
            Gets node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Result.MovePrimaryResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
            <value>The SelectedPartition object.</value>
        </member>
        <member name="M:System.Fabric.Result.MovePrimaryResult.ToString">
            <summary>
            Formats NodeName and SelectedPartition into a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:System.Fabric.Result.MoveSecondaryResult">
            <summary>
            Represents move secondary replica result object.
            </summary>
            <remarks>
            This class returns currentSecondaryNodeName, where secondary replica was present before movement, 
            newSecondaryNodeName where the SelectedReplica is moved and SelectedPartition information that represents 
            the selected secondary replica.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.MoveSecondaryResult.#ctor(System.String,System.String,System.Fabric.SelectedPartition)">
            <summary>
            Move secondary replica result constructor.
            </summary>
            <param name="currentSecondaryNodeName">Current node name where secodary replica exist.</param>
            <param name="newSecondaryNodeName">New node name where secondary replica need to move.</param>
            <param name="selectedPartition">Selected partion result object</param>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.CurrentSecondaryNodeName">
            <summary>
            Gets current node name for the target secondary replica.
            </summary>
            <returns>The node name for the target secondary replica.</returns>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.NewSecondaryNodeName">
            <summary>
            Gets node name where secondary replica will move to.
            </summary>
            <value>The name of the node where the target secondary replica will move to.</value>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
            <value>The SelectedPartition object.</value>
        </member>
        <member name="M:System.Fabric.Result.MoveSecondaryResult.ToString">
            <summary>
            Formats CurrentSecondaryNodeName, NewSecondaryNodeName, and SelectedPartition into a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:System.Fabric.Result.MoveInstanceResult">
            <summary>
            Represents move instance replica result object.
            </summary>
            <remarks>
            This class returns currentInstanceNodeName, where instance was present before movement, 
            newInstanceNodeName where the Selected instance is moved and SelectedPartition information that represents 
            the selected partition.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.MoveInstanceResult.#ctor(System.String,System.String,System.Fabric.SelectedPartition)">
            <summary>
            Move instance result constructor.
            </summary>
            <param name="currentInstanceNodeName">Current node name where instance exist.</param>
            <param name="newInstanceNodeName">New node name where instance need to move.</param>
            <param name="selectedPartition">Selected partion result object</param>
        </member>
        <member name="P:System.Fabric.Result.MoveInstanceResult.CurrentInstanceNodeName">
            <summary>
            Gets current node name for the target instance.
            </summary>
            <returns>The node name for the target instance.</returns>
        </member>
        <member name="P:System.Fabric.Result.MoveInstanceResult.NewInstanceNodeName">
            <summary>
            Gets node name where instance will move to.
            </summary>
            <value>The name of the node where the target instance will move to.</value>
        </member>
        <member name="P:System.Fabric.Result.MoveInstanceResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
            <value>The SelectedPartition object.</value>
        </member>
        <member name="M:System.Fabric.Result.MoveInstanceResult.ToString">
            <summary>
            Formats CurrentInstanceNodeName, NewInstanceNodeName, and SelectedPartition into a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:System.Fabric.Result.InvokeDataLossResult">
            <summary>
            Returns Invoke data loss result object.
            </summary>
            <remarks>
            This class returns the SelectedPartition information for which invoke data loss action was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.InvokeDataLossResult.#ctor(System.Fabric.SelectedPartition)">
            <summary>
            Invoke data loss result object constructor.
            </summary>
            <param name="selectedPartition">Selected partition</param>
        </member>
        <member name="P:System.Fabric.Result.InvokeDataLossResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
            <value>The partition selected by the test command.</value>
        </member>
        <member name="M:System.Fabric.Result.InvokeDataLossResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string containing information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="T:System.Fabric.Result.InvokeQuorumLossResult">
            <summary>
            Returns Invoke quorum loss result object.
            </summary>
            <remarks>
            This class returns SelectedPartition information for which Invoke Quorum Loss action was called. 
            </remarks>
        </member>
        <member name="P:System.Fabric.Result.InvokeQuorumLossResult.SelectedPartition">
            <summary>
            Gets selecetd partition.
            </summary>
            <value>The partition selected by the test command.</value>
        </member>
        <member name="M:System.Fabric.Result.InvokeQuorumLossResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string containing information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="T:System.Fabric.Result.NodeCommandResult">
            <summary>
            Returns node command result object.
            </summary>    
        </member>
        <member name="P:System.Fabric.Result.NodeCommandResult.NodeResult">
            <summary>
            Gets the NodeResult object, which contains the information about the target node.
            </summary>
            <value>The NodeResult object.</value>
        </member>
        <member name="M:System.Fabric.Result.NodeCommandResult.ToString">
            <summary>
            Returns the string representation of the Exception, if the command failed.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.NodeResult">
            <summary>
            Returns Node result object. 
            </summary>
            <remarks>
            This class returns nodeName and nodeInstanceId. 
            This class is part of RestartNode, StartNode, StopNode actions result structure.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.NodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Node result constructor.
            </summary>
            <param name="nodeName">node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="P:System.Fabric.Result.NodeResult.NodeName">
            <summary>
            Gets node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Result.NodeResult.NodeInstance">
            <summary>
            Gets node instance id.
            </summary>
            <value>The node instance id.</value>
        </member>
        <member name="M:System.Fabric.Result.NodeResult.ToString">
            <summary>
            Returns a string like: "NodeName: string, NodeInstance: BigInteger"
            </summary>
            <returns>A string</returns>
        </member>
        <member name="T:System.Fabric.Result.ReplicaResult">
            <summary>
            Replica result object. This class returns the SelectedReplica information. 
            </summary>
        </member>
        <member name="M:System.Fabric.Result.ReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="P:System.Fabric.Result.ReplicaResult.SelectedReplica">
            <summary>
            Gets selected replica.
            </summary>
            <value>The SelectedReplica object.</value>
        </member>
        <member name="T:System.Fabric.Result.RestartNodeResult">
            <summary>
            Returns Restart node result object.
            </summary>
            <remarks>
            This class returns the SelectedReplica and NodeResult for RestartNode Action.  
            </remarks>
        </member>
        <member name="P:System.Fabric.Result.RestartNodeResult.NodeResult">
            <summary>
            Gets the NodeResult.
            </summary>
            <value>The NodeResult object.</value>
        </member>
        <member name="P:System.Fabric.Result.RestartNodeResult.SelectedReplica">
            <summary>
            Gets the SelectedReplica.
            SelectedReplica will be none in case the RestartNode Testability action was performed using node name.
            </summary>
            <value>The SelectedReplica object.</value>
        </member>
        <member name="M:System.Fabric.Result.RestartNodeResult.ToString">
            <summary>
            Formats NodeResult and SelectedReplica into a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:System.Fabric.Result.RestartPartitionResult">
            <summary>
            Returns Restart partition result object.
            </summary>
            <remarks>
            This class returns the Selected partition for which restart partition action was called.
            </remarks>    
        </member>
        <member name="M:System.Fabric.Result.RestartPartitionResult.#ctor(System.Fabric.SelectedPartition)">
            <summary>
            Restart partition result constructor.
            </summary>
            <param name="selectedPartition">selected partition</param>
        </member>
        <member name="P:System.Fabric.Result.RestartPartitionResult.SelectedPartition">
            <summary>
            Gets selected partition.
            </summary>
            <value>The partition selected by the test command.</value>
        </member>
        <member name="M:System.Fabric.Result.RestartPartitionResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string containing information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="T:System.Fabric.Result.RestartReplicaResult">
            <summary>
            Returns Restart replica result object.
            </summary>
            <remarks>
            This class returns the selected replica for which Restart Replica actions was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Restart replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="T:System.Fabric.Result.ReportCompletionResult">
            <summary>
            Returns Complete replica result object.
            </summary>
            <remarks>
            This class returns the selected replica for which report completion actions was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.ReportCompletionResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Complete replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="T:System.Fabric.Result.PartitionDataLossResult">
            <summary>
            Returns Invoke data loss result object.
            </summary>
            <remarks>
            This class returns the SelectedPartition information for which invoke data loss action was called.
            </remarks>
        </member>
        <member name="P:System.Fabric.Result.PartitionDataLossResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
            <value>The SelectedPartition object.</value>
        </member>
        <member name="M:System.Fabric.Result.PartitionDataLossResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string containing information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="T:System.Fabric.Result.PartitionQuorumLossResult">
            <summary>
            Returns Invoke quorum loss result object.
            </summary>
            <remarks>
            This class returns SelectedPartition information for which Invoke Quorum Loss action was called. 
            </remarks>
        </member>
        <member name="P:System.Fabric.Result.PartitionQuorumLossResult.SelectedPartition">
            <summary>
            Gets selecetd partition.
            </summary>
            <value>The SelectedPartition object.</value>
        </member>
        <member name="M:System.Fabric.Result.PartitionQuorumLossResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string containing information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="T:System.Fabric.Result.PartitionRestartResult">
            <summary>
            Returns Restart partition result object.
            </summary>
            <remarks>
            This class returns the Selected partition for which restart partition action was called.
            </remarks>    
        </member>
        <member name="P:System.Fabric.Result.PartitionRestartResult.SelectedPartition">
            <summary>
            Gets selected partition.
            </summary>
            <value>The SelectedPartition object.</value>
        </member>
        <member name="M:System.Fabric.Result.PartitionRestartResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string containing information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.FailoverTestScenario">
            <summary>
            The FailoverTestScenario is a test which runs a series of faults against a specific partition defined by the PartitionSelector in the FailoverTestScenarioParameters.
            </summary>
            <remarks>
            The faults induced put the partition through some specific failover scenarios to ensure those paths are tested and exercised. Running your workload against the service
            at the same time as the test being run will increase the chances of inducing and discovering bugs with the service. The faults induced for the
            Primary, Secondaries and stateless instances are RestartReplica(only persisted), RemoveReplica, ResartDeployedCodePackage, MovePrimary (only stateful),
            MoveSecondary (Only stateful), MoveInstance (Only stateless), RestartPartition (no data loss).
            </remarks>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.FailoverTestScenarioParameters)">
            <summary>
            Constructor for the FailoverTestScenario.
            </summary>
            <param name="fabricClient">FabricClient object which will be used to connect to the cluster and induce the faults.</param>
            <param name="testScenarioParameters">FailoverTestScenarioParameters which define the configuration for the failover test.</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters">
            <summary>
            This class defines all the test parameters to configure the FailoverTestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.#ctor(System.Fabric.PartitionSelector,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor for the FailoverTestScenarioParameters.
            </summary>
            <param name="partitionSelector">PartitionSelector which gives the partition being targeted for the test.</param>
            <param name="timeToRun">The total time for which the failover test will run.</param>
            <param name="maxServiceStabilizationTimeout">The maximum amount of time to wait for the service to stabilize after a fault before failing the test.</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.PartitionSelector">
            <summary>
            The PartitionSelector which gives the partition that needs to be targeted for the test.
            </summary>
            <value>
            Returns <see cref="T:System.Fabric.PartitionSelector" />
            </value>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.MaxServiceStabilizationTimeout">
            <summary>
            The maximum amount of time to wait for the service to stabilize after a fault before failing the test.
            </summary>
            <value>
            Before start exercising failover scenarios, FailoverTestScenario waits at most this amount of time for the service to stabilize and to become healthy.
            </value>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.TestScenario">
            <summary>
            Base class for TestScenarios which defines all the common methods and functionality.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.TestScenarioParameters)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="fabricClient">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="testScenarioParameters">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenario.ScenarioParameters">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <value>
            Returns <see cref="T:System.Fabric.Testability.Scenario.TestScenarioParameters" />.
            </value>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenario.FabricClient">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <value>
            Returns <see cref="T:System.Fabric.FabricClient" />.
            </value>
        </member>
        <member name="F:System.Fabric.Testability.Scenario.TestScenario.ProgressChanged">
            <summary>
            Event handler which exposes the current progress of the test. When handled it gives you the ProgressChangedEventArgs
            which gives out a total % of the test which has already completed and the last operation (string) that was performed 
            which can be useful for logging.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This method executes the test with the specified parameter set passed into the constructor.
            </summary>
            <param name="token">the Cancellation token for the async operation.</param>
            <exception cref= "T:System.Fabric.FabricValidationException" >If any service does not stabilize within the specified timeout.</exception>
            <returns>Returns a Task which represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.Dispose">
            <summary>
            This method will dispose the TestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns>A task representing the execution of the TestScenario.</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns>A task representing the validation operation - implemented by the derived TestScenario - that needs to run when OnExecuteAsync has completed.</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.GetElapsedTime">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <returns>This API supports the Service Fabric platform and is not meant to be called from your code</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ReportProgress(System.String)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="progressReport">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ReportProgress(System.String,System.Object[])">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="format">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="args">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.HandleTaskComplete(System.Threading.Tasks.Task,System.String,System.String)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="t">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="actionId">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="actionName">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.TestScenarioParameters">
            <summary>
            Base class for parameters passed into all the TestScenarios which defines all the common parameters.
            </summary>
        </member>
        <member name="F:System.Fabric.Testability.Scenario.TestScenarioParameters.WaitTimeBetweenFaultsDefault">
            <summary>
            Default value for WaitTimeBetweenFaults used if value not specified by user.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenarioParameters.#ctor(System.TimeSpan)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="timetoRun">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenarioParameters.TimeToRun">
            <summary>
            Total time for which the scenario will run before ending.
            </summary>
            <value>
            Returns the max run-time of the scenario as TimeSpan
            </value>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenarioParameters.WaitTimeBetweenFaults">
            <summary>
            The maximum wait time between consecutive faults: the larger the value, the lower the concurrency (of faults).
            </summary>
            <value>
            Returns the maximum wait time between two consecutive faults as a TimeSpan
            </value>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.ChaosTestScenario">
            <summary>
            The ChaosTestScenario is a long running scenario which keeps inducing failover and faults into the cluster up until the TimetoRun has expired.
            </summary>
            <remarks>
            The test will induce up to 'maxConcurrentFaults' every iteration and then will validate the health and availability of all the services in the cluster before
            moving on to the next iteration of faults. If at any point the services are not available or healthy by 'maxClusterStabilizationTimeout' the test will fail with a 
            FabricValidationException. For every iteration the concurrent faults that are induced into the system ensure safety such that the faults together will not cause any service to
            become unavailable or lose any data. This assumes no faults induced from the outside or any unexpected failures which if they happen (concurrent with the chaos test faults)
            can cause data availability loss. This is a very good test to run against your test or staging clusters which test workloads are running to ensure that faults in the system do not 
            result in any sort of availability loss or other unexpected service issues.
            </remarks>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.ChaosTestScenarioParameters)">
            <summary>
            Constructor for the ChaosTestScenario.
            </summary>
            <param name="fabricClient">FabricClient object which will be used to connect to the cluster and induce the faults.</param>
            <param name="chaosScenarioParameters">ChaosTestScenarioParameters which define the configuration for the chaos test.</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.ExecuteFaultIterationAsync(System.Threading.CancellationToken)">
            <summary>
            Get test actions for the iteration.
            Execute each action and wait for a random wait duration.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters">
            <summary>
            This class defines all the test parameters to configure the ChaosTestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.#ctor(System.TimeSpan,System.Int64,System.Boolean,System.TimeSpan)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters" /> class.</para>
            </summary>
            <param name="maxClusterStabilizationTimeout">The maximum amount of time to wait for the entire cluster to stabilize after a fault iteration before failing the test.</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higher the concurrency the more aggressive the failovers 
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="enableMoveReplicaFaults">Enables or disables the MovePrimary and MoveSecondary faults.</param>
            <param name="timeToRun"></param>
            <returns>The object containing the Chaos scenario parameters, typed as ChaosScenarioParameters</returns>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.WaitTimeBetweenIterations">
            <summary>
            Wait time between two iterations for a random duration bound by this value.
            </summary>
            <value>
            The time-separation between two consecutive iterations of the ChaosTestScenario
            </value>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.MaxClusterStabilizationTimeout">
            <summary>
            The maximum amount of time to wait for the cluster to stabilize after a fault before failing the test.
            </summary>
            <value>
            After each iteration, the ChaosTestScenario waits for at most this amount of time for the cluster to become healthy
            </value>
        </member>
        <member name="T:System.Fabric.EntryPointStatus">
            <summary>
            <para>Specifies the status of the CodePackage EntryPoint deployed on a node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Invalid">
            <summary>
            <para>The status of the entry point is unknown or invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Pending">
            <summary>
            <para>The entry point is scheduled to be started.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Starting">
            <summary>
            <para>The entry point is being started.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Started">
            <summary>
            <para>The entry point was started successfully and is running.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Stopping">
            <summary>
            <para>The entry point is being stopped.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Stopped">
            <summary>
            <para>The entry point is not running.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Epoch">
            <summary>
            <para> Represents the current version of the partition in Service Fabric. </para>
            </summary>
            <remarks>
            <para>An Epoch is a configuration number for the partition as a whole. 
            When the configuration of the replica set changes, for example when the Primary replica changes, 
            the operations that are replicated from the new Primary replica are said to be a new Epoch 
            from the ones which were sent by the old Primary replica. 
            The fact that the Primary has changed is not directly visible to Secondary replicas, 
            which are usually unaffected by the failure that affected the original Primary replica. 
            To track that the Primary replica has changed has to be communicated to the Secondary replica. 
            This communication occurs via the <see cref="M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)" /> method. 
            Most services can ignore the details of the inner fields of the Epoch as it is usually sufficient to know that the Epoch has changed 
            and to compare Epochs to determine relative ordering of operations and events in the system. 
            Comparison operations are provided for this purpose.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Epoch.#ctor(System.Int64,System.Int64)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Epoch" /> class with the specified 
            data loss number and configuration number.</para>
            </summary>
            <param name="dataLossNumber">
            <para>An <see cref="T:System.Int64" /> representing an increasing value which is updated 
            whenever data loss is suspected.</para>
            </param>
            <param name="configurationNumber">
            <para>An <see cref="T:System.Int64" /> representing an increasing value that is updated whenever 
            the configuration of this replica set changes.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Epoch.DataLossNumber">
            <summary>
            <para>Gets the current data loss number in this <see cref="T:System.Fabric.Epoch" />.</para>
            </summary>
            <value>
            <para>Returns an <see cref="T:System.Int64" /> representing the current data loss number.</para>
            </value>
            <remarks>
            <para>The data loss number property is an increasing value which is updated 
            whenever data loss is suspected, as when loss of a quorum of replicas in the replica set 
            that includes the Primary replica.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Epoch.ConfigurationNumber">
            <summary>
            <para>Gets or sets the current configuration number property in this <see cref="T:System.Fabric.Epoch" />.</para>
            </summary>
            <value>
            <para>Returns an <see cref="T:System.Int64" /> representing the configuration number.</para>
            </value>
            <remarks>
            <para>The configuration number is an increasing value that is updated whenever the configuration 
            of this replica set changes. The services are informed of the current configuration number 
            only when <see cref="M:System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)" />
            method is called as a result of an attempt to change the Primary replica of the replica set.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Epoch.op_Equality(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether two specified <see cref="T:System.Fabric.Epoch" /> objects have the same value.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_Inequality(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether two specified <see cref="T:System.Fabric.Epoch" /> objects have different values.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left" /> is different than the value of <paramref name="right" />; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_LessThan(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch" /> object is less than another specified <see cref="T:System.Fabric.Epoch" /> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left" /> is less than the value of <paramref name="right" />; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_LessThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch" /> object is less than or equal to another specified <see cref="T:System.Fabric.Epoch" /> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left" /> is less than or equal to the value of <paramref name="right" />; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_GreaterThan(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch" /> object is greater than another specified <see cref="T:System.Fabric.Epoch" /> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left" /> is greater than the value of <paramref name="right" />; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_GreaterThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch" /> object is greater than or equal to another specified <see cref="T:System.Fabric.Epoch" /> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left" /> is greater than or equal to the value of <paramref name="right" />; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.Equals(System.Object)">
            <summary>
            <para>Determines whether the specified object is equal to the current object.</para>
            </summary>
            <param name="obj">
            <para>The object to compare with the current object.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified object is equal to the current object; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.GetHashCode">
            <summary>
            <para>Serves as a hash function for the <see cref="T:System.Fabric.Epoch" /> type.</para>
            </summary>
            <returns>
            <para>A <see cref="T:System.Int32" /> representing a hash code for the current <see cref="T:System.Fabric.Epoch" />..</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.Equals(System.Fabric.Epoch)">
            <summary>
            <para>Determines whether the specified <see cref="T:System.Fabric.Epoch" /> object is equal to the current <see cref="T:System.Fabric.Epoch" /> object.</para>
            </summary>
            <param name="other">
            <para>The object to compare with the current <see cref="T:System.Fabric.Epoch" /> object.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified <see cref="T:System.Fabric.Epoch" /> object is equal to the current <see cref="T:System.Fabric.Epoch" /> object; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.CompareTo(System.Fabric.Epoch)">
            <summary>
            <para>Compares this <see cref="T:System.Fabric.Epoch" /> object to the specified <paramref name="other" /><see cref="T:System.Fabric.Epoch" /> object.</para>
            </summary>
            <param name="other">
            <para>The <see cref="T:System.Fabric.Epoch" /> object to compare.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricClient">
            <summary>
            <para>Creates and manages Service Fabric services and other entities.</para>
            </summary>
            <remarks>
                <para>It is highly recommended that you share FabricClients as much as possible.
                This is because the FabricClient has multiple optimizations such as caching and batching that you would not be able to fully utilize otherwise.
                </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.FabricClient.ApplicationManagementClient">
            <summary>
            <para>Provides the functionality to manage Service Fabric applications.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)">
            <summary>
              <para>Creates and instantiates the specific Service Fabric application.</para>
            </summary>
            <param name="applicationDescription">
              <para>The description of the application.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound" />: The requested application type has not been provisioned yet.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
              <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
              <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
              <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                The application capacity parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes"/>,
                <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes"/> and
                <see cref="F:System.Fabric.Description.ApplicationDescription.Metrics"/> for correct specification of application capacity parameters.
              </para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Creates and instantiates the specific Service Fabric application.</para>
            </summary>
            <param name="applicationDescription">
              <para>The description of the application.</para>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound" />: The requested application type has not been provisioned yet.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
              <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
              <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
              <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                The application capacity parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes"/>,
                <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes"/> and
                <see cref="F:System.Fabric.Description.ApplicationDescription.Metrics"/> for correct specification of application capacity parameters.
              </para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)">
            <summary>
            Updates a Service Fabric application.
            </summary>
            <param name="applicationUpdateDescription">Application update description.</param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.
                </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.
                </para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpdateInProgress" />: Another application update is already in progress.
                </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                The application update parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes"/>,
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes"/> and
                <see cref="F:System.Fabric.Description.ApplicationUpdateDescription.Metrics"/> for correct specification of application capacity parameters.
              </para>
              <para>
                It is possible that parameters in <see cref="T:System.Fabric.Description.ApplicationUpdateDescription"/> are valid, but when combined with existing
                application capacity parameters they produce an invalid combination. For example, setting <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes"/> to
                a value that is higher than the one that was specified in <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes"/> when application was created.
              </para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Updates a Service Fabric application.
            </summary>
            <param name="applicationUpdateDescription">Application update description.</param>
            <param name="timeout">Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</param>
            <param name="cancellationToken">The CancellationToken that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.
                </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.
                </para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpdateInProgress" />: Another application update is already in progress.
                </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                The application update parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes"/>,
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes"/> and
                <see cref="F:System.Fabric.Description.ApplicationUpdateDescription.Metrics"/> for correct specification of application capacity parameters.
              </para>
              <para>
                It is possible that parameters in <see cref="T:System.Fabric.Description.ApplicationUpdateDescription"/> are valid, but when combined with existing
                application capacity parameters they produce an invalid combination. For example, setting <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes"/> to
                a value that is higher than the one that was specified in <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes"/> when application was created.
              </para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri)">
            <summary>
            <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription)">
            <summary>
            <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
            </summary>
            <param name="deleteApplicationDescription">
            <para>The description of the application to be deleted.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
            <para>A forceful deletion call can convert on-going normal deletion to forceful one.</para> 
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
            </summary>
            <param name="deleteApplicationDescription">
            <para>The description of the application to be deleted.</para>
            </param>
            <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
            <para>A forceful deletion call can convert on-going normal deletion to forceful one.</para> 
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)">
            <summary>
            <para>Provisions or registers a Service Fabric application type with the cluster.</para>
            </summary>
            <param name="applicationPackagePathInImageStore">
            <para>The relative path for the application package in the image store specified during <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)"/>.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: There are errors in the manifests being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress" />: Another version of the application type is currently being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This is mandatory before an application instance can be created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Provision or register an application type with the cluster.</para>
            </summary>
            <param name="applicationPackagePathInImageStore">
            <para>The relative path for the application package in the image store specified during <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)"/>.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: There are errors in the manifests being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress" />: Another version of the application type is currently being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This is mandatory before an application instance can be created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescriptionBase)">
            <summary>
            <para>Provision or register an application type with the cluster.</para>
            </summary>
            <param name="description">
            <para>The description of the provision request.
            To provision a package previously copied to the image store, use <see cref="T:System.Fabric.Description.ProvisionApplicationTypeDescription"/>.
            To provision a package from an external store, use <see cref="T:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription"/>.
            </para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: There are errors in the manifests being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress" />: Another version of the application type is currently being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>The provision operation is mandatory before an application instance can be created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescriptionBase,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Provision or register an application type with the cluster.</para>
            </summary>
            <param name="description">
            <para>Description of the provision request.
            To provision a package previously copied to the image store, use <see cref="T:System.Fabric.Description.ProvisionApplicationTypeDescription"/>.
            To provision a package from an external store, use <see cref="T:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription"/>.
            </para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: There are errors in the manifests being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress" />: Another version of the application type is currently being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>The provision operation is mandatory before an application instance can be created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)">
            <summary>
            <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the application type.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the application type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.Fabric.Description.UnprovisionApplicationTypeDescription)">
            <summary>
            <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
            </summary>
            <param name="description">
            <para>Describes parameters for the unprovision operation.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.Fabric.Description.UnprovisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
            </summary>
            <param name="description">
            <para>Describes parameters for the unprovision operation.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)">
            <summary>
              <para>Performs upgrade on an application instance.</para>
            </summary>
            <param name="upgradeDescription">
              <para>The description of the upgrade policy and the application to be upgrade.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The upgrade is invalid with respect to the provisioned manifests. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError" />: The application type does not exist. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is already being upgraded to the requested version.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
              <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
              <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
              <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
              <para>  
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Performs upgrade on an application instance.</para>
            </summary>
            <param name="upgradeDescription">
              <para>The description of the upgrade policy and the application to be upgraded.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The token that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The upgrade is invalid with respect to the provisioned manifests. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError" />: The application type does not exist. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is already being upgraded to the requested version.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
              <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
              <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
              <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
              <para>  
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)">
            <summary>
            <para>Modifies the upgrade parameters of a pending application upgrade.</para>
            </summary>
            <param name="updateDescription">
            <para>Description of parameters to modify. Unspecified parameters are left unmodified and will retain their current value in the upgrade.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading" />: There is no pending application upgrade to modify.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Modifies the upgrade parameters of a pending application upgrade.</para>
            </summary>
            <param name="updateDescription">
            <para>Description of parameters to modify. Unspecified parameters are left unmodified and will retain their current value in the upgrade.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The token that the operation is observing. It can be used to propagate a notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading" />: There is no pending application upgrade to modify.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri)">
            <summary>
            <para>Starts rolling back the current application upgrade.</para>
            </summary>
            <param name="applicationName">
            <para>Name of the application</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading" />: There is no pending upgrade for the specified application to rollback.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Starts rolling back the current application upgrade</para>
            </summary>
            <param name="applicationName">
            <para>Name of the application</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri)">
            <summary>
            <para>Retrieves the upgrade progress of the specified application instance.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the upgrade progress of the specified application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieves the upgrade progress of the specified application instance.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the upgrade progress of the specified application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)">
            <summary>
            <para>Instructs the Service Fabric to upgrade the application instance in the next upgrade domain.</para>
            </summary>
            <param name="upgradeProgress">
            <para>–The Upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <see cref="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState" /> property should be Pending before calling this method.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instructs the upgrade to continue with the application instance in the next upgrade domain.</para>
            </summary>
            <param name="upgradeProgress">
            <para>The upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <see cref="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState" /> property should be Pending before calling this method.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode(System.String,System.String,System.String,System.Fabric.PackageSharingPolicyList,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Downloads packages associated with service manifest to image cache on specified node. </para>
            </summary>
            <param name="applicationTypeName">
              <para>ApplicationTypeName associated with service manifest to be downloaded</para>
            </param>
            <param name="applicationTypeVersion">
              <para>Version of ApplicationType </para>
            </param>
            <param name="serviceManifestName">
              <para>Name of service manifest whose packages need to be downloaded</para>
            </param>
            <param name="sharingPolicies">
              <para>Sharing policy representing packages that need to be copied to shared folders</para>
            </param>
            <param name="nodeName">
              <para>Name of the node where packages need to be downloaded.</para>
            </param>
            <param name="timeout">
              <para>The maximum amount of time the system will allow this operation to continue before returning T:System.TimeoutException</para>
            </param>
            <param name="cancellationToken">
              <para>The <see cref="T:System.Threading.CancellationToken" />that the operation is observing. It can be used to propagate notification that the operation should be canceled</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String)">
            <summary>
            <para>Gets the contents of a provisioned Application Manifest stored in the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name as specified in the Application Manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The type version as specified in the Application Manifest.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the raw XML string contents of the Application Manifest.</para>
            </returns>
            <exception cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
            <para>The requested application type and version has not been provisioned.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the contents of a provisioned Application Manifest stored in the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name as specified in the Application Manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The type version as specified in the Application Manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the raw XML string contents of the Application Manifest.</para>
            </returns>
            <exception cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
            <para>The requested application type and version has not been provisioned.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String)">
            <summary>
            <para>Uploads an application package to the Image Store in preparation for provisioning a new application type.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync"/>. 
            </para>
            </param>
            <param name="applicationPackagePath">
            <para>The full path to the source application package.</para>
            </param>
            <param name="applicationPackagePathInImageStore">
            <para>The relative path for the destination in the Image Store. This path is created relative to the root directory in the image store and used as the destination for the application package copy.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>The timeout of the operation will default to 30 minutes for native image store and there is no timeout capacity for XStore and file share. Can also consider specifying proper timeout value in the overloading function <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)"/></para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            <para>Uploads an application package to the Image Store in preparation for provisioning a new application type.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync"/>. 
            </para>
            </param>
            <param name="applicationPackagePath">
            <para>The full path to the source application package.</para>
            </param>
            <param name="applicationPackagePathInImageStore">
            <para>The relative path for the destination in the Image Store. This path is created relative to the root directory in the image store and used as the destination for the application package copy.</para>
            </param>
            <param name="timeout">
            <para>The timeout of copying application package operation</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan)">
            <summary>
            <para>Uploads an application package to the Image Store in preparation for provisioning a new application type.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync"/>. 
            </para>
            </param>
            <param name="applicationPackagePath">
            <para>The full path to the source application package.</para>
            </param>
            <param name="applicationPackagePathInImageStore">
            <para>The relative path for the destination in the Image Store. This path is created relative to the root directory in the image store and used as the destination for the application package copy.</para>
            </param>
            <param name="progressHandler">
            <para>The progress handler to retrieve real time progress information</para>
            </param>
            <param name="timeout">
            <para>The timeout of copying application package operation</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para><see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)">
            <summary>
            <para>Deletes an application package from the Image Store.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync"/>. 
            </para>
            </param>
            <param name="applicationPackagePathInImageStore">
            <para>The relative path for the application package in the image store specified during <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)"/>.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para> <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store. </para>
            <para> <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderReservedDirectoryError" />: There was an error while trying to delete reserved folders in the image store. </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.ClusterManagementClient">
            <summary>
            <para>Represents the cluster management client for performing cluster maintenance operations.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.FabricClient.ClusterManagementClient" /> provides APIs which help to manage the cluster as a whole. 
            These are typically administrative commands which relate to major cluster events such as the loss of nodes and the need to recover services in the case of major failures.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)">
            <summary>
            <para>Deactivates a particular node with the specified <see cref="T:System.Fabric.NodeDeactivationIntent" />.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to deactivate.</para>
            </param>
            <param name="deactivationIntent">
            <para>The <see cref="T:System.Fabric.NodeDeactivationIntent" /> for deactivating the node.</para>
            </param>
            <returns>
            <para>A Task that represents the asynchronous acknowledgment of the request.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                When this API completes it implies that the intent to deactivate has been registered by the system. It does not mean that the deactivation is complete. The progress of the operation can be determined by using the <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync" /> API </para>
            <para>
                Once the deactivation is in progress, the deactivation intent can be “increased” but not decreased (for example, a node which is was deactivated with the <see cref="F:System.Fabric.NodeDeactivationIntent.Pause" /> intent can be deactivated further with <see cref="F:System.Fabric.NodeDeactivationIntent.Restart" />, but not the other way around. Nodes may be reactivated via <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)" /> any time after they are deactivated. If the deactivation is not complete this will cancel the deactivation. A node which goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.</para>
            <para>
                Service Fabric ensures that deactivation is a 'safe' process. It performs several safety checks (see <see cref="T:System.Fabric.SafetyCheckKind" />) to ensure that there is no loss of availability or data </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates a particular node with the specified <see cref="T:System.Fabric.NodeDeactivationIntent" />.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to deactivate.</para>
            </param>
            <param name="deactivationIntent">
            <para>The <see cref="T:System.Fabric.NodeDeactivationIntent" /> for deactivating the node.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A Task that represents the asynchronous acknowledgment of the request.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                When this API completes it implies that the intent to deactivate has been registered by the system. It does not mean that the deactivation is complete. The progress of the operation can be determined by using the <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync" /> API </para>
            <para>
                Once the deactivation is in progress, the deactivation intent can be “increased” but not decreased (for example, a node which is was deactivated with the <see cref="F:System.Fabric.NodeDeactivationIntent.Pause" /> intent can be deactivated further with <see cref="F:System.Fabric.NodeDeactivationIntent.Restart" />, but not the other way around. Nodes may be reactivated via <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)" /> any time after they are deactivated. If the deactivation is not complete this will cancel the deactivation. A node which goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.</para>
            <para>
                Service Fabric ensures that deactivation is a 'safe' process. It performs several safety checks (see <see cref="T:System.Fabric.SafetyCheckKind" />) to ensure that there is no loss of availability or data </para>
            </remarks>            
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)">
            <summary>
            <para>Activates a Service Fabric cluster node which is currently deactivated.</para>
            </summary>
            <param name="nodeName">
            <para>The Node to be Activated.</para>
            </param>
            <returns>
            <para>A Task that represents the asynchronous acknowledgment of the request.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                Once activated, the node will again become a viable target for placing new replicas, and any closed replicas remaining on the node will be opened.</para>
            <para>
                When this API completes it implies that the intent to activate has been registered by the system. It does not mean that the activation is complete. The progress of the operation can be determined by using the <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync" /> API </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Activates a Service Fabric cluster node which is currently deactivated.</para>
            </summary>
            <param name="nodeName">
            <para>The Node to be Activated.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A Task that represents the asynchronous acknowledgment of the request.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                Once activated, the node will again become a viable target for placing new replicas, and any closed replicas remaining on the node will be opened.</para>
            <para>
                When this API completes it implies that the intent to activate has been registered by the system. It does not mean that the activation is complete. The progress of the operation can be determined by using the <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync" /> API </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)">
            <summary>
            <para>Indicates that the persisted data of a node is lost (e.g., due to disk failure, or reimage, etc.), and that Service Fabric should treat any services or state on that node as lost and unrecoverable.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node which has been permanently lost.</para>
            </param>
            <returns>
            <para>A task representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                After a node goes down, Service Fabric will keep track of replicas of persisted services on that node as they have state on that node.</para>
            <para>
                In cases where the administrator knows that the persisted state on a node has been permanently lost the <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)" /> method should be called ... to notify Service Fabric that the state on the node is gone (or the node can never come back with the state it had).</para>
            <para>
                This instructs Service Fabric to stop waiting for that node (and any persisted replicas on that node) to recover.</para>
            <para>
                NOTE: This API must be called only after it has been determined that the state on that node has been lost. </para>
            <para>
                Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. </para>
            <para>
                If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. </para>
            <para>
                For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes/" /> </para>
            <para>
                If this API is called and then the node comes back with its state intact it is Undefined Behavior</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that a particular node (which is down) has actually been lost, and that Service Fabric should treat any services or state on that node as lost and unrecoverable.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node which has been permanently lost.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A task representing the operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                After a node goes down, Service Fabric will keep track of replicas of persisted services on that node as they have state on that node.</para>
            <para>
                In cases where the administrator knows that a node (and its state) has been permanently lost the <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)" /> method should be called.</para>
            <para>
                This instructs Service Fabric to stop waiting for that node (and any persisted replicas on that node) to recover.</para>
            <para>
                NOTE: This API must be called only after it has been determined that the state on that node has been lost. </para>
            <para>
                Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. </para>
            <para>
                If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. </para>
            <para>
                For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes/" /> </para>
            <para>
                If this API is called and then the node comes back with its state intact it is Undefined Behavior</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss.</para>
            </summary>
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>            
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover a specific partition which is currently stuck in quorum loss.</para>
            </summary>
            <param name="partitionId">The partition id to recover</param>
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover a specific partition which is currently stuck in quorum loss.</para>
            </summary>
            <param name="partitionId">The partition id to recover</param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service to recover.</para>
            </param>
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service to recover.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss.</para>
            </summary>
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A task representing acknowledgement of the intent.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
            </exception>
            <remarks>
            <para>
                This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)">
            <summary>
            <para> 
            Resets a given partition's load
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition Id represented as a Guid </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para> 
            Resets a given partition's load
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition Id represented as a Guid </para>
            </param>
            <param name="timeout">
            <para> The length of time within which the async method must complete in order for the method to not time out.</para>
            </param>
            <param name="cancellationToken">
            <para>A cancellation token for this method. </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpdatePartitionLoadAsync(System.Fabric.Description.UpdatePartitionLoadQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para> 
            Updates partitions reported metric load information. If the output list of partitions do not fit in a page, one page of results is returned as well as a
            continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="updatePartitionLoadQueryDescription">
            <para>Query description <see cref="T:System.Fabric.Description.UpdatePartitionLoadQueryDescription" /> contains the list of partitions with their metric load descriptions as well as settings for paging output results. </para>
            </param>
            <param name="timeout">
            <para> The length of time within which the async method must complete in order for the method to not time out.</para>
            </param>
            <param name="cancellationToken">
            <para>A cancellation token for this method. </para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:System.Fabric.Query.UpdatePartitionLoadResultList" /> that represents the list of
            output information per partition (partition ID with corresponding ErrorCode as an update result) that fit the page. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)">
            <summary>
            <para> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </para>
            </summary>
            <param name="enabled">
            <para>A boolean value, which if true causes reporting when a replica is unabled to be placed. </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
            <remarks>
            <para>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks the toggle can be switched off. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </para>
            </summary>
            <param name="enabled">
            <para>A boolean value, which if true causes reporting when a replica is unabled to be placed. </para>
            </param>
            <param name="timeout">
            <para> The length of time within which the async method must complete in order for the method to not time out.</para>
            </param>
            <param name="cancellationToken">
            <para>A cancellation token for this method. </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
            <remarks>
            <para>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks, the toggle can be switched off. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String)">
            <summary>
            <para>Provisions the Service Fabric.</para>
            </summary>
            <param name="patchFilePath">
            <para>The path to the update patch file.</para>
            </param>
            <param name="clusterManifestFilePath">
            <para>The path to the cluster manifest.</para>
            </param>
            <returns>
            <para>The provisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>A <languageKeyword>null</languageKeyword> value is permitted for either the <paramref name="patchFilePath" /> parameter or the <paramref name="clusterManifestFilePath" /> parameter. A <languageKeyword>null</languageKeyword> value cannot be used for both parameters.</para>
            <para>This will upload the patch file and/or cluster manifest file to the image store location. The image store location is specified as a configuration setting in the cluster manifest that was provided when the cluster was created.</para>
            <para>Cluster manifest validation will occur within the context of this call.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Provisions the Service Fabric by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="patchFilePath">
            <para>The path to the update patch file.</para>
            </param>
            <param name="clusterManifestFilePath">
            <para>The path to the cluster manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The provisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>A <languageKeyword>null</languageKeyword> value is permitted for either the <paramref name="patchFilePath" /> parameter or the <paramref name="clusterManifestFilePath" />
            parameter. A <languageKeyword>null</languageKeyword> value cannot be used for both parameters.</para>
            <para>This will upload the patch file and/or cluster manifest file to the image store location. The image store location is specified as a configuration setting
            in the cluster manifest that was provided when the cluster was created.</para>
            <para>Cluster manifest validation will occur within the context of this call.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String)">
            <summary>
            <para>Unprovisions the Service Fabric.</para>
            </summary>
            <param name="codeVersion">
            <para>The code version to unprovision.</para>
            </param>
            <param name="configVersion">
            <para>The configuration version to unprovision.</para>
            </param>
            <returns>
            <para>The unprovisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>A <languageKeyword>null</languageKeyword> value is permitted for either the <paramref name="codeVersion" /> parameter or the <paramref name="configVersion" /> parameter. A <languageKeyword>null</languageKeyword> value cannot be used for both parameters.</para>
            <para>This will delete the patch file and/or cluster manifest file from the image store location. The image store location is specified as a configuration setting in the cluster manifest that was provided when the cluster was created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Unprovisions the Service Fabric by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="codeVersion">
            <para>The code version to unprovision.</para>
            </param>
            <param name="configVersion">
            <para>The configuration version to unprovision.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The unprovisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription)">
            <summary>
            <para>Upgrades the Service Fabric.</para>
            </summary>
            <param name="upgradeDescription">
            <para>The description of the upgrade.</para>
            </param>
            <returns>
            <para>The upgraded Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Upgrades the Service Fabric by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="upgradeDescription">
            <para>The description of the upgrade.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The upgraded Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)">
            <summary>
            <para>Modifies the upgrade parameters that describe the behavior of the current cluster upgrade.</para>
            </summary>
            <param name="updateDescription">
            <para>Description of the new upgrade parameters to apply.</para>
            </param>
            <returns>
            <para>The current cluster upgrade.</para>
            </returns>
            <remarks />
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Modifies the upgrade parameters that describe the behavior of the current cluster upgrade.</para>
            </summary>
            <param name="updateDescription">
            <para> The new upgrade parameters to apply.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before throwing a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The current cluster upgrade.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync">
            <summary>
            <para>Rolls back the Service Fabric to upgrade the operation.</para>
            </summary>
            <returns>
            <para>The rollback Service Fabric to upgrade the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Rolls back the Service Fabric to upgrade the operation.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a timeout exception.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The rollback Service Fabric to upgrade the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync">
            <summary>
            <para>Returns the progress of a Service Fabric upgrade process.</para>
            </summary>
            <returns>
            <para>The progress of a Service Fabric upgrade process.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the progress of a Service Fabric upgrade process.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The progress of a Service Fabric upgrade process.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)">
            <summary>
            <para>Instructs the Service Fabric to upgrade the next upgrade domain in the cluster if the current upgrade domain has been completed.</para>
            </summary>
            <param name="upgradeProgress">
            <para>The fabric upgrade process object to use.</para>
            </param>
            <returns>
            <para>The upgraded domain in the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>Similar to <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instructs Service Fabric to upgrade the next upgrade domain in the cluster if the current upgrade domain has been completed, by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="upgradeProgress">
            <para>The fabric upgrade process object to use.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The upgraded domain in the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>Similar to <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync">
            <summary>
            <para>Gets the XML contents of the current running cluster manifest.</para>
            </summary>
            <returns>
            <para>The cluster manifest contents.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the XML contents of the current running cluster manifest.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The cluster manifest contents.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using 
            and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.Fabric.Description.ClusterManifestQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the XML contents of a cluster manifest as specified by <paramref name="queryDescription" />.</para>
            </summary>
            <param name="queryDescription">
            <para>Specifies additional parameters to determine which cluster manifest to retrieve.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The cluster manifest contents.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using 
            and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Copies the cluster manifest file and/or Service Fabric code package to the image store.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync"/>. 
            </para>
            </param>
            <param name="clusterManifestPath">
            <para>The full path to the cluster manifest file to be copied.</para>
            </param>
            <param name="clusterManifestPathInImageStore">
            <para>The relative path along with the file name of the destination in the image store. This parameter is required when clusterManifestPath is specified. This path is created relative to the root directory in the image store and used as the destination for the cluster manifest copy.</para>
            </param>
            <param name="codePackagePath">
            <para>The full path to the Service Fabric code package to be copied.</para>
            </param>
            <param name="codePackagePathInImageStore">
            <para>The relative path along with the file name of the destination in the image store. This parameter is required when codePackagePathInImageStore is specified. This path is created relative to the root directory in the image store and used as the destination for the code package copy.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Both source cluster manifest path and source code path cannot be null.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            <para>Copies the cluster manifest file and/or Service Fabric code package to the image store.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync"/>. 
            </para>
            </param>
            <param name="clusterManifestPath">
            <para>The full path to the cluster manifest file to be copied.</para>
            </param>
            <param name="clusterManifestPathInImageStore">
            <para>The relative path along with the file name of the destination in the image store. This parameter is required when clusterManifestPath is specified. This path is created relative to the root directory in the image store and used as the destination for the cluster manifest copy.</para>
            </param>
            <param name="codePackagePath">
            <para>The full path to the Service Fabric code package to be copied.</para>
            </param>
            <param name="codePackagePathInImageStore">
            <para>The relative path along with the file name of the destination in the image store. This parameter is required when codePackagePathInImageStore is specified. This path is created relative to the root directory in the image store and used as the destination for the code package copy.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Both source cluster manifest path and source code path cannot be null.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage(System.String,System.String,System.String)">
            <summary>
            <para>Deletes the cluster manifest file and/or Service Fabric code package from the image store.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync"/>. 
            </para>
            </param>
            <param name="clusterManifestPathInImageStore">
            <para>The relative path of cluster manifest file in the image store specified during <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)"/>.</para>
            </param>
            <param name="codePackagePathInImageStore">
            <para>The relative path of Service Fabric code package in the image store specified during <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)"/>.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Either clusterManifestPathInImageStore or codePackagePathInImageStore parameter can be <languageKeyword>null</languageKeyword>. However, both of them cannot be <languageKeyword>null</languageKeyword>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription)">
            <summary>
            Initiate an Upgrade using a cluster configuration file.
            </summary>
            <param name="description">Contains:
            ClusterConfig, HealthCheckRetryTimeout, HealthCheckWaitDuration,
            HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,
            MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,
            MaxPercentUpgradeDomainDeltaUnhealthyNodes
            </param>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan)">
            <summary>
            Initiate an Upgrade using a cluster configuration file.
            </summary>
            <param name="description">Contains:
            ClusterConfig, HealthCheckRetryTimeout, HealthCheckWaitDuration,
            HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,
            MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,
            MaxPercentUpgradeDomainDeltaUnhealthyNodes</param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.Threading.CancellationToken)">
            <summary>
            Initiate an Upgrade using a cluster configuration file.
            </summary>
            <param name="description">Contains:
            ClusterConfigPath, HealthCheckRetryTimeout, HealthCheckWaitDuration,
            HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,
            MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,
            MaxPercentUpgradeDomainDeltaUnhealthyNodes</param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Initiate an Upgrade using a cluster configuration file.
            </summary>
            <param name="description">Contains:
            ClusterConfig, HealthCheckRetryTimeout, HealthCheckWaitDuration,
            HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,
            MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,
            MaxPercentUpgradeDomainDeltaUnhealthyNodes</param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync">
            <summary>
            Obtains the status of an upgrade in progress.
            </summary>
            <returns>FabricOrchestrationUpgradeProgress</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan)">
            <summary>
            Obtains the status of an upgrade in progress.
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>FabricOrchestrationUpgradeProgress</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains the status of an upgrade in progress.
            </summary>
            <param name="cancellationToken"></param>
            <returns>FabricOrchestrationUpgradeProgress</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Obtains the status of an upgrade in progress.
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>FabricOrchestrationUpgradeProgress</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync">
            <summary>
            <para>Gets the Service Fabric cluster configuration file as a string.</para>
            </summary>
            <returns>
            <para>The Service Fabric cluster configuration file as a string.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(System.String)">
            <summary>
            <para>Gets the Service Fabric cluster configuration file as a string.</para>
            </summary>
            <param name="apiVersion">Api version.</param>
            <returns>
            <para>The Service Fabric cluster configuration file as a string.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the Service Fabric cluster configuration file as a string, by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The Service Fabric cluster configuration file as a string, by using the specified timeout and cancellation token.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the Service Fabric cluster configuration file as a string, by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="apiVersion">Api verison.</param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The Service Fabric cluster configuration file as a string, by using the specified timeout and cancellation token.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetUpgradeOrchestrationServiceStateAsync">
            <summary>
            <para>Gets the Service Fabric Upgrade Orchestration Service state as a string.</para>
            </summary>
            <returns>
            <para>The Service Fabric Upgrade Orchestration Service state as a string.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetUpgradeOrchestrationServiceStateAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the Service Fabric Upgrade Orchestration Service state as a string, by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The Service Fabric Upgrade Orchestration Service state as a string, by using the specified timeout and cancellation token.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.SetUpgradeOrchestrationServiceStateAsync(System.String)">
            <summary>
            <para>Sets the Service Fabric Upgrade Orchestration Service state as a string.</para>
            </summary>
            <param name="state">state input</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.SetUpgradeOrchestrationServiceStateAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Sets the Service Fabric Upgrade Orchestration Service state as a string, by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="state">state input</param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The Service Fabric Upgrade Orchestration Service state, by using the specified timeout and cancellation token.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.AddConfigurationParameterOverridesAsync(System.String,System.Collections.Generic.IList{System.Fabric.Description.ConfigParameterOverride},System.Boolean)">
            <summary>
            Adds configuration override
            </summary>
            <param name="nodeName"></param>
            <param name="configurationOverrideList"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.AddConfigurationParameterOverridesAsync(System.String,System.Collections.Generic.IList{System.Fabric.Description.ConfigParameterOverride},System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds configuration override
            </summary>
            <param name="nodeName"></param>
            <param name="configurationOverrideList"></param>
            <param name="force"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveConfigurationOverridesAsync(System.String)">
            <summary>
            Removes configuration override
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveConfigurationOverridesAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Removes configuration override
            </summary>
            <param name="nodeName"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetConfigurationOverridesAsync(System.String)">
            <summary>
            Gets configuration override
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetConfigurationOverridesAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets configuration override
            </summary>
            <param name="nodeName"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.AddNodeTagsAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Adds tags to the node
            </summary>
            <param name="nodeName"></param>
            <param name="nodeTagsList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.AddNodeTagsAsync(System.String,System.Collections.Generic.List{System.String},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds tags to the node
            </summary>
            <param name="nodeName"></param>
            <param name="nodeTagsList"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeTagsAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Removes tags from the node
            </summary>
            <param name="nodeName"></param>
            <param name="nodeTagsList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeTagsAsync(System.String,System.Collections.Generic.List{System.String},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds tags to the node
            </summary>
            <param name="nodeName"></param>
            <param name="nodeTagsList"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.FabricClient.ComposeDeploymentClient">
            <summary>
            <para>Provides the functionality to manage Service Fabric compose deployments.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ComposeDeploymentClient.GetComposeDeploymentUpgradeProgressAsync(System.String)">
            <summary>
            <para>Retrieves the upgrade progress of the specified compose deployment.</para>
            </summary>
            <param name="deploymentName">
            <para>The name of the deployment.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the upgrade progress of the specified application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ComposeDeploymentClient.GetComposeDeploymentUpgradeProgressAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieves the upgrade progress of the specified compose deployment.</para>
            </summary>
            <param name="deploymentName">
            <para>The name of the deployment.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the upgrade progress of the specified application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.NetworkManagementClient">
            <summary>
            <para>Provides the functionality to manage Service Fabric container networks.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.CreateNetworkAsync(System.String,System.Fabric.Description.NetworkDescription)">
            <summary>
              <para>Creates the specific Service Fabric container network.</para>
            </summary>
            <param name="networkName">
              <para>The name of the container network.</para>
            </param>
            <param name="networkDescription">
              <para>The description of the container network.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.CreateNetworkAsync(System.String,System.Fabric.Description.NetworkDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Creates the specific Service Fabric container network.</para>
            </summary>
            <param name="networkName">
              <para>The name of the container network.</para>
            </param>
            <param name="networkDescription">
              <para>The description of the container network.</para>
            <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>          
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.DeleteNetworkAsync(System.Fabric.Description.DeleteNetworkDescription)">
            <summary>
              <para>Deletes the specific Service Fabric container network.</para>
            </summary>
            <param name="deleteNetworkDescription">
              <para>The description of the container network to be deleted.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.DeleteNetworkAsync(System.Fabric.Description.DeleteNetworkDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Deletes the specific Service Fabric container network.</para>
            </summary>
            <param name="deleteNetworkDescription">
              <para>The description of the container network to be deleted.</para>
            <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
            </returns>          
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync">
            <summary>
            <para>
            Gets the details for all container networks in the cluster. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync(System.Fabric.Description.NetworkQueryDescription)">
            <summary>
            <para>
            Gets the details for all container networks in the cluster. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync(System.Fabric.Description.NetworkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all container networks in the cluster. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkApplicationListAsync(System.Fabric.Description.NetworkApplicationQueryDescription)">
            <summary>
            <para>
            Gets the details for all applications in the container network. If the applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkApplicationListAsync(System.Fabric.Description.NetworkApplicationQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all applications in the container network. If the applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkNodeListAsync(System.Fabric.Description.NetworkNodeQueryDescription)">
            <summary>
            <para>
            Gets the details for all nodes in the container network. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkNodeListAsync(System.Fabric.Description.NetworkNodeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all nodes in the container network. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetApplicationNetworkListAsync(System.Fabric.Description.ApplicationNetworkQueryDescription)">
            <summary>
            <para>
            Gets the details for all container networks an application is a member of. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetApplicationNetworkListAsync(System.Fabric.Description.ApplicationNetworkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all container networks an application is a member of. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkListAsync(System.Fabric.Description.DeployedNetworkQueryDescription)">
            <summary>
            <para>
            Gets the details for all container networks deployed on a node. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkListAsync(System.Fabric.Description.DeployedNetworkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all container networks deployed on a node. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkCodePackageListAsync(System.Fabric.Description.DeployedNetworkCodePackageQueryDescription)">
            <summary>
            <para>
            Gets the details for all code packages deployed in a container network on a node. If the code packages do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkCodePackageListAsync(System.Fabric.Description.DeployedNetworkCodePackageQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all code packages deployed in a container network on a node. If the code packages do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClient.PropertyManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.PropertyManager" /> that can be used to perform operations related to names and properties.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.PropertyManager" /> that can be used to perform operations related to names and properties.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ServiceManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ServiceManager" /> that can be used to perform operations related to services and service types.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ServiceManager" /> that can be used to perform operations related to services and service types.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ServiceGroupManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ServiceGroupManager" /> that can be used to perform operations related to service groups.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ServiceGroupManager" /> that can be used to perform operations related to service groups.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ApplicationManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ApplicationManager" /> that can be used to perform operations related to applications and application types.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ApplicationManager" /> that can be used to perform operations related to applications and application types.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ComposeDeploymentManager">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.FabricClient.ComposeDeploymentClient" /> that can be used to perform operations related to compose deployment.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ComposeDeploymentManager" /> that can be used to perform operations related to compose deployment.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ClusterManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ClusterManager" /> that can be used to perform operations related to the Service Fabric cluster.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ClusterManager" /> that can be used to perform operations related to the Service Fabric cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.RepairManager">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.FabricClient.RepairManagementClient" /> that can be used to manage repair tasks.</para>
            <para>This property supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.FabricClient.RepairManagementClient" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.QueryManager">
            <summary>
            <para>Gets the query manager that can be used to execute queries against the Service Fabric cluster.</para>
            </summary>
            <value>
            <para>The query manager that can be used to execute queries against the Service Fabric cluster.</para>
            </value>
            <remarks>
            <para>The query manager can be used to execute queries against the cluster.
            Most of the queries are distributed. They call multiple system components to get different information.
            The calls to the system components are executed in parallel and the returned results are aggregated based on a common key.
            For example, to get the list of nodes in the cluster, the <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync"/> query goes to
            Failover Manager, Cluster Manager, and Health Manager system services.
            For this reason, some queries are expensive.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClient.HealthManager">
            <summary>
            <para>Gets the health client that can be used to perform health related operations, like report health or get entity health.</para>
            </summary>
            <value>
            <para>The health client that can be used to perform health related operations, like report health or get entity health.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.SecretStore">
            <summary>
            <para>Gets secret store client</para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClient.InfrastructureManager">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.FabricClient.InfrastructureServiceClient" /> that can be used to perform operations related to the infrastructure on which the cluster is running.</para>
            <para>This property supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.FabricClient.InfrastructureServiceClient" /> that can be used to perform operations related to the infrastructure on which the cluster is running.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.TestManager">
            <summary>
            Gets the <see cref="T:System.Fabric.FabricClient.TestManagementClient"/> to perform complex actions that go through FaultAnalysisService. For example, StartPartitionDataLossAsync.
            This also supports APIs for validation (that do not go through FaultAnalysisService). For example, ValidateServiceAsync.
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.FabricClient.TestManagementClient" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.FaultManager">
            <summary>
            Gets the <see cref="T:System.Fabric.FabricClient.FaultManagementClient"/> to induce faults. For example, RestartNodeAsync.
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.FabricClient.FaultManagementClient" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.NetworkManager">
            <summary>
            Gets the <see cref="T:System.Fabric.FabricClient.NetworkManagementClient"/> to manage container networks.
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.FabricClient.NetworkManagementClient" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.Settings">
            <summary>
            <para>Gets the fabric client settings.</para>
            </summary>
            <value>
            <para>The fabric client settings.</para>
            </value>
        </member>
        <member name="F:System.Fabric.FabricClient.FabricSystemApplication">
            <summary>
            <para>The Service Fabric System application.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class. This constructor should be used by code that is running inside the cluster. It allows the <see cref="T:System.Fabric.FabricClient" /> instance to connect to the cluster via the local Gateway service running on the same node.</para>
            </summary>
            <remarks>
            <para>Since this constructor uses the local Gateway service running on
            the same node to connect to th cluster, your client can bypass an extra network hop.
            To connect to a cluster from code running outside the cluster, use a different constructor
            which allows you to explicitly specify the connection parameters.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientRole)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with the specified fabric client role - <see cref="T:System.Fabric.FabricClientRole" />.
            </para>
            </summary>
            <param name="clientRole">
            <para>The fabric client role.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with the desired <see cref="T:System.Fabric.FabricClientSettings" />.
            If the <see cref="T:System.Fabric.FabricClient" /> is on the same cluster as the service, then use a Local <see cref="T:System.Fabric.FabricClient" />. Local <see cref="T:System.Fabric.FabricClient" /> is a feature of Service Fabric that allows the <see cref="T:System.Fabric.FabricClient" /> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <see cref="T:System.Fabric.FabricClient" />, as it enables automatic load balancing and improves performance.</para>
            </summary>
            <param name="settings">
            <para>The fabric client settings used by the fabric client.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with given Service Fabric Gateway addresses. These host-endpoints are list of ':' delimited strings where the first part is the ip of the cluster and the second part is the client-connection endpoint-port. </para>
            </summary>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient" /> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with given Service Fabric Gateway addresses and <see cref="T:System.Fabric.SecurityCredentials" />.</para>
            </summary>
            <param name="credential">
             <para><see cref = "T:System.Fabric.SecurityCredentials" /> defines the security settings for the<see cref="T:System.Fabric.FabricClient" />.</para></param>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient" /> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with given
            Service Fabric Gateway addresses and the desired <see cref="T:System.Fabric.FabricClientSettings" />.</para>
            </summary>
            <param name="settings">
            <para>The fabric client settings.</para>
            </param>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient" /> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with given Service Fabric Gateway addresses, <see cref = "T:System.Fabric.SecurityCredentials" /> and <see cref="T:System.Fabric.FabricClientSettings" />.</para>
            </summary>
            <param name="credential">
             <para><see cref = "T:System.Fabric.SecurityCredentials" /> defines the security settings for the<see cref="T:System.Fabric.FabricClient" />.</para></param>
            <param name="settings">
            <para>The fabric client settings.</para>
            </param>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient" /> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.TimeSpan,System.String[])">
            <summary>
            <para>DEPRECATED. Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with given keepAliveInterval
            and Service Fabric Gateway addresses (hostEndpoints).</para>
            </summary>
            <param name="keepAliveInterval">
            <para>Defines the periodic keep alive message interval.</para>
            </param>
            <param name="hostEndpoints">
            <para> Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient" /> can use to connect to the cluster.</para>
            </param>
            <remarks>
            <para>If there are external devices in between the connection from the client to the cluster that require periodic messages to keep the connection alive,
            then make sure to use the KeepAlive feature of FabricClient. During the initialization of the FabricClient, users can specify a TimeSpan keepAliveInterval.
            If this argument is specified, then the FabricClient will periodically ping the Service Fabric Gateway Service it is currently communicating with,
            as long as there is a pending operation. An example of a scenario where this feature is useful is Windows Azure. If the <see cref="T:System.Fabric.FabricClient" />
            is outside of Windows Azure and the cluster is inside of Windows Azure, then all connections will go through the Azure Load Balancer (ALB).
            ALB terminates connections that are idle for more than 60 seconds. Hence, in these situations, <see cref="T:System.Fabric.FabricClient" /> should be created with
            KeepAliveInterval set to &lt;59 seconds (20 -30 is recommended).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.TimeSpan,System.String[])">
            <summary>
            <para>DEPRECATED. Initializes a new instance of the <see cref="T:System.Fabric.FabricClient" /> class with given credentials, keepAliveInterval
            and Service Fabric Gateway addresses (hostEndpoints).</para>
            </summary>
            <param name="credential">Defines the security credentials.</param>
            <param name="keepAliveInterval">
            <para>Defines the periodic keep alive message interval.</para>
            </param>
            <param name="hostEndpoints">
            <para> Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient" /> can use to connect to the cluster.</para>
            </param>
            <remarks>
            <para>If there are external devices in between the connection from the client to the cluster that require periodic messages to keep the connection alive,
            then make sure to use the KeepAlive feature of FabricClient. During the initialization of the FabricClient, users can specify a TimeSpan keepAliveInterval.
            If this argument is specified, then the FabricClient will periodically ping the Service Fabric Gateway Service it is currently communicating with,
            as long as there is a pending operation. An example of a scenario where this feature is useful is Windows Azure. If the <see cref="T:System.Fabric.FabricClient" />
            is outside of Windows Azure and the cluster is inside of Windows Azure, then all connections will go through the Azure Load Balancer (ALB).
            ALB terminates connections that are idle for more than 60 seconds. Hence, in these situations, <see cref="T:System.Fabric.FabricClient" /> should be created with
            KeepAliveInterval set to &lt;59 seconds (20 -30 is recommended).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.UpdateSettings(System.Fabric.FabricClientSettings)">
            <summary>
            <para>Updates the fabric client settings.</para>
            </summary>
            <param name="settings">
            <para>The new fabric client settings to be used.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>The specified fabric client settings can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit" /> must be positive.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount" /> must be greater or equal to zero.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval" /> must represent a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout" /> must represent a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.KeepAliveInterval" /> must be zero or a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.ConnectionIdleTimeout" /> must be zero or a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.HealthOperationTimeout" /> must represent a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.HealthReportSendInterval" /> must be zero or a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.HealthReportRetrySendInterval" /> must be a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount" /> must be greater or equal to zero.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.AuthTokenBufferSize" /> must be greater or equal to zero.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)">
            <summary>
            Updates the fabric client security credentials.
            </summary>
            <param name="credentials">The new security credentials to be used.</param>
        </member>
        <member name="M:System.Fabric.FabricClient.Finalize">
            <summary>
            <para>
            Destructor of fabric client.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.Dispose">
            <summary>
            <para>
            Disposes of the fabric client.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.FabricClient.GatewayInformationEventArgs">
            <summary>
            <para>
            Represents the event arguments for gateway related events, like connect and disconnect.
            </para>
            </summary>
            <remarks>
            <para>Provides more information about the gateway that the client is configured with.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClient.GatewayInformationEventArgs.GatewayInformation">
            <summary>
            <para>
            Gets the gateway information.
            </para>
            </summary>
            <value>
            <para>The gateway information.</para>
            </value>
        </member>
        <member name="T:System.Fabric.FabricClient.ClaimsRetrievalEventArgs">
            <summary>
            Represents the event arguments for a claims token retrieval event
            </summary>
            <remarks>Optionally allows the application to provide a claims token for authorization.</remarks>
        </member>
        <member name="P:System.Fabric.FabricClient.ClaimsRetrievalEventArgs.AzureActiveDirectoryMetadata">
            <summary>
            Gets metadata needed for acquiring a claims token from Azure Active Directory
            </summary>
            <value>The metadata object.</value>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientConnected">
            <summary>
            Occurs when the client is connected to gateway.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientDisconnected">
            <summary>
            Occurs when the client is disconnected from the gateway.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClaimsRetrieval">
            <summary>
            Occurs when the client needs to provide a claims token for authorization with the gateway
            </summary>
            <remarks>
            <para>
            See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-connect-to-secure-cluster#connect-to-a-secure-cluster-using-the-fabricclient-apis"/> for connecting to secure cluster using Azure Active Directory authentication.
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.FabricClient.ClaimsRetrievalEventHandler">
            <summary>
            Delegate for handling a claims token retrieval callback by registering for the ClaimsRetrieval event
            </summary>
            <param name="sender">
            <para>A reference to the <see cref="T:System.Fabric.FabricClient" /> instance on which the event is being raised.</para>
            </param>
            <param name="e">
            <para>The event arguments.</para>
            <seealso cref="T:System.Fabric.FabricClient.ClaimsRetrievalEventArgs" />
            </param>
        </member>
        <member name="T:System.Fabric.FabricClient.HealthClient">
            <summary>
            <para>Provides functionality to perform health related operations,
            like report and query health.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)">
            <summary>
             <para>Reports health on a Service Fabric entity.</para>
            </summary>
            <param name="healthReport">
             <para>The <see cref="T:System.Fabric.Health.HealthReport"/> to submit.</para>
            </param>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
             <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
             <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                 <para>Caused by one of the following:</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                 <para>Caused by one of the following:</para>
                 <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>
             When a cluster is secured, the health client needs administrator permission to be able to send the reports.
             Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-connect-to-secure-cluster">connecting to a cluster using the FabricClient APIs</see>.
            </para>
            <para>
             For more information about health reporting, see <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-health-introduction">Service Fabric health monitoring</see>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
             <para>Reports health on a Service Fabric entity and passes send options to control how the report is sent.</para>
            </summary>
            <param name="healthReport">
             <para>The <see cref="T:System.Fabric.Health.HealthReport"/> to submit.</para>
            </param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <remarks>
            <para>
             When a cluster is secured, the health client needs administrator permission to be able to send the reports.
             Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-connect-to-secure-cluster">connecting to a cluster using the FabricClient APIs.</see>
            </para>
            <para>
             For more information about health reporting, see <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-health-introduction">Service Fabric health monitoring</see>.
            </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
             <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
             <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                 <para>Caused by one of the following:</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
                 <para>
                     <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                 <para>Caused by one of the following:</para>
                 <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster.</para>
            </summary>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. 
            Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of the cluster.</para>
              <code language="c#">public static bool GetClusterHealth(string clusterConnection)
            {
                ClusterHealth clusterHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the cluster health.
                try
                {
                    clusterHealth = fabricClient.HealthManager.GetClusterHealthAsync().Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the cluster health state.
                Console.WriteLine("Cluster Health:");
                Console.WriteLine("  Aggregated Health State: " + clusterHealth.AggregatedHealthState);
                Console.WriteLine();
            
                // Display the application health states on the cluster.
                Console.WriteLine("  Application Health States:");
                IList&lt;ApplicationHealthState&gt; applicationHealthStateList = clusterHealth.ApplicationHealthStates;
                foreach(ApplicationHealthState applicationHealthState in applicationHealthStateList)
                {
                    Console.WriteLine("    Application {0}: {1}", applicationHealthState.ApplicationName, applicationHealthState.AggregatedHealthState);
                }
            
                // Display Node Health States on the cluster.
                Console.WriteLine("  Node Health States:");
                IList&lt;NodeHealthState&gt; nodeHealthStateList = clusterHealth.NodeHealthStates;
                foreach (NodeHealthState nodeHealthState in nodeHealthStateList)
                {
                    Console.WriteLine("    Node Name: " + nodeHealthState.NodeName);
                    Console.WriteLine("      Aggregated Health State: " + nodeHealthState.AggregatedHealthState);
                }
            
                // Display Health Events.
                Console.WriteLine("  Health Events:");
                IList&lt;HealthEvent&gt; healthEventList = clusterHealth.HealthEvents;
                foreach(HealthEvent healthEvent in healthEventList)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                Console.WriteLine("  Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = clusterHealth.UnhealthyEvaluations;
                foreach(HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("    Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("      Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("      Description: " + healthEvaluation.Description);
                }
            
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster, evaluating it using the specified policy.</para>
            </summary>
            <param name="healthPolicy">The cluster health policy used to evaluate cluster health.</param>
            <returns>
                <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
                <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. 
                Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>Caused by one of the following:</para>
                <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
                <para>Caused by one of the following:</para>
                <para><see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using the specified health policy, timeout and cancellation token.</para>
            </summary>
            <param name="healthPolicy">The cluster health policy used to evaluate cluster health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using a query description.</para>
            </summary>
            <param name="queryDescription">The query description that defines 
            query parameters like health policies, filters etc.</param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using a query description, a timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description that defined query parameters like health policies, filters etc.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node name.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a node.</para>
              <code language="c#">public static bool GetNodeHealth(string clusterConnection)
            {
                NodeHealth nodeHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the node health.
                try
                {
                    nodeHealth = fabricClient.HealthManager.GetNodeHealthAsync("Node1").Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the node health information.
                Console.WriteLine("Node Health:");
                Console.WriteLine("  Node {0}: {1}", nodeHealth.NodeName, nodeHealth.AggregatedHealthState);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = nodeHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = nodeHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine(); 
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node name.</para>
            </param>
            <param name="healthPolicy">The cluster health policy used to evaluate the node health.</param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the 
            operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node.</para>
            </param>
            <param name="healthPolicy">The cluster health policy used to evaluate the node health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description that defines parameters like health policy, filters etc.</param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description that defines parameters like health policy, filters etc.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <returns>
            <para>The health of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of an application.</para>
              <code language="c#">public static bool GetApplicationHealth(string clusterConnection)
            {
                ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the application health.
                try
                {
                    applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the application health information.
                Console.WriteLine("Get Application Health:");
                Console.WriteLine("  Application {0}: {1}", applicationHealth.ApplicationName, applicationHealth.AggregatedHealthState);
            
                // List the deployed application health states.
                Console.WriteLine("    Deployed applications:");
                IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)
                {
                    Console.WriteLine("      Application: " + deployedAppHealthState.ApplicationName);
                    Console.WriteLine("        Aggregated Health State: " + deployedAppHealthState.AggregatedHealthState);
                    Console.WriteLine("        Node Name: " + deployedAppHealthState.NodeName);
                }
            
                // List the deployed services health states.
                Console.WriteLine("    Service Health States:");
                IList&lt;ServiceHealthState&gt; deployedSvcsHealthStateList = applicationHealth.ServiceHealthStates;
                foreach (ServiceHealthState serviceHealthState in deployedSvcsHealthStateList)
                {
                    Console.WriteLine("      Service {0}: {1}", serviceHealthState.ServiceName, serviceHealthState.AggregatedHealthState);
                }
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = applicationHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application using the application URI and the health policy.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="healthPolicy">The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> instance used to evaluate the application.</param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application using the specified application URI, timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the application health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application 
            by using the specified query description.</para>
            </summary>
            <param name="queryDescription">The <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/> instance to describe the query to get application health.</param>
            <returns>
            <para>The health of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application using the specified query input, timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/> instance to describe the query to get application health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a service.</para>
              <code language="c#">public static bool GetServiceHealth(string clusterConnection)
            {
                ServiceHealth serviceHealth;
                Uri serviceName = new Uri("fabric:/myapp/todo/svc1");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the service health.
                try
                {
                    serviceHealth = fabricClient.HealthManager.GetServiceHealthAsync(serviceName).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                Console.WriteLine("Service Health:");
                Console.WriteLine("  Service {0}: {1}", serviceHealth.ServiceName, serviceHealth.AggregatedHealthState);
            
                // List the health states.
                Console.WriteLine("    Partition Health States:");
                IList&lt;PartitionHealthState&gt; partitionHealthStates = serviceHealth.PartitionHealthStates;
                foreach (PartitionHealthState partitionHealthState in partitionHealthStates)
                {
                    Console.WriteLine("      Aggregated Health State: " + partitionHealthState.AggregatedHealthState);
                    Console.WriteLine("      Partition ID: " + partitionHealthState.PartitionId);
                }
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = serviceHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = serviceHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate service health.</param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a partition.</para>
              <code language="c#">public static bool GetPartitionHealth(string clusterConnection)
            {
                PartitionHealth partitionHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the partition health.
                try
                {
                    partitionHealth = fabricClient.HealthManager.GetPartitionHealthAsync(new Guid("a7206315-e53b-4d05-b59c-e210caa28893")).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
                        Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the partition health information.
                Console.WriteLine("Partition Health:");
                Console.WriteLine("  Partition ID: " + partitionHealth.PartitionId);
                Console.WriteLine("    Aggregated Health State: " + partitionHealth.AggregatedHealthState);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = partitionHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the replica health states.
                Console.WriteLine("    Replica Health States:");
                IList&lt;ReplicaHealthState&gt; replicaHealthStates = partitionHealth.ReplicaHealthStates;
                foreach (ReplicaHealthState replicaHealthState in replicaHealthStates)
                {
                    Console.WriteLine("      ID: " + replicaHealthState.Id);
                    Console.WriteLine("        Kind: " + replicaHealthState.Kind);
                    Console.WriteLine("        Aggregated Health State: " + replicaHealthState.AggregatedHealthState);
                    Console.WriteLine("        Partition ID: " + replicaHealthState.PartitionId);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = partitionHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a replica.</para>
              <code language="c#">public static bool GetReplicaHealth(string clusterConnection)
            {
                ReplicaHealth replicaHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the replica health.
                try
                {
                    replicaHealth = fabricClient.HealthManager.GetReplicaHealthAsync(
            new Guid("a7206315-e53b-4d05-b59c-e210caa28893"), 130538257146083818).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                Console.WriteLine("Replica Health:");
                Console.WriteLine("  ID: " + replicaHealth.Id);
                Console.WriteLine("    Aggregated Health State: " + replicaHealth.AggregatedHealthState);
                Console.WriteLine("    Kind: " + replicaHealth.Kind);
                Console.WriteLine("    Partition ID: " + replicaHealth.PartitionId);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = replicaHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = replicaHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine(); 
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica specified by the query description.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a deployed application.</para>
              <code language="c#">public static bool GetDeployedApplicationsHealth(string clusterConnection)
            {
                //DeployedApplicationHealth deployedApplicationHealth;
                //ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                Console.WriteLine("Deployed Application Health:");
            
                try
                {
                    // Determine the nodes where the application has been deployed.
                    ApplicationHealth applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
            
                    // Get the deployed application health for each node.
                    IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                    foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)
                    {
            DeployedApplicationHealth deployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName, 
                deployedAppHealthState.NodeName).Result;
            
            // Display the deployed application health information for each node.
            
            Console.WriteLine("  Application {0}: {1}", deployedApplicationHealth.ApplicationName, deployedApplicationHealth.AggregatedHealthState);
            Console.WriteLine("    Node Name: " + deployedApplicationHealth.NodeName);
            
            // List the deployed application health states.
            Console.WriteLine("    Deployed applications:");
            IList&lt;DeployedServicePackageHealthState&gt; deployedSPHealthStateList = deployedApplicationHealth.DeployedServicePackageHealthStates;
            foreach (DeployedServicePackageHealthState deployedSPHealthState in deployedSPHealthStateList)
            {
                Console.WriteLine("      Application: " + deployedSPHealthState.ApplicationName);
                Console.WriteLine("        Aggregated Health State: " + deployedSPHealthState.AggregatedHealthState);
                Console.WriteLine("        Node Name: " + deployedSPHealthState.NodeName);
                Console.WriteLine("        Service Manifest Name: " + deployedSPHealthState.ServiceManifestName);
            }
            
            // List the health events.
            Console.WriteLine("    Health Events:");
            IList&lt;HealthEvent&gt; healthEvents = deployedApplicationHealth.HealthEvents;
            foreach (HealthEvent healthEvent in healthEvents)
            {
                Console.WriteLine("      Health Event:");
                Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                Console.WriteLine("        Health Information:");
                Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
            }
            
            // List the unhealthy evaluations.
            Console.WriteLine("    Unhealthy Evaluations:");
            IList&lt;HealthEvaluation&gt; healthEvaluationList = deployedApplicationHealth.UnhealthyEvaluations;
            foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
            {
                Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                Console.WriteLine("        Description: " + healthEvaluation.Description);
            }
            
            Console.WriteLine();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate entity health.</param>
            <returns>
            <para>The health of a deployed Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName" /> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName" /> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a deployed service package.</para>
              <code language="c#">public static bool GetDeployedServicePackageHealth(string clusterConnection)
            {
                DeployedApplicationHealth deployedApplicationHealth;
                DeployedServicePackageHealth deployedServicePackageHealth;
                ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                Console.WriteLine("Deployed Service Package Health:");
            
                try
                {
                    // Determine the nodes where the application has been deployed.
                    applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
            
                    // Get the deployed service package health for each node.
                    IList&lt;DeployedApplicationHealthState&gt; deployedApplicationHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                    foreach (DeployedApplicationHealthState deployedApplicationHealthState in deployedApplicationHealthStateList)
                    {
            // Get the deployed application health, which contains the service manifest name and 
            // the names of the nodes where the service has been deployed.
            deployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName,
                deployedApplicationHealthState.NodeName).Result;
            
            // Return if empty.
            if (deployedApplicationHealth.DeployedServicePackageHealthStates.Count == 0)
                return false;
            
            // Get the deployed service package health.
            deployedServicePackageHealth = fabricClient.HealthManager.GetDeployedServicePackageHealthAsync(applicationName,
                deployedApplicationHealth.DeployedServicePackageHealthStates[0].ServiceManifestName, 
                deployedApplicationHealthState.NodeName).Result;
            
            // Display the deployed service package health information.
            Console.WriteLine("  Application Name: " + deployedServicePackageHealth.ApplicationName);
            Console.WriteLine("    Node Name: " + deployedServicePackageHealth.NodeName);
            Console.WriteLine("    Aggregated Health State: " + deployedServicePackageHealth.AggregatedHealthState);
            Console.WriteLine("    Service Manifest Name: " + deployedServicePackageHealth.ServiceManifestName);
            
            // List the health events.
            Console.WriteLine("    Health Events:");
            IList&lt;HealthEvent&gt; healthEvents = deployedServicePackageHealth.HealthEvents;
            foreach (HealthEvent healthEvent in healthEvents)
            {
                Console.WriteLine("      Health Event:");
                Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                Console.WriteLine("        Health Information:");
                Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
            }
            
            // List the unhealthy evaluations.
            Console.WriteLine("    Unhealthy Evaluations:");
            IList&lt;HealthEvaluation&gt; healthEvaluationList = deployedServicePackageHealth.UnhealthyEvaluations;
            foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
            {
                Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                Console.WriteLine("        Description: " + healthEvaluation.Description);
            }
            
            Console.WriteLine();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync">
            <summary>
            Gets the health of a Service Fabric cluster.
            </summary>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster.
            No children are included in the results, because no filters are specified.</remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster.
            </summary>
            <param name="timeout">The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</param>
            <param name="cancellationToken">The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</param>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified.</remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)">
            <summary>
            Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.
            </summary>
            <param name="queryDescription">The query description that defines how health evaluation should be performed and what entities should be included in the <see cref="T:System.Fabric.Health.ClusterHealthChunk"/>.</param>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.</remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.
            </summary>
            <param name="queryDescription">The query description that defines how health evaluation should be performed and what entities should be included in the <see cref="T:System.Fabric.Health.ClusterHealthChunk"/>.</param>
            <param name="timeout">The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</param>
            <param name="cancellationToken">The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</param>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.</remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.ImageStoreClient">
            <summary>
            Represents the image store client for performing image store operations.
            </summary>
        </member>
        <member name="T:System.Fabric.FabricClient.InfrastructureServiceClient">
            <summary>
            <para>Provides methods for performing infrastructure-specific operations.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
            <remarks>
            <para>The InfrastructureService must be enabled before this client can be used. The InfrastructureService is only supported on some infrastructures.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String)">
            <summary>
            <para>Asynchronously invokes an administrative command on the given infrastructure service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously invokes an administrative command on an infrastructure service.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String)">
            <summary>
            <para>Asynchronously invokes a read-only query on the given infrastructure service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously invokes a read-only query on the given infrastructure service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricClient.PropertyManagementClient">
            <summary>
            <para>Represents the property management client used to perform management of names and properties.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.CreateNameAsync(System.Uri)">
            <summary>
            <para>Creates the specified Service Fabric name.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous create operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameAlreadyExists" /> is returned when the Service Fabric name already exists.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.CreateNameAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates the specified Service Fabric name.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous create operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameAlreadyExists" /> is returned when the Service Fabric name already exists.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeleteNameAsync(System.Uri)">
            <summary>
            <para>Deletes the specified Service Fabric name.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous delete operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotEmpty" /> is returned when <paramref name="name" /> is parent of other Names, Properties or a Service.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeleteNameAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified Service Fabric name.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous delete operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotEmpty" /> is returned when <paramref name="name" /> is parent of other Names, Properties or a Service.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean)">
            <summary>
            <para>Enumerates all the Service Fabric names under a given name. </para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric name to be enumerated.</para>
            </param>
            <param name="previousResult">
            <para>The result that was returned by the previous enumerate call. For the initial call, this is null.</para>
            </param>
            <param name="recursive">
            <para>
                <languageKeyword>True</languageKeyword> the enumeration should be recursive.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous enumerate operation.</para>
            <para>See <see cref="T:System.Fabric.NameEnumerationResult" />.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Enumerates all the Service Fabric names under a given name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric name to be enumerated.</para>
            </param>
            <param name="previousResult">
            <para>The result that was returned by the previous enumerate call. For the initial call, this is null.</para>
            </param>
            <param name="recursive">
            <para>
                <languageKeyword>True</languageKeyword> if the enumeration should be recursive.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous enumerate operation.</para>
            <para>See <see cref="T:System.Fabric.NameEnumerationResult" />.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.NameExistsAsync(System.Uri)">
            <summary>
            <para>Returns <languageKeyword>true</languageKeyword> if the specified Service Fabric name exists.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>
                <languageKeyword>true</languageKeyword> if the specified Service Fabric name exists; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            <para>
                <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)" /> is the one way of verifying the cluster is up 
                and <see cref="T:System.Fabric.FabricClient" /> can connect to the cluster.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.NameExistsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Returns <languageKeyword>true</languageKeyword> if the specified Service Fabric name exists.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>
                <languageKeyword>true</languageKeyword> if the specified Service Fabric name exists; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Double)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Double" /> under a given name.
            </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Double,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Double" /> under a given name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Int64)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Int64" /> under a given name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Int64" /> under a given name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.String)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.String" /> under a given name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.String" /> under a given name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Guid)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Guid" /> under a given name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Guid" /> under a given name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Byte[])">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Byte" /> array under a given name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric property of type <see cref="T:System.Byte" /> array under a given name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <paramref name="value" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeletePropertyAsync(System.Uri,System.String)">
            <summary>
            <para>Deletes the specified Service Fabric property.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name of the property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous delete operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound" /> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeletePropertyAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified Service Fabric property.</para>
            </summary>
            <param name="parentName">
            <para>URI defines the parent Service Fabric name of the property.</para>
            </param>
            <param name="propertyName">
            <para>String defines the name of the Service Fabric property.</para>
            </param>
            <param name="timeout">
            <para>
            <see cref="T:System.TimeSpan" /> defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>
                <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous delete operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound" /> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyAsync(System.Uri,System.String)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedProperty" />.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name of the property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            <para>See <see cref="T:System.Fabric.NamedProperty" />.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound" /> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedProperty" />. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name of the property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            <para>See <see cref="T:System.Fabric.NamedProperty" />.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound" /> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation})">
            <summary>
            <para>Submits a batch of <see cref="T:System.Fabric.PropertyBatchOperation" />.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name under which the Property batch operations will be executed.</para>
            </param>
            <param name="operations">
            <para>The batch property operations.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            <para>See <see cref="T:System.Fabric.PropertyBatchResult" />.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when property value is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyCheckFailed" /> is returned when at least one check operation in the user provided <paramref name="operations" /> has failed.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Either all or none of the operations in the batch will be committed. </para>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Submits a batch of <see cref="T:System.Fabric.PropertyBatchOperation" />s. Either all or none of the operations in the batch will be committed.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name under which the Property batch operations will be executed.</para>
            </param>
            <param name="operations">
            <para>The batch property operations.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            <para>See <see cref="T:System.Fabric.PropertyBatchResult" />.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when property value is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyCheckFailed" /> is returned when at least one check operation in the user provided <paramref name="operations" /> has failed.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Either all or none of the operations in the batch will be committed. </para>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyMetadataAsync(System.Uri,System.String)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedPropertyMetadata" />.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name of the property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Property.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            <para>See <see cref="T:System.Fabric.NamedPropertyMetadata" />.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound" /> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyMetadataAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedPropertyMetadata" />.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric name of the property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="parentName" /> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound" /> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="parentName" /> is not a valid Service Fabric name.</para>
            <para>    
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult)">
            <summary>
            <para>Enumerates all Service Fabric properties under a given name. </para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="includeValues">
            <para>
                <languageKeyword>True</languageKeyword> if values should be returned with the metadata. <languageKeyword>False</languageKeyword> to return only property metadata; <languageKeyword>true</languageKeyword> to return property metadata and value.</para>
            </param>
            <param name="previousResult">
            <para>The batch result for the previous call. If this the first call, this field needs to be set to null.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            <para>If <see cref="P:System.Fabric.PropertyEnumerationResult.HasMoreData" /> is true, then this result can be used as input to the next
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult)" /> call.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>    
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Enumerates all Service Fabric properties under a given name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="includeValues">
            <para>
                <languageKeyword>True</languageKeyword> if the values should be returned with the metadata.
                <languageKeyword>False</languageKeyword> to return only property metadata; true to return property metadata and value.</para>
            </param>
            <param name="previousResult">
            <para>The batch result for the previous call. If this the first call, this field needs to be set to null.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous get operation.</para>
            <para>If <see cref="P:System.Fabric.PropertyEnumerationResult.HasMoreData" /> is true, then this result can be used as input to the next 
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult)" /> call.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when the user provided <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>    
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>/// <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutCustomPropertyOperationAsync(System.Uri,System.Fabric.PutCustomPropertyOperation)">
            <summary>
            <para>Creates or updates the specified Service Fabric property described by <see cref="T:System.Fabric.PutCustomPropertyOperation" /> under a given name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="operation">
            <para>The put operation parameters, including property name, value and custom type information.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <see cref="P:System.Fabric.PutCustomPropertyOperation.PropertyValue" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutCustomPropertyOperationAsync(System.Uri,System.Fabric.PutCustomPropertyOperation,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric property described by <see cref="T:System.Fabric.PutCustomPropertyOperation" /> under a given name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric name.</para>
            </param>
            <param name="operation">
            <para>The put operation parameters, including property name, value and custom type information.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous put operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound" /> is returned when <paramref name="name" /> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict" /> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="name" /> is not a valid Service Fabric name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge" /> is returned when <see cref="P:System.Fabric.PutCustomPropertyOperation.PropertyValue" /> is larger than 1MB.</para>
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.QueryClient">
            <summary>
            <para>Represents the fabric client that can be used to issue queries.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync">
            <summary>
            <para>
            Gets the details for all nodes in the cluster.
            If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            For the latest features, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync"/>.
            </para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String)">
            <summary>
            <para>
            Gets the details for all nodes in the cluster or for the specified node. If the nodes do not fit in a page, one page of results is returned as well as a
            continuation token which can be used to get the next page.
            For the latest features, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription)"/>.
            </para>
            </summary>
            <param name="nodeNameFilter">
            <para>The name of the node to get details for. The node name is a case-sensitive exact match. Gets all nodes in the cluster if the given node name is null.
            If the node name does not match any node on the cluster, an empty list is returned.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String)">
            <summary>
            <para>
            Gets the details for all nodes in the cluster or for the specified node.
            If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            For the latest features, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription)"/>.
            </para>
            </summary>
            <param name="nodeNameFilter">
            <para>The name of the node to get details for. The node name is a case-sensitive exact match. Gets all nodes if the given node name is null.
            If the node name does not match any node on the cluster, an empty list is returned.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            </param>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all nodes in the cluster or for the specified node.
            For the latest features, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="nodeNameFilter">
            <para>The name of the node to get details for. The node name is a case-sensitive exact match. Gets all nodes if the given node name is null.
            If the node name does not match any node on the cluster, an empty list is returned.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all nodes in the cluster or for the specified node.
            If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            For the latest features, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="nodeNameFilter">
            <para>The name of the node to get details for. The node name is a case-sensitive exact match. Gets all nodes if the given node name is null.
            If the node name does not match any node on the cluster, an empty list is returned.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.Fabric.Query.NodeStatusFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all nodes in the cluster or for the specified node.
            If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            For the latest features, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="nodeNameFilter">
            <para>The name of the node to get details for. The node name is a case-sensitive exact match. Gets all nodes if the given node name is null.
            If the node name does not match any node on the cluster, an empty list is returned.</para>
            </param>
            <param name="nodeStatusFilter">
            <para>The node status(es) of the nodes to get details for.</para>
            </param>
            <param name="continuationToken">The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync">
            <summary>
            Gets the details for all nodes in the cluster or for the specified node. If the nodes do not fit in a page,
            one page of results is returned as well as a continuation token which can be used to get the next page.
            </summary>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription)">
            <summary>
            Gets the details for all nodes in the cluster or for the specified node. If the nodes do not fit in a page,
            one page of results is returned as well as a continuation token which can be used to get the next page.
            </summary>
            <param name="queryDescription">
                <para>
                    A <see cref="T:System.Fabric.Description.NodeQueryDescription" />
                    object describing which application nodes to return.
                </para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodePagedListAsync(System.Fabric.Description.NodeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all nodes in the cluster or for the specified node. If the nodes do not fit in a page,
            one page of results is returned as well as a continuation token which can be used to get the next page.
            </summary>
            <param name="queryDescription">
                <para>
                    A <see cref="T:System.Fabric.Description.NodeQueryDescription" />
                    object describing which application nodes to return.
                </para>
            </param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync">
            <summary>
            <para>Gets the details for all the application types provisioned or being provisioned in the system.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync" />.
            This method will be deprecated in the future.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of application types as <see cref="T:System.Fabric.Query.ApplicationTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String)">
            <summary>
            <para>Gets the details for all the application types provisioned or being provisioned in the system or for the specified application type.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="applicationTypeNameFilter">
            <para>The type name of the application to get service types for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of application types as <see cref="T:System.Fabric.Query.ApplicationTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the details for all the application types provisioned or being provisioned in the system or for the specified application type.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="applicationTypeNameFilter">
            <para>The type name of the application to get service types for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of application types as <see cref="T:System.Fabric.Query.ApplicationTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync">
            <summary>
                <para>
                    Gets the details for all the application types provisioned or being provisioned in the system.
                </para>
            </summary>
            <returns>
                <para>
                   A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
                   The value of TResult parameter is an <see cref="T:System.Fabric.Query.ApplicationTypePagedList" />.
                </para>
                <para>
                   If no application types are found matching the filters provided, this query returns no application types rather than an error.
                </para>
            </returns>
            <remarks>
                <para>
                    This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which
                    can be used to get the next page. For example, if there are
                    10000 application types but a page only fits the first 3000 application types, 3000 is returned.
                    To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query.
                    A null continuation token is returned if there are no subsequent pages.
                </para>
                <para>
                    Each version of a particular application type is one entry in the result.
                </para>
            </remarks>
            <remarks>
                <para>
                    See more details about application types here: <see cref="T:System.Fabric.Query.ApplicationType" />.
                </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync(System.Fabric.Description.PagedApplicationTypeQueryDescription)">
            <summary>
                <para>
                    Gets the details for application types provisioned or being provisioned in the system which match filters
                    provided by the queryDescription argument.
                </para>
            </summary>
            <param name="queryDescription">
                <para>
                    A <see cref="T:System.Fabric.Description.PagedApplicationTypeQueryDescription" />
                    object describing which application types to return.
                </para>
            </param>
            <returns>
                <para>
                   A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
                   The value of TResult parameter is an <see cref="T:System.Fabric.Query.ApplicationTypePagedList" />.
                </para>
                <para>
                   If no application types are found matching the filters provided, this query returns no application types rather than an error.
                </para>
            </returns>
            <remarks>
                <para>
                    This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which
                    can be used to get the next page. For example, if there are
                    10000 application types but a page only fits the first 3000 application types, 3000 is returned.
                    To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query.
                    A null continuation token is returned if there are no subsequent pages.
                </para>
                <para>
                    Each version of a particular application type is one entry in the result.
                </para>
            </remarks>
            <remarks>
                <para>
                    See more details about application types here: <see cref="T:System.Fabric.Query.ApplicationType" />.
                </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypePagedListAsync(System.Fabric.Description.PagedApplicationTypeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
                 <para>
                     Gets the details for application types provisioned or being provisioned in the system which match filters
                     provided by the queryDescription argument.
                 </para>
             </summary>
             <param name="queryDescription">
                 <para>
                     A <see cref="T:System.Fabric.Description.PagedApplicationTypeQueryDescription" />
                     object describing which application types to return.
                 </para>
            
             </param>
             <param name="timeout">
                 <para>
                     Specifies the duration this operation has to complete before timing out.
                 </para>
             </param>
             <param name="cancellationToken">
                 <para>
                     Propagates notification that operations should be canceled.
                 </para>
             </param>
             <returns>
                 <para>
                    A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
                    The value of TResult parameter is an <see cref="T:System.Fabric.Query.ApplicationTypePagedList" />.
                 </para>
                 <para>
                    If no application types are found matching the filters provided, this query returns no application types rather than an error.
                 </para>
             </returns>
             <remarks>
                 <para>
                     This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which
                     can be used to get the next page. For example, if there are
                     10000 application types but a page only fits the first 3000 application types, 3000 is returned.
                     To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query.
                     A null continuation token is returned if there are no subsequent pages.
                 </para>
                 <para>
                     Each version of a particular application type is one entry in the result.
                 </para>
             </remarks>
             <remarks>
                 <para>
                     See more details about application types here: <see cref="T:System.Fabric.Query.ApplicationType" />.
                 </para>
             </remarks>
             <exception cref="T:System.Fabric.FabricObjectClosedException">
             <para>
                 See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
             </exception>
             <exception cref="T:System.TimeoutException">
             <para>
                 See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             <para>
                 See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
             </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceTypeListAsync(System.String,System.String)">
            <summary>
            <para>Gets the list of service types.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name of the application to get service types for.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version to get service types for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service types as <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceTypeListAsync(System.String,System.String,System.String)">
            <summary>
            <para>Gets the list of service types.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name of the application to get service types for.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version to get service types for.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>The name of the service type to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service types as <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceTypeListAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of service types.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name of the application to get service types for.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version to get service types for.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>The name of the service type to get details for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service types as <see cref="T:System.Fabric.Query.ServiceTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberTypeListAsync(System.String,System.String)">
            <summary>
            <para>Get service group members types of service group(s).</para>
            </summary>
            <param name="applicationTypeName">
            <para>The application type name of the service group.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version of the service group.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service group member types as <see cref="T:System.Fabric.Query.ServiceGroupMemberTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberTypeListAsync(System.String,System.String,System.String)">
            <summary>
            <para>Get service group members types of service group(s).</para>
            </summary>
            <param name="applicationTypeName">
            <para>The application type name of the service group.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version of the service group.</para>
            </param>
            <param name="serviceGroupTypeNameFilter">
            <para>The name of the service group type to get.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service group member types as <see cref="T:System.Fabric.Query.ServiceGroupMemberTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberTypeListAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Get service group members types of service group(s).</para>
            </summary>
            <param name="applicationTypeName">
            <para>The application type name of the service group.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version of the service group.</para>
            </param>
            <param name="serviceGroupTypeNameFilter">
            <para>The name of the service group type to get.</para>
            </param>
            <param name="timeout">
            <para>The timeout to the operation.</para>
            </param>
            <param name="cancellationToken">
            <para>Notifies the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service group member types as <see cref="T:System.Fabric.Query.ServiceGroupMemberTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync">
            <summary>
            <para>
            Gets the details for all applications created in the system. If the applications do not fit in a page, one page of results is returned as well as a
            continuation token which can be used to get the next page.
            </para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>If the provided application name has no matching applications, it returns a list of 0 entries.</para>
            <para>The returned task contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)">
            <summary>
            <para>
            Gets the details for all applications or for a specific application created in the system. If the applications do not fit in a page,
            one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationNameFilter">
            <para>The name of the application to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList" />.</para>
            <para>If the provided application name has no matching applications, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String)">
            <summary>
            <para>
            Gets the details for all applications or for a specific application created in the system. If the applications do not fit in a page,
            one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationNameFilter">
            <para>The name of the application to get details for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList" />.</para>
            <para>If the provided application name has no matching applications, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all applications or for a specific application created in the system. If the applications do not fit in a page,
            one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationNameFilter">
            <para>The name of the application to get details for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList" />.</para>
            <para>If the provided application name has no matching applications, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all applications or for a specific application created in the system. If the applications do not fit in a page,
            one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationNameFilter">
            <para>The name of the application to get details for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList" />.</para>
            <para>If the provided application name has no matching applications, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationPagedListAsync(System.Fabric.Description.ApplicationQueryDescription)">
            <summary>
            <para>Gets the details of applications created that match filters specified in query description (if any).
            If the applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
            </summary>
            <param name="applicationQueryDescription">
            <para>The <see cref="T:System.Fabric.Description.ApplicationQueryDescription" /> that determines which applications should be queried.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:System.Fabric.Query.ApplicationList" /> that represents the list of applications
            that respect the filters in the <see cref="T:System.Fabric.Description.ApplicationQueryDescription" /> and fit the page.
            If the provided query description has no matching applications, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationPagedListAsync(System.Fabric.Description.ApplicationQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the details of applications created that match filters specified in query description (if any).
            If the applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
            </summary>
            <param name="applicationQueryDescription">
            <para>The <see cref="T:System.Fabric.Description.ApplicationQueryDescription" /> that determines which applications should be queried.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:System.Fabric.Query.ApplicationList" /> that represents the list of applications
            that respect the filters in the <see cref="T:System.Fabric.Description.ApplicationQueryDescription" /> and fit the page.
            If the provided query description has no matching applications, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri)">
            <summary>
            <para>
            Gets the information about all services belonging to the application specified by the application name URI. If the services do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationName">
            <para>The name of the application to get services for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of services as <see cref="T:System.Fabric.Query.ServiceList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri)">
            <summary>
            <para>
            Gets the details for all services of an application or just the specified service. If the services do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationName">
            <para>The name of the application to get services for.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The name of the services to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of services as <see cref="T:System.Fabric.Query.ServiceList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String)">
            <summary>
            <para>
            Gets the details for all services of an application or just the specified service. If the services do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationName">
            <para>The name of the application to get services for.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The name of the services to get details for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of services as <see cref="T:System.Fabric.Query.ServiceList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all services of an application or just the specified service. If the services do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationName">
            <para>The name of the application to get services for.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The name of the services to get details for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of services as <see cref="T:System.Fabric.Query.ServiceList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all services of an application or just the specified service. If the services do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationName">
            <para>The name of the application to get services for.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The name of the services to get details for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of services as <see cref="T:System.Fabric.Query.ServiceList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServicePagedListAsync(System.Fabric.Description.ServiceQueryDescription)">
            <summary>
            <para>Gets the details for all services of an application or just the specified services that match filters specified in query description (if any).
            If the services do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
            </summary>
            <param name="serviceQueryDescription">
            <para>The <see cref="T:System.Fabric.Description.ServiceQueryDescription" /> that determines which services should be queried.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is a <see cref="T:System.Fabric.Query.ServiceList" /> that represents the list of services that respect the filters in the <see cref="T:System.Fabric.Query.ServiceList" /> and fit the page.
            If the provided query description has no matching services, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServicePagedListAsync(System.Fabric.Description.ServiceQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the details for all services of an application or just the specified services that match filters specified in query description (if any).
            If the services do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
            </summary>
            <param name="serviceQueryDescription">
            <para>The <see cref="T:System.Fabric.Description.ServiceQueryDescription" /> that determines which services should be queried.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is a <see cref="T:System.Fabric.Query.ServiceList" /> that represents the list of services that respect the filters in the <see cref="T:System.Fabric.Query.ServiceList" /> and fit the page.
            If the provided query description has no matching services, it returns a list of 0 entries.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberListAsync(System.Uri)">
            <summary>
            <para>Get service group members of an application.</para>
            </summary>
            <param name="applicationName">
            <para>The application name of the service group.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service group members as <see cref="T:System.Fabric.Query.ServiceGroupMemberList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberListAsync(System.Uri,System.Uri)">
            <summary>
            <para>Get service group members of an application.</para>
            </summary>
            <param name="applicationName">
            <para>The application name of the service group.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The service name of the service group.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service group members as <see cref="T:System.Fabric.Query.ServiceGroupMemberList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberListAsync(System.Uri,System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all partitions of a service. If the partitions do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="applicationName">
            <para>The application name of the service group.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The service name of the service group.</para>
            </param>
            <param name="timeout">
            <para>The timeout to the operation.</para>
            </param>
            <param name="cancellationToken">
            <para>Notifies the operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of service group members as <see cref="T:System.Fabric.Query.ServiceGroupMemberList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri)">
            <summary>
            <para>
            Gets the details for all partitions of a service. If the partitions do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service to get partitions for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of partitions as <see cref="T:System.Fabric.Query.ServicePartitionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.String)">
            <summary>
            <para>
            Gets the details for all partitions of a service. If the partitions do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of partitions as <see cref="T:System.Fabric.Query.ServicePartitionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid})">
            <summary>
            <para>
            Gets the details for all partitions of a service or just the specified partition. If the partitions do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The partition ID of the partition to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of partitions as <see cref="T:System.Fabric.Query.ServicePartitionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all partitions of a service or just the specified partition. If the partitions do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The partition ID of the partition to get details for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of partitions as <see cref="T:System.Fabric.Query.ServicePartitionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid},System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all partitions of a service or just the specified partition. If the partitions do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The partition ID of the partition to get details for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of partitions as <see cref="T:System.Fabric.Query.ServicePartitionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for the specified partition.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition ID of the partition to get details for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of partitions as <see cref="T:System.Fabric.Query.ServicePartitionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionAsync(System.Guid)">
            <summary>
            <para>
            Gets the details for the specified partition.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition ID of the partition to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the list of partitions as <see cref="T:System.Fabric.Query.ServicePartitionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionLoadInformationAsync(System.Guid)">
            <summary>
            <para>Gets the information about the partition load.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID of the partition to get load information for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the load information of a partition as <see cref="T:System.Fabric.Query.PartitionLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionLoadInformationAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the information about the partition load.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID of the partition to get load information for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the load information of a partition as <see cref="T:System.Fabric.Query.PartitionLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)">
            <summary>
            <para>
            Gets the details for all replicas of a partition. If the replicas do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier for the partition to get replicas for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the replica information of the partition as <see cref="T:System.Fabric.Query.ServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match
                <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> and
                <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String)">
            <summary>
            <para>
            Gets the details for all replicas of a partition. If the replicas do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier for the partition to get replicas for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the replica information of the partition as <see cref="T:System.Fabric.Query.ServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match
                <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64)">
            <summary>
            <para>
            Gets the details for all replicas of a partition that match the replica or instance filter and the status filter. If the replicas do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier for the partition to get replicas for.</para>
            </param>
            <param name="replicaIdOrInstanceIdFilter">
            <para>The replica identifier or instance identifier to get replicas for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the replica information of the partition as <see cref="T:System.Fabric.Query.ServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all replicas of a partition that match the replica or instance filter. If the replicas do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier for the partition to get replicas for.</para>
            </param>
            <param name="replicaIdOrInstanceIdFilter">
            <para>The replica identifier or instance identifier to get replicas for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the replica information of the partition as <see cref="T:System.Fabric.Query.ServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all replicas of a partition. If the replicas do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier of the partition to get replicas for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            <para>The returned task contains the replica information of the partition as <see cref="T:System.Fabric.Query.ServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all replicas of a partition that match the replica or instance filter and the status filter. If the replicas do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier for the partition to get replicas for.</para>
            </param>
            <param name="replicaIdOrInstanceIdFilter">
            <para>The replica identifier or instance identifier to get replicas for.</para>
            </param>
            <param name="replicaStatusFilter">
            <para>The replica status(es) to get replicas for.</para>
            </param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the replica information of the partition as <see cref="T:System.Fabric.Query.ServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all replicas of a partition that match the replica or instance filter and the status filter. If the replicas do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier for the partition to get replicas for.</para>
            </param>
            <param name="replicaIdOrInstanceIdFilter">
            <para>The replica identifier or instance identifier to get replicas for.</para>
            </param>
            <param name="replicaStatusFilter">
            <para>Filter results to include only those matching this replica status.</para>
            </param>
            <param name="continuationToken">The continuation token obtained from a previous query. This value can be passed along to this query to start where the last query left off.
            Not passing a continuation token means returned results start from the first page.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the replica information of the partition as <see cref="T:System.Fabric.Query.ServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationPagedListAsync(System.Fabric.Description.PagedDeployedApplicationQueryDescription)">
            <summary>
            <para>Gets the list of applications deployed on a node.</para>
            </summary>
            <param name="queryDescription">
                <para>
                    A <see cref="T:System.Fabric.Description.PagedDeployedApplicationQueryDescription" />
                    object describing which deployed applications to return.
                </para>
            </param>
            <returns>
                <para>A task that represents the asynchronous query operation.</para>
                <para>The returned task contains the list of deployed applications as <see cref="T:System.Fabric.Query.DeployedApplicationPagedList" />.</para>
                <para>
                   This query returns empty rather than an error if no results are found matching the filters provided.
                </para>
            </returns>
            <remarks>
                <para>
                    This is a paged query, meaning that if not all of the applications fit in a page, one page of results is returned as well as a continuation token which
                    can be used to get the next page. For example, if there are
                    10000 applications but a page only fits the first 3000 applications, 3000 is returned.
                    To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query.
                    A null continuation token is returned if there are no subsequent pages.
                </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.
            </para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationPagedListAsync(System.Fabric.Description.PagedDeployedApplicationQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of applications deployed on a node.</para>
            </summary>
            <param name="queryDescription">
                <para>
                    A <see cref="T:System.Fabric.Description.PagedDeployedApplicationQueryDescription" />
                    object describing which deployed applications to return.
                </para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
                <para>A task that represents the asynchronous query operation.</para>
                <para>The returned task contains the list of deployed applications as <see cref="T:System.Fabric.Query.DeployedApplicationPagedList" />.</para>
                <para>
                   This query returns empty rather than an error if no application types are found matching the filters provided.
                </para>
            </returns>
            <remarks>
                <para>
                    This is a paged query, meaning that if not all of the applications fit in a page, one page of results is returned as well as a continuation token which
                    can be used to get the next page. For example, if there are
                    10000 applications but a page only fits the first 3000 applications, 3000 is returned.
                    To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query.
                    A null continuation token is returned if there are no subsequent pages.
                </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationListAsync(System.String)">
            <summary>
            <para>Gets the deployed application list.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationPagedListAsync(System.Fabric.Description.PagedDeployedApplicationQueryDescription)" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to get applications for. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed applications as <see cref="T:System.Fabric.Query.DeployedApplicationList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the deployed applications on a node with the specified application name.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationPagedListAsync(System.Fabric.Description.PagedDeployedApplicationQueryDescription)" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to get applications for. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationNameFilter">
            <para>Filter results to include only applications matching this application name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed applications as <see cref="T:System.Fabric.Query.DeployedApplicationList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationListAsync(System.String,System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the deployed applications on a node with the specified application name.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationPagedListAsync(System.Fabric.Description.PagedDeployedApplicationQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to get applications for. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationNameFilter">
            <para>Filter results to include only applications matching this application name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed applications as <see cref="T:System.Fabric.Query.DeployedApplicationList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the deployed service packages for the given node and application.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription)" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service packages as <see cref="T:System.Fabric.Query.DeployedServicePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri,System.String)">
            <summary>
            <para>Gets the deployed service packages for the given node and application.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription)" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service packages as <see cref="T:System.Fabric.Query.DeployedServicePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the deployed service packages for the given node and application.
            For more functionality, use <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />.
            This method will be deprecated in the future.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service packages as <see cref="T:System.Fabric.Query.DeployedServicePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription)">
            <summary>
            <para>Gets the deployed service packages for the given node and application.</para>
            </summary>
            <param name="queryDescription">
                <para>
                    A <see cref="T:System.Fabric.Description.PagedDeployedServicePackageQueryDescription" />
                    object describing which deployed service packages to return.
                </para>
            </param>
            <returns>
                <para>A task that represents the asynchronous query operation.</para>
                <para>The returned task contains the list of deployed service packages as <see cref="T:System.Fabric.Query.DeployedServicePackagePagedList" />.</para>
                <para>
                   This query returns empty rather than an error if no results are found matching the filters provided.
                </para>
            </returns>
            <remarks>
                <para>
                    This is a paged query, meaning that if not all of the service packages fit in a page, one page of results is returned as well as a continuation token which
                    can be used to get the next page. For example, if there are
                    10000 service packages but a page only fits the first 3000 service packages, 3000 is returned.
                    To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query.
                    A null continuation token is returned if there are no subsequent pages.
                </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackagePagedListAsync(System.Fabric.Description.PagedDeployedServicePackageQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the deployed service packages for the given node and application. </para>
            </summary>
            <param name="queryDescription">
                <para>
                    A <see cref="T:System.Fabric.Description.PagedDeployedServicePackageQueryDescription" />
                    object describing which deployed service packages to return.
                </para>
            </param>
            <returns>
                <para>A task that represents the asynchronous query operation.</para>
                <para>The returned task contains the list of deployed service packages as <see cref="T:System.Fabric.Query.DeployedServicePackagePagedList" />.</para>
                <para>
                   This query returns empty rather than an error if no results are found matching the filters provided.
                </para>
            </returns>
            <remarks>
                <para>
                    This is a paged query, meaning that if not all of the service packages fit in a page, one page of results is returned as well as a continuation token which
                    can be used to get the next page. For example, if there are
                    10000 service packages but a page only fits the first 3000 service packages, 3000 is returned.
                    To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query.
                    A null continuation token is returned if there are no subsequent pages.
                </para>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServiceTypeListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the deployed service types on the given node and application.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service types as <see cref="T:System.Fabric.Query.DeployedServiceTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServiceTypeListAsync(System.String,System.Uri,System.String,System.String)">
            <summary>
            <para>Gets the deployed service types on the given node and application.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only service types matching this service manifest name.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>Filter results to include only service types matching this name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service types as <see cref="T:System.Fabric.Query.DeployedServiceTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServiceTypeListAsync(System.String,System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the deployed service types on the given node and application.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only service types matching this service manifest name.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>Filter results to include only service types matching this name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service types as <see cref="T:System.Fabric.Query.DeployedServiceTypeList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the list of the deployed code packages.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed code packages as <see cref="T:System.Fabric.Query.DeployedCodePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri,System.String,System.String)">
            <summary>
            <para>Gets the list of the deployed code packages.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <param name="codePackageNameFilter">
            <para>Filter results to include only those matching this code package name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed code packages as <see cref="T:System.Fabric.Query.DeployedCodePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of the deployed code packages.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <param name="codePackageNameFilter">
            <para>Filter results to include only those matching this code package name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed code packages as <see cref="T:System.Fabric.Query.DeployedCodePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            <para>Gets the list of the deployed code packages.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <param name="codePackageNameFilter">
            <para>Filter results to include only those matching this code package name.</para>
            </param>
            <param name="includeCodePackageUsageStats">
            <para>Filter result to include or not include container statistics such as CPU/Memory/IO usage.  This can cause the API to take
            longer to return results if your application has many containers and you do not filter by service manifest or code package. </para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed code packages as <see cref="T:System.Fabric.Query.DeployedCodePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri,System.String,System.String,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of the deployed code packages.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <param name="codePackageNameFilter">
            <para>Filter results to include only those matching this code package name.</para>
            </param>
            <param name="includeCodePackageUsageStats">
            <para>Filter result to include or not include container statistics such as CPU/Memory/IO usage.  This can cause the API to take
            longer to return results if your application has many containers and you do not filter by service manifest or code package. </para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed code packages as <see cref="T:System.Fabric.Query.DeployedCodePackageList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the view of replicas from a node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service replicas as <see cref="T:System.Fabric.Query.DeployedServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri,System.Nullable{System.Guid})">
            <summary>
            <para>Gets the view of replicas from a node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="partitionIdFilter">
            <para>Filter results to only include replicas matching this partition ID.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service replicas as <see cref="T:System.Fabric.Query.DeployedServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri,System.String,System.Nullable{System.Guid})">
            <summary>
            <para>Gets the view of replicas from a node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="partitionIdFilter">
            <para>Filter results to only include replicas matching this partition ID.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service replicas as <see cref="T:System.Fabric.Query.DeployedServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)"/> and
                <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri,System.String,System.Nullable{System.Guid},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the view of replicas from a node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="partitionIdFilter">
            <para>Filter results to only include replicas matching this partition ID.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>Filter results to include only those matching this service manifest name.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of deployed service replicas as <see cref="T:System.Fabric.Query.DeployedServiceReplicaList" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)"/> and
                <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)">
            <summary>
            <para>Returns details of a replica running on the specified node.</para>
            </summary>
            <param name="nodeName">
            <para>The node name from which the results are desired. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="partitionId">
            <para>The partition id for which the results are desired.</para>
            </param>
            <param name="replicaId">
            <para>The identifier for the replica or the instance for which the results are desired.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the replica information as <see cref="T:System.Fabric.Query.DeployedServiceReplicaDetail" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Returns details of a replica running on the specified node.</para>
            </summary>
            <param name="nodeName">
            <para>The node name from which the results are desired. This is a case-sensitive exact match. This value should not be null or empty,
            and if the node name does not match any node on the cluster, an exception is thrown.</para>
            </param>
            <param name="partitionId">
            <para>The partition id for which the results are desired.</para>
            </param>
            <param name="replicaId">
            <para>The identifier for the replica or the instance for which the results are desired.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the replica information as <see cref="T:System.Fabric.Query.DeployedServiceReplicaDetail" />.</para>
            </returns>
            <remarks>
            <para>
                Service Fabric is a distributed system where many components have a view of the same entity. </para>
            <para>
                In an unstable or transient state, this view may not match <see cref="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)"/> and <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)"/> </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricInvalidAddressException">
                <para> For this query, this exception usually means that the given node name does not match any node in the cluster.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetClusterLoadInformationAsync">
            <summary>
            <para>Gets the cluster load information.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>See <see cref="T:System.Fabric.Query.ClusterLoadInformation" />.</para>
            <para>The returned task contains the load information of the cluster as <see cref="T:System.Fabric.Query.ClusterLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetClusterLoadInformationAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the cluster load information.</para>
            </summary>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the load information of the cluster as <see cref="T:System.Fabric.Query.ClusterLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetLoadedPartitionInfoListAsync(System.Fabric.Description.LoadedPartitionInformationQueryDescription)">
            <summary>
            <para>Gets top/least loaded partitions.</para>
            </summary>
            <param name="queryDescription">Describes the query to get top/least loaded partitions.</param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the information of top/least loaded partitions as <see cref="T:System.Fabric.Query.LoadedPartitionInformationResultList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetLoadedPartitionInfoListAsync(System.Fabric.Description.LoadedPartitionInformationQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets top/least loaded partitions.</para>
            </summary>
            <param name="queryDescription">Describes the query to get top/least loaded partitions.</param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the information of top/least loaded partitions as <see cref="T:System.Fabric.Query.LoadedPartitionInformationResultList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync">
            <summary>
            <para>Gets details for all cluster code versions provisioned in the system.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of provisioned Service Fabric code versions as <see cref="T:System.Fabric.Query.ProvisionedFabricCodeVersionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync(System.String)">
            <summary>
            <para>Gets details for the specific cluster code version provisioned in the system.</para>
            </summary>
            <param name="codeVersionFilter">
            <para>The code version to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of provisioned Service Fabric code versions as <see cref="T:System.Fabric.Query.ProvisionedFabricCodeVersionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets details for the specific cluster code version provisioned in the system.</para>
            </summary>
            <param name="codeVersionFilter">
            <para>Code version to get details for.</para>
            </param>
            <param name="timeout">
            <para>The maximum time allowed for the operation to complete before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of provisioned Service Fabric code versions as <see cref="T:System.Fabric.Query.ProvisionedFabricCodeVersionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync">
            <summary>
            <para>Gets details for all cluster config versions provisioned in the system.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of provisioned Service Fabric config versions as <see cref="T:System.Fabric.Query.ProvisionedFabricConfigVersionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync(System.String)">
            <summary>
            <para>Gets details for a specific cluster config version provisioned in the system.</para>
            </summary>
            <param name="configVersionFilter">
            <para>The config version to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of provisioned Service Fabric config versions as <see cref="T:System.Fabric.Query.ProvisionedFabricConfigVersionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets details for a specific cluster config version provisioned in the system.</para>
            </summary>
            <param name="configVersionFilter">
            <para>The config version to get details for.</para>
            </param>
            <param name="timeout">
            <para>The maximum time allowed for the operation to complete before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the list of provisioned Service Fabric config versions as <see cref="T:System.Fabric.Query.ProvisionedFabricConfigVersionList" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeLoadInformationAsync(System.String)">
            <summary>
            <para>Get metrics and load information on the node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match.
            If the node name does not match any node on the cluster, an empty <see cref="T:System.Fabric.Query.NodeLoadInformation" /> is returned.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the load information of the node as <see cref="T:System.Fabric.Query.NodeLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeLoadInformationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Get metrics and load information on the node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node. This is a case-sensitive exact match.
            If the node name does not match any node on the cluster, an empty <see cref="T:System.Fabric.Query.NodeLoadInformation" /> is returned.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the load information of the node as <see cref="T:System.Fabric.Query.NodeLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaLoadInformationAsync(System.Guid,System.Int64)">
            <summary>
            <para>Get a list of metric and their load on a replica.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="replicaIdOrInstanceId">
            <para>The replica ID (stateful service) or instance ID (stateless service).</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the load information of the replica as <see cref="T:System.Fabric.Query.ReplicaLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaLoadInformationAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Get a list of metric and their load on a replica.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="replicaIdOrInstanceId">
            <para>The replica ID (stateful service) or instance ID (stateless service).</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the load information of the replica as <see cref="T:System.Fabric.Query.ReplicaLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetUnplacedReplicaInformationAsync(System.String,System.Guid,System.Boolean)">
            <summary>
            <para>Get diagnostics information about services with unplaced replicas.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="onlyQueryPrimaries">
            <para>Return only the unplaced replica diagnostics for only the attempted primary replica placements in order to limit output.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the information of an unplaced replica as <see cref="T:System.Fabric.Query.UnplacedReplicaInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetUnplacedReplicaInformationAsync(System.String,System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Get diagnostics information about services with unplaced replicas.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="onlyQueryPrimaries">
            <para>Return only the unplaced replica diagnostics for only the attempted primary replica placements in order to limit output.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the information of an unplaced replica as <see cref="T:System.Fabric.Query.UnplacedReplicaInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationLoadInformationAsync(System.String)">
            <summary>
            <para>Retrieves the load information of the specified application instance.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the information of an application as <see cref="T:System.Fabric.Query.ApplicationLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>This operation has a timeout of 60 seconds.</para>
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationLoadInformationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieves the load information of the specified application instance.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the information of an application as <see cref="T:System.Fabric.Query.ApplicationLoadInformation" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceNameAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the service name for the specified partition.</para>
            </summary>
            <param name="partitionId">
            <para>The id of the partition to get the service name for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation.</para>
            <para>The returned task contains the service name as <see cref="T:System.Fabric.Query.ServiceNameResult" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationNameAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the application name for the specified service.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service to get the application name for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous query operation. </para>
            <para>The returned task contains the application name as <see cref="T:System.Fabric.Query.ApplicationNameResult" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.RepairManagementClient">
            <summary>
            <para>Provides methods for managing repair tasks.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Creates a new repair task.</para>
            </summary>
            <param name = "repairTask" >
            <para> The description of the repair task to be created.</para>
            </param>
            <returns>
            <para>The version number of the newly-created repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new repair task.</para>
            </summary>
            <param name = "repairTask" >
            <para> The description of the repair task to be created.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a<see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name = "cancellationToken" >
            <para> The optional cancellation token that the operation is observing.It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The version number of the newly-created repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean)">
            <summary>
            <para>Requests the cancellation of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be cancelled.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="requestAbort">
            <para>
                <languageKeyword>True</languageKeyword> if the repair should be stopped as soon as possible even if it has already started executing. <languageKeyword>False</languageKeyword> if the repair should be cancelled only if execution has not yet started.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Requests the cancellation of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be cancelled.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="requestAbort">
            <para>
                <languageKeyword>True</languageKeyword> if the repair should be stopped as soon as possible even if it has already started executing. <languageKeyword>False</languageKeyword> if the repair should be cancelled only if execution has not yet started.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64)">
            <summary>
            <para>Forces the approval of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be approved.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Forces the approval of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be approved.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64)">
            <summary>
            <para>Deletes the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the completed repair task to be deleted.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <returns>
            <para>A task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the completed repair task to be deleted.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)">
            <summary>
            Updates a repair task.
            </summary>
            <param name="repairTask">The modified repair task.</param>
            <returns><para>The new version number of the repair task.</para></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Updates a repair task.
            </summary>
            <param name="repairTask">The modified repair task.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns><para>The new version number of the repair task.</para></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync">
            <summary>
            <para>Gets a list of all repair tasks.</para>
            </summary>
            <returns>
            <para>The list of all repair tasks.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets a list of all repair tasks.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The list of all repair tasks.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String)">
            <summary>
            <para>Gets a list of repair tasks matching all of the given filters.</para>
            </summary>
            <param name="taskIdFilter">
            <para>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</para>
            </param>
            <param name="stateFilter">
            <para>A bitwise combination of state filter values that specify which task states should be included in the list.</para>
            </param>
            <param name="executorFilter">
            <para>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</para>
            </param>
            <returns>
            <para>The list of repair tasks matching all of the given filters.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets a list of repair tasks matching all of the given filters.</para>
            </summary>
            <param name="taskIdFilter">
            <para>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</para>
            </param>
            <param name="stateFilter">
            <para>A bitwise combination of state filter values that specify which task states should be included in the list.</para>
            </param>
            <param name="executorFilter">
            <para>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The list of repair tasks matching all of the given filters.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Updates the health policy of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task for which the health policy is to be updated.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="performPreparingHealthCheck">
            <para>
            A nullable boolean indicating if health check is to be performed in the Preparing stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Otherwise, specify the desired new value. 
            </para>
            </param>
            <param name="performRestoringHealthCheck">
            <para>
            A nullable boolean indicating if health check is to be performed in the Restoring stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Otherwise, specify the desired new value. 
            </para>
            </param>            
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the health policy of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task for which the health policy is to be updated.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="performPreparingHealthCheck">
            <para>
            A nullable boolean indicating if health check is to be performed in the Preparing stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Else, specify the appropriate <c>bool</c> value. 
            </para>
            </param>
            <param name="performRestoringHealthCheck">
            <para>
            A nullable boolean indicating if health check is to be performed in the Restoring stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Else, specify the appropriate <c>bool</c> value. 
            </para>
            </param>            
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricClient.ServiceGroupManagementClient">
            <summary>
            <para>Allows client side creation, deletion, and inspection of service groups inside the cluster, 
            just like the <see cref="T:System.Fabric.FabricClient.ServiceManagementClient" /> for regular services.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)">
            <summary>
            Asynchronously creates a service group from the given <see cref="T:System.Fabric.Description.ServiceGroupDescription" />.
            </summary>
            <param name="description">The <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> which describes the group and its members.</param>
            <returns>The task representing the asynchronous service group creation operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a service group from the given <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> with the provided timeout 
            and <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="description">The <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> which describes the group and its members.</param>
            <param name="timeout">Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning 
            a Timeout Exception.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
            <returns>The task representing the asynchronous service group creation operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])">
            <summary>
            <para>Creates a Service Group from a Service Group Template that is pre-defined in the current Application Manifest.</para>
            </summary>
            <param name="applicationName">
            <para>Application name for the Service Group</para>
            </param>
            <param name="serviceName">
            <para>Service name for the Service Group</para>
            </param>
            <param name="serviceTypeName">
            <para>Service Type Name for the Service Group</para>
            </param>
            <param name="initializationData">
            <para>Initialization data to pass into the Service Group instance</para>
            </param>
            <returns>
            <para>The task representing the asynchronous service group creation operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a service group from a Service Group Template that is pre-defined in the current Application Manifest.</para>
            </summary>
            <param name="applicationName">
            <para>Application name for the Service Group</para>
            </param>
            <param name="serviceName">
            <para>Service name for the Service Group</para>
            </param>
            <param name="serviceTypeName">
            <para>Service Type Name for the Service Group</para>
            </param>
            <param name="initializationData">
            <para>Initialization data to pass into the Service Group instance</para>
            </param>
            <param name="timeout">
            <para>Maximum allowed time for the operation to complete before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous service group creation operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Fabric.Description.ServiceGroupFromTemplateDescription)">
            <summary>
            <para>Creates a service group from a Service Group Template that is pre-defined in the current Application Manifest.</para>
            </summary>
            <param name="serviceGroupFromTemplateDescription">
            <para>Describes the Service Group to be created from Service Group Template specified in Application Manifest.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous service group creation operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Fabric.Description.ServiceGroupFromTemplateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a service group from a Service Group Template that is pre-defined in the current Application Manifest.</para>
            </summary>
            <param name="serviceGroupFromTemplateDescription">
            <para>Describes the Service Group to be created from Service Group Template specified in Application Manifest.</para>
            </param>
            <param name="timeout">
            <para>Maximum allowed time for the operation to complete before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous service group creation operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription)">
            <summary>
            Asynchronously updates a service group with the specified description.
            </summary>
            <param name="name">The URI name of the service group being updated.</param>
            <param name="updateDescription">The <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription" /> that specifies the updated configuration for the service group.</param>
            <returns>The task representing the asynchronous service group update operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a service group with specified description.
            </summary>
            <param name="name">The URI name of the service being updated.</param>
            <param name="updateDescription">The <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription" /> that specifies the updated configuration for the service.</param>
            <param name="timeout">The maximum amount of time the system will allow this API to take before returning <see cref="T:System.TimeoutException" />.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</param>
            <returns>The task representing the asynchronous service group update operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri)">
            <summary>
            <para>Asynchronously deletes the specified service group.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group to be deleted.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous service group delete operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously deletes the specified service group with the provided timeout and <see cref="T:System.Threading.CancellationToken" />.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group to be deleted.</para>
            </param>
            <param name="timeout">
            <para>Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a Timeout Exception.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous service group delete operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri)">
            <summary>
            <para>Asynchronously fetches the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> for the specified service group, if it exists.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group whose <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> should be fetched.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously fetches the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> for the specified service group, if it exists, with the provided timeout and <see cref="T:System.Threading.CancellationToken" />.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group whose <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> should be fetched.</para>
            </param>
            <param name="timeout">
            <para>Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a Timeout Exception.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.ServiceManagementClient">
            <summary>
            <para>Represents the enabling of the services to be managed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs">
            <summary>
            The event arguments for a <see cref="E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched" /> event.
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs.Notification">
            <summary>
            <para>Gets the notification object.</para>
            </summary>
            <value>
            <para>The notification object.</para>
            </value>
        </member>
        <member name="E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched">
            <summary>
            <para>Raised when a <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> previously registered through <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)" /> is matched by a service's endpoint changes in system.</para>
            </summary>
            <remarks>
            The event argument is of type <see cref="T:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs" />.
            </remarks>
            <example>
            The following example shows how to register for and process service notifications:
            <code language="cs">
            namespace ServiceNotificationsExample
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        var client = new FabricClient(new string[] { "[cluster_endpoint]:[client_port]" });
            
                        var filter = new ServiceNotificationFilterDescription()
                        {
                            Name = new Uri("fabric:/my_application"),
                            MatchNamePrefix = true,
                        };
            
                        client.ServiceManager.ServiceNotificationFilterMatched += (s, e) => OnNotification(e);
            
                        var filterId = client.ServiceManager.RegisterServiceNotificationFilterAsync(filter).Result;
            
                        Console.WriteLine(
                            "Registered filter: name={0} id={1}",
                            filter.Name,
                            filterId);
            
                        Console.ReadLine();
            
                        client.ServiceManager.UnregisterServiceNotificationFilterAsync(filterId).Wait();
            
                        Console.WriteLine(
                            "Unregistered filter: name={0} id={1}",
                            filter.Name,
                            filterId);
                    }
            
                    private static void OnNotification(EventArgs e)
                    {
                        var castedEventArgs = (FabricClient.ServiceManagementClient.ServiceNotificationEventArgs)e;
            
                        var notification = castedEventArgs.Notification;
            
                        Console.WriteLine(
                            "[{0}] received notification for service '{1}'",
                            DateTime.UtcNow,
                            notification.ServiceName);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription)">
            <summary>
            <para>Instantiates a service with specified description.</para>
            </summary>
            <param name="description">
            <para>The configuration for the service. A <see cref="T:System.Fabric.Description.ServiceDescription" /> contains all of the information necessary to create a service.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="description"/> is null.</exception>
            <remarks>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instantiates a service with specified description. 
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="serviceDescription">
            <para>The configuration for the service. A <see cref="T:System.Fabric.Description.ServiceDescription" /> contains all of the information necessary to create a service.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" />that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="serviceDescription"/> is null.</exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])">
            <summary>
            <para>Instantiates a service from the template specified in the Application Manifest.</para>
            </summary>
            <param name="applicationName">
            <para>The Service Fabric Name of the application under which the service will be created.</para>
            </param>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="serviceTypeName">
            <para>The name of the service type. This has to be same as the ServiceTypeName specified in the service manifest.</para>
            </param>
            <param name="initializationData">
            <para>The initialization data represents the custom data provided by the creator of the service. Service Fabric does not parse this data. 
            This data would be available in every instance or replica in <see cref="T:System.Fabric.StatefulServiceContext"/> or <see cref="T:System.Fabric.StatelessServiceContext"/>.            
            It cannot be changed after the service is created. 
            </para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound" />: The service template does not exist</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="applicationName"/> or <paramref name="serviceName"/> are null.</exception>            
            <exception cref="T:System.ArgumentException">When <paramref name="serviceTypeName"/> is null or white-space.</exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instantiates a service from the template specified in the Application Manifest.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="applicationName">
            <para>The Service Fabric Name of the application under which the service will be created.</para>
            </param>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="serviceTypeName">
            <para>The name of the service type. This has to be same as the ServiceTypeName specified in the service manifest.</para>
            </param>
            <param name="initializationData">
            <para>The initialization data represents the custom data provided by the creator of the service. Service Fabric does not parse this data. 
            This data would be available in every instance or replica in <see cref="T:System.Fabric.StatefulServiceContext"/> or <see cref="T:System.Fabric.StatelessServiceContext"/>.            
            It cannot be changed after the service is created. 
            </para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound" />: The service template does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="applicationName"/> or <paramref name="serviceName"/> are null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="serviceTypeName"/> is null or white-space.</exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Fabric.Description.ServiceFromTemplateDescription)">
            <summary>
            <para>Instantiates a service from the template specified in the Application Manifest.</para>
            </summary>
            <param name="serviceFromTemplateDescription">
            <para>Describes the Service to be created from service template specified in application manifest.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound" />: The service template does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Fabric.Description.ServiceFromTemplateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instantiates a service from the template specified in the Application Manifest.</para>
            </summary>
            <param name="serviceFromTemplateDescription">
            <para>Describes a service to be created from service template specified in application manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound" />: The service template does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)">
            <summary>
            <para>Updates a service with the specified description.</para>
            </summary>
            <param name="name"><para>The URI name of the service being updated.</para></param>
            <param name="updateDescription"><para>The <see cref="T:System.Fabric.Description.ServiceUpdateDescription" /> that specifies the updated configuration for the service.</para></param>
            <returns><para>The updated service.</para></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state.
            Dispose of the<see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> or <paramref name="updateDescription"/> are null.</exception>
            <remarks>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />. </para>
            <para>NOTE: To safely increase both the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize" /> and the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize" /> first increase the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize" /> and wait for additional replicas to be created and then increase the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize" /></para></remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Updates a service with the specified description.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="name"><para>The URI name of the service being updated.</para></param>
            <param name="serviceUpdateDescription"><para>The <see cref="T:System.Fabric.Description.ServiceUpdateDescription" /> that specifies the updated configuration for the service.</para></param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns><para>The updated service.</para></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state.
            Dispose of the<see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> or <paramref name="serviceUpdateDescription"/> are null.</exception>
            <remarks><para>NOTE: To safely increase both the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize" /> and the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize" /> first increase the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize" /> and wait for additional replicas to be created and then increase the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize" /></para></remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri)">
            <summary>
            <para>Deletes the specified service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric name of the service.</para>
            </param>
            <returns>
            <para>The deleted service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="serviceName"/> is null.</exception>
            <remarks>
            <para>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</para>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified service instance.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric name of the service.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The deleted service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="serviceName"/> is null.</exception>
            <remarks>
            <para>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription)">
            <summary>
            <para>Deletes the specified service instance.</para>
            </summary>
            <param name="deleteServiceDescription">
            <para>The description of the service to be deleted.</para>
            </param>
            <returns>
            <para>The deleted service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="deleteServiceDescription"/> is null.</exception>
            <remarks>
            <para>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</para>
            <para>A forceful deletion call can convert on-going normal deletion to forceful one.</para>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified service instance.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="deleteServiceDescription">
            <para>The description of the service to be deleted.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The deleted service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="deleteServiceDescription"/> is null.</exception>
            <remarks>
            <para>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</para>
            <para>A forceful deletion call can convert on-going normal deletion to forceful one.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)">
            <summary>
            <para>Gets the Service Description for the specified service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <returns>
            <para>The Service Description for the specified service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="serviceName"/> is null.</exception>
            <remarks>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            <para>
                <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)" /> is the most efficient way of determining whether a name is associated with a service.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the Service Description for the specified service instance.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service. </para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The Service Description for the specified service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="serviceName"/> is null.</exception>
            <remarks>
            <para>
                <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)" /> is the most efficient way of determining whether a name is associated with a service.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>The <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" /> will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="previousResult">
            <para>The Previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>A complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available. </para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="previousResult">
            <para>The Previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="previousResult">
            <para>Previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" />that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available.</para>
            <para>
                <paramref name="previousResult" /> argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the <paramref name="previousResult" /> argument or <paramref name="previousResult" /> argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The Previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available. </para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>Previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>Previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>
                <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available.</para>
            <para>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available.</para>
            <para>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The previous <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> than the “previousResult” argument if it is available.</para>
            <para>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition" /> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition" /> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition" /> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)">
            <summary>
            <para>This API is deprecated, use <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)" /> instead.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="callback">
            <para>The function that will be called when a notification arrives.</para>
            </param>
            <returns>
            <para>The handler to be raised when the accessibility information of a service partition changes.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="serviceName"/> or <paramref name="callback"/> are null.</exception>
            <remarks>
            <para>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for Singleton partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</para>
            <para>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <see cref="T:System.Fabric.ResolvedServicePartition" /> becomes stale, program registers for updates.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Int64,System.Fabric.ServicePartitionResolutionChangeHandler)">
            <summary>
            <para>This API is deprecated, use <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)" /> instead.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="callback">
            <para>The function that will be called when a notification arrives.</para>
            </param>
            <returns>
            <para>The handler to be raised when the accessibility information of a service partition changes.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="serviceName"/> or <paramref name="callback"/> are null.</exception>
            <remarks>
            <para>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for UniformInt64Range partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</para>
            <para>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <see cref="T:System.Fabric.ResolvedServicePartition" /> becomes stale, program registers for updates.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.String,System.Fabric.ServicePartitionResolutionChangeHandler)">
            <summary>
            <para>This API is deprecated, use <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)" /> instead.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="callback">
            <para>The function that will be called when a notification arrives.</para>
            </param>
            <returns>
            <para>The handler to be raised when the accessibility information of a service partition changes.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="serviceName"/> or <paramref name="callback"/> are null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="partitionKey"/> is null or empty.</exception>            
            <remarks>
            <para>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for Named partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</para>
            <para>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <see cref="T:System.Fabric.ResolvedServicePartition" /> becomes stale, program registers for updates.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler(System.Int64)">
            <summary>
            <para>Unregisters a change handler previously registered with <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)" />.</para>
            </summary>
            <param name="callbackHandle">
            <para>The callbackHandle identifier that will be removed. This is returned by the <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)" /> call.</para>
            </param>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String)">
            <summary>
            <para>Gets the provisioned service manifest document in the specified application type name and application type version.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the provisioned application manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the provisioned application manifest.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest referenced in the application manifest.</para>
            </param>
            <returns>
            <para>The provisioned service manifest document.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the provisioned service manifest document in the specified application type name and application type version.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the provisioned application manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the provisioned application manifest.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest referenced in the application manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The provisioned service manifest document</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="applicationTypeName"/> or <paramref name="applicationTypeVersion"/> or <paramref name="serviceManifestName"/> are null/empty.</exception>            
            <remarks>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64)">
            <summary>
            <para>Removes a service replica running on a node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <returns>
            <para>A Task representing the acknowledgment of the request.</para>
            </returns>
            <remarks>
            <para>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </para>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            <para>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist"/> is returned if the replica or instance id is not running on the node.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation"/> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</para>
            <para>
                See also <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="nodeName"/> is null or empty.</exception>            
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)">
            <summary>
            <para>Removes a service replica running on a node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <param name="forceRemove">
            <para>Specifies whether the replica should be given a chance to gracefully clean up its state and close</para>
            </param>
            <returns>
            <para>A Task representing the acknowledgment of the request.</para>
            </returns>
            <remarks>
            <para>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </para>
            <para>If the forceRemove flag is set then no such opportunity is given. Service Fabric will terminate the host for that replica and any persisted state of that replica will be leaked. </para>
            <para>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</para>
            <para>In addition, the forceRemove flag impacts all other replicas hosted in the same process.</para>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist"/> is returned if the replica or instance id is not running on the node.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation"/> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</para>
            <para>
                See also <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="nodeName"/> is null or empty.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Removes a service replica running on a node.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A Task representing the acknowledgment of the request.</para>
            </returns>
            <remarks>
            <para>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </para>
            <para>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist"/> is returned if the replica or instance id is not running on the node.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation"/> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</para>
            <para>
                See also <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="nodeName"/> is null or empty.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Removes a service replica running on a node.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <param name="forceRemove">
            <para>Specifies whether the replica should be given a chance to gracefully clean up its state and close</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A Task representing the acknowledgment of the request.</para>
            </returns>
            <remarks>
            <para>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </para>
            <para>If the forceRemove flag is set then no such opportunity is given. Service Fabric will terminate the host for that replica and any persisted state of that replica will be leaked. </para>
            <para>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</para>
            <para>In addition, the forceRemove flag impacts all other replicas hosted in the same process.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist"/> is returned if the replica or instance id is not running on the node.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation"/> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</para>
            <para>
                See also <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="nodeName"/> is null or empty.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64)">
            <summary>
            <para>Restarts a service replica of a persisted service running on a node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <returns>
            <para>A Task representing the acknowledgment of the request.</para>
            </returns>
            <remarks>
            <para>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.</para>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist"/> is returned if the replica or instance id is not running on the node.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation"/> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaOperation"/> is returned if the replica does not belong to a stateful persisted service. Only stateful persisted replicas can be restarted.</para>
            <para>
                See also <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="nodeName"/> is null or empty.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Restarts a service replica of a persisted service running on a node.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A Task representing the acknowledgment of the request.</para>
            </returns>
            <remarks>
            <para>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist"/> is returned if the replica or instance id is not running on the node.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation"/> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaOperation"/> is returned if the replica does not belong to a stateful persisted service. Only stateful persisted replicas can be restarted.</para>
            <para>
                See also <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="nodeName"/> is null or empty.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ReportCompletionAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Marks a service replica as completed of a service running on a node.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A Task representing the acknowledgment of the request.</para>
            </returns>
            <remarks>
            <para>WARNING: There are no safety checks performed when this API is used.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>
                See <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist"/> is returned if the replica or instance id is not running on the node.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation"/> is returned if the replica or instance id cannot be completed at this time as it is in an invalid state.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidReplicaOperation"/> is returned if the replica does not belong to a stateless service.</para>
            <para>
                See also <see href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-errors-and-exceptions"/> for handling common FabricClient failures.</para>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="nodeName"/> is null or empty.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)">
            <summary>
            <para>Registers a <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" />.</para>
            </summary>
            <param name="description">
            <para>The description that determines which service endpoint change events should be delivered to this client through the <see cref="E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched" /> event.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. The task result is an ID corresponding to the registered <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> that can be used to unregister the same filter through <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)" />.</para>
            </returns>
            <remarks>
            <para>
            The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.
            </para>
            <para>
            There is a cache of service endpoints in the client that gets updated by notifications and this same cache is used to satisfy complaint based resolution requests (see <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)"/>). Applications that both register for notifications and use complaint based resolution on the same client instance typically only need to pass null for the <see cref="T:System.Fabric.ResolvedServicePartition" /> argument during resolution. This will always return the endpoints in the client cache updated by the latest notification. The notification mechanism itself will keep the client cache updated when service endpoints change, there is no need to convert from a <see cref="T:System.Fabric.ServiceNotification" /> to a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the purposes of refreshing the client cache.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="description"/> is null.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Registers a <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" />.
            Also takes in timeout interval, which is the maximum of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" /> and cancellation-token that the operation is observing. 
            </para>
            </summary>
            <param name="description">
            <para>The description that determines which service endpoint change events should be delivered to this client through the <see cref="E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched" /> event.</para>
            </param>
            <param name="timeout">
            <para>The maximum time allowed for processing the request before <see cref="T:System.TimeoutException" /> is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. The task result is an ID corresponding to the registered <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> that can be used to unregister the same filter through <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)" />.</para>
            </returns>
            <remarks>
            <para>
            There is a cache of service endpoints in the client that gets updated by notifications and this same cache is used to satisfy complaint based resolution requests (see <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)"/>). Applications that both register for notifications and use complaint based resolution on the same client instance typically only need to pass null for the <see cref="T:System.Fabric.ResolvedServicePartition" /> argument during resolution. This will always return the endpoints in the client cache updated by the latest notification. The notification mechanism itself will keep the client cache updated when service endpoints change, there is no need to convert from a <see cref="T:System.Fabric.ServiceNotification" /> to a <see cref="T:System.Fabric.ResolvedServicePartition" /> for the purposes of refreshing the client cache.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="description"/> is null.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)">
            <summary>
            <para>Unregisters a previously registered <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" />.</para>
            </summary>
            <param name="filterId">
            <para>The ID of a previously registered <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> returned from <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)" />.</para>
            </param>
            <remarks>
            <para>It's not necessary to unregister individual filters if the client itself will no longer be used since all <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> objects registered by the <see cref="T:System.Fabric.FabricClient" /> will be automatically unregistered when client is disposed.</para>
            <para>The default timeout is one minute for which the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </remarks>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Unregisters a previously registered <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" />.</para>
            </summary>
            <param name="filterId">
            <para>The ID of a previously registered <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> returned from <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)" />.</para>
            </param>
            <param name="timeout">
            <para>The maximum time allowed for processing the request before <see cref="T:System.TimeoutException" /> is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <remarks>
            It's not necessary to unregister individual filters if the client itself will no longer be used since all <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription" /> objects registered by the <see cref="T:System.Fabric.FabricClient" /> will be automatically unregistered when client is disposed.
            </remarks>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricClient.TestManagementClient">
            <summary>
            <para>Provides methods for issuing and controlling test commands.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>.
            PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Note:  Once this API has been called, it cannot be reversed. Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API.</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures.
            FabricErrorCode.PartitionNotFound - If the specified partition selected does not exist.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            <para>
            Note:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            <para>
            Note:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            <para>
            Note:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)">
            <summary>Induces quorum loss for a given stateful service partition. </summary>
            <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
            <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
            <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Induces quorum loss for a given stateful service partition. </summary>
            <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
            <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
            <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)">
            <summary>Induces quorum loss for a given stateful service partition. </summary>
            <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
            <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
            <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>Induces quorum loss for a given stateful service partition. </summary>
             <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
             <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
             <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            
             <remarks>
             <para>
             FullQuorumLoss - All replicas for the target partition will be downed.
             PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
             </para>
             <para>
             quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
             </para>
             <para>
             This API should only be called with a stateful service as the target.
             </para>
             <para>
             Calling this API with a system service as the target is not advised.
             </para>
             <para>
             The FaultAnalysisService must be enabled to use this API.
             </para>
             </remarks>
             <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
             <param name="operationTimeout">Overall timeout for the entire operation.</param>
             <param name="cancellationToken">The cancellation token for the operation.</param>
             <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
             <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
             <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
             <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)">
            <summary>Induces quorum loss for a given stateful service partition. </summary>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
            <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
            <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Induces quorum loss for a given stateful service partition. </summary>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
            <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
            <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)">
            <summary>Induces quorum loss for a given stateful service partition. </summary>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
            <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
            <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Induces quorum loss for a given stateful service partition. </summary>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
            <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Calling this API with a system service as the target is not advised.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.OperationCanceledException" >Async operation is canceled.</exception>
            <exception cref= "T:System.InvalidOperationException" > Partition specified is not a part of a stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the
            <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API may be called on both stateful and stateless services.
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.ArgumentException"  >The input was invalid.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API may be called on both stateful and stateless services.
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.ArgumentException"  >The input was invalid.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API may be called on both stateful and stateless services.
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.ArgumentException"  >The input was invalid.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API may be called on both stateful and stateless services.
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.ArgumentException"  >The input was invalid.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
            <para>
            This API should only be called with a stateful service as the target.
            </para>
            <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.InvalidOperationException" >If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
            </remarks>
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
            <param name="timeout">Timeout.</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
            </remarks>
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
            </remarks>
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
            <param name="timeout">Timeout.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
            </remarks>
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
            </remarks>
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
            <param name="timeout">Timeout.</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
            </remarks>
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
            </remarks>
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
            <param name="timeout">Timeout.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
            </remarks>
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
            </para>
            </remarks>
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
            <param name="timeout">Timeout.</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
            </para>
            </remarks>
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
            </para>
            </remarks>
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
            <param name="timeout">Timeout.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>
            <para>The FaultAnalysisService must be enabled to use this API.</para>
            <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.
            </para>
            </remarks>
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="operationTimeout">A timeout for the API call.</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="stateFilter">This parameter can be used to filter by TestCommandState</param>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="typeFilter">This parameter can be used to filter by TestCommandType</param>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="stateFilter">This parameter can be used to filter by TestCommandState</param>
            <param name="typeFilter">This parameter can be used to filter by TestCommandType</param>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean)">
             <summary>
             Cancels a test command.
             </summary>
             <param name="operationId">Indicates the operationId of the test command to cancel.</param>
             <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
             <returns>A Task.</returns>
             <remarks>
             <para>
             If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
             may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
             been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
             Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
             test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.
             It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
             </para>
            
             <para>
             Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
             </para>
             <para>
             The FaultAnalysisService must be enabled to use this API.
             </para>
             </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan)">
             <summary>
             Cancels a test command.
             </summary>
             <param name="operationId">Indicates the operationId of the test command to cancel.</param>
             <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
             <param name="timeout">The timeout to use for the API call.</param>
             <returns>A Task.</returns>
             <remarks>
             <para>
             If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
             may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
             been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
             Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
             test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.
             It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
            
             </para>
            
             <para>
             Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
             </para>
             <para>
             The FaultAnalysisService must be enabled to use this API.
             </para>
             </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Cancels a test command.
             </summary>
             <param name="operationId">Indicates the operationId of the test command to cancel.</param>
             <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
             <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
             <returns>A Task.</returns>
             <remarks>
             <para>
             If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
             may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
             been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
             Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
             test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.
             It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
            
             </para>
            
             <para>
             Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
             </para>
             <para>
             The FaultAnalysisService must be enabled to use this API.
             </para>
             </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
             Cancels a test command.
             </summary>
             <param name="operationId">Indicates the operationId of the test command to cancel.</param>
             <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
             <param name="timeout">The timeout to use for the API call.</param>
             <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
             <returns>A Task.</returns>
             <remarks>
             <para>
             If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
             may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
             been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
             Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
             test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.
             It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
            
             </para>
            
             <para>
             Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
             </para>
             <para>
             The FaultAnalysisService must be enabled to use this API.
             </para>
             </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync(System.Fabric.Description.NodeTransitionDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in an object of type NodeStartDescription into
            the description parameter.  To stop a node, pass in an object of type NodeStopDescription.  After this API returns, call GetNodeTransitionProgressAsync()
            to get progress on the operation.
            </summary>
            <param name="description">An object which describes what type of node transition to perform.  The transition can be to start or stop a node.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellationToken</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A task</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a command started using StartNodeTransitionAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was started using StartNodeTransitionAsync().</param>
            <param name="timeout">Timeout.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes</param>
            <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync">
            <summary>
            Cleans up all the test state in the cluster.
            </summary>
            <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations; like StopNode, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is canceled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted.
            </remarks>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Cleans up all the test state in the cluster.
            </summary>
            <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is canceled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted .
            </remarks>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricValidationException" >If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricValidationException" >If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricValidationException" >If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricValidationException" >If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricValidationException" >If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricValidationException" >If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets a description of the state of Chaos.
            </summary>
            <remarks>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="operationTimeout"> The overall timeout for the operation.</param>
            <param name="cancellationToken"> Cancellation token.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <returns>A description of the state of Chaos.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will start Chaos with the supplied parameter values.
            </summary>
            <remarks>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="chaosParameters"> Contains various parameters for controlling Chaos; e.g., time to run, maximum number of concurrent faults, etc.</param>
            <param name="cancellationToken"> Cancellation token.</param>
            <param name="operationTimeout"> The overall timeout for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricChaosAlreadyRunningException" >This exception is thrown when StartChaos API is invoked while Chaos is already running in the cluster.</exception>
            <returns>A description of the state of Chaos.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters)">
            <summary>
            This API will start Chaos with the supplied parameter values.
            </summary>
            <param name="chaosParameters"> <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters"/> contains various parameters for controlling Chaos; e.g., time to run, maximum number of concurrent fautls, etc. </param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricChaosAlreadyRunningException" >This exception is thrown when StartChaos API is invoked while Chaos is already running in the cluster.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StopChaosAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will stop Chaos.
            </summary>
            <remarks>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="operationTimeout"> The overall timeout for the operation.</param>
            <param name="cancellationToken"> Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StopChaosAsync">
            <summary>
            This API will stop Chaos.
            </summary>
            <remarks>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosEventsAsync(System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Retrieves a history of Chaos events. The events to be returned can be filtered based on time of occurrence. When no filter is defined, all events will be returned.
            </summary>
            <param name="filter">Filter for the lsit of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent"/>
            to be included in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegment"/>.</param>
            <param name="maxResults">Maximum number of ChaosEvents in the history to be returned.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
            <returns>A segment of the history of Chaos events.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosEventsAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Retrieves a segment of the history of Chaos events.
            </summary>
            <param name="continuationToken">Continuation token for the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent"/>s in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEventsSegment"/>.</param>
            <param name="maxResults">Maximum number of ChaosEvents in the history to be returned.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes.</param>
            <exception cref= "T:System.Fabric.FabricException" >These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
            <returns>A segment of the history of Chaos events.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosScheduleAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the description of the Chaos schedule.
            </summary>
            <remarks>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="cancellationToken"> Cancellation token.</param>
            <param name="operationTimeout"> The overall timeout for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <returns>A description of the Chaos schedule.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.SetChaosScheduleAsync(System.Fabric.Chaos.DataStructures.ChaosScheduleDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will set a description of the Chaos Schedule.
            </summary>
            <remarks>
            <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
            </remarks>
            <param name="schedule"> Chaos Schedule description to be set.</param>
            <param name="cancellationToken"> Cancellation token.</param>
            <param name="operationTimeout"> The overall timeout for the operation.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <returns>A task.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter)">
            <summary>
            Retrieves the report of Chaos runs.
            </summary>
            <param name="filter">Filter for the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent"/>s to be included in the report.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
            <returns>Report of Chaos runs.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Retrieves the report of Chaos runs.
            </summary>
            <param name="filter">Filter for the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent"/>s
            to be included in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport"/>.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
            <returns>Report of Chaos runs.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String)">
            <summary>
            Retrieves the report of Chaos runs.
            </summary>
            <param name="continuationToken">Continuation token for the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent"/>s in the
            <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport"/>.</param>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
            <returns>Report of Chaos runs.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Retrieves the report of Chaos runs.
            </summary>
            <param name="continuationToken">Continuation token for the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent"/>s in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport"/>.</param>
            <exception cref= "T:System.Fabric.FabricException" >These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">This token can be signalled to abort this operation before it finishes.</param>
            <returns>Report of Chaos runs.</returns>
        </member>
        <member name="T:System.Fabric.FabricClient.FaultManagementClient">
            <summary>
            <para>Provides functionality to introduce faults in a Service Fabric cluster.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance"><para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active instance ID.
            If the instances do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
            </param>
            <param name="completionMode">If set to <see cref="F:System.Fabric.CompletionMode.Verify"/>, the system will check that the node restarted,
            and the API will not return until it has and NodeStatus is Up.
            If set to <see cref="F:System.Fabric.CompletionMode.DoNotVerify"/>, the API returns once the node restart has been initiated.</param>
            <param name="token">The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  If the ErrorCode is NodeNotFound, nodeName is invalid.
            If the ErrorCode is InstanceIdMismatch, the <paramref name="nodeInstance"/> provided does not match the currently running instance.</exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance"><para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active node ID.
            If the IDs do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
            </param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is NodeNotFound, nodeName or nodeInstance is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance"><para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active node ID.
            If the IDs do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
            </param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is NodeNotFound, nodeName is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance"><para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active node ID.
            If the IDs do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
            </param>
            <param name="createFabricDump"> If set to true, the system will create the process dump for Fabric.exe on this node.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is NodeNotFound, nodeName is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.
            The node where the replica is deployed will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="createFabricDump"> If set to true, the system will create the process dump for Fabric.exe on this node.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.
            If the createFabricDump parameter is set, on restart the process is crashed and
            the crash dump is placed in the Crash Dumps folder which the DCA can be configured to upload.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped. If this is not specified, or is set to 0, this is ignored. If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, 'ClusterConnectionPort" also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, 'ipAddressOrFQDN' also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellationToken</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
            <returns>A task with information representing the target node</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belong.s</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found.</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.n</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout
            to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted</param>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted</param>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined</param>
            <param name="servicePackageActivationId">
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package which contains the code package.
            You can get the ServicePackageActivationId of a deployed service package by using
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query.
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service was
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.String,System.Int64,System.Fabric.CompletionMode)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="servicePackageActivationId">
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package which contains the code package.
            You can get the ServicePackageActivationId of a deployed service package by using
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query.
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service was
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="servicePackageActivationId">
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package which contains the code package.
            You can get the ServicePackageActivationId of a deployed service package by using
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query.
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service was
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref= "T:System.InvalidOperationException" >The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM vie.w</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
            <param name="forceRemove">Will forcefully remove the replica.</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be removed if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in
            <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in
            <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in
            <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="forceRemove">Will forcefully remove the replica.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeoutSec">The overall timeout in seconds for the operation, including the timeout to wait for replica to be removed if
            <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in
            <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in
            <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be restarted if
            <see cref="T:System.Fabric.CompletionMode"/> is Verify.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in
            <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeoutSec">The overall timeout in seconds for the operation, including the timeout to wait for replica to be restarted if
            <see cref="T:System.Fabric.CompletionMode"/> is Verify.</param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.TimeoutException" >Action took more than its allocated time.</exception>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
            API uses the primary replica of the selected partition to move to new node location.
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <param name="token">The cancellation token</param>
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <param name="token">The cancellation token</param>
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by current instance node. This API overload randomly selects current instance
            node for random instance of the selected partition and new instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.Fabric.PartitionSelector)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by current instance node. This API overload randomly selects current instance
            node for random instance of the selected partition and new instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition. </param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current instance
            node for random instance of the selected partition and new instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current instance
            node for random instance of the selected partition and new instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition. </param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            instance node for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e time.
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.
            </param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e time.
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="newNodeName">node name where selected instance to be moved</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e time.
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="newNodeName">node name where selected instance to be moved</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="newNodeName">node name where selected instance to be moved</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="newNodeName">node name where selected instance to be moved</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance specified by currentNodeName.
            This selected instance will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance specified by currentNodeName.
            This selected instance will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected instance for specified partition selector.
            This API overload randomly selects new instance node location for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected instance for specified partition selector.
            This API overload randomly selects new instance node location for instance movement
            This selected instance will be moved to new node location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by currentNodeName location. This selected instance will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="newNodeName">node name where selected instance to be moved</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveInstanceAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected instance from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected instance inside partition selector structure
            specified by currentNodeName location. This selected instance will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause availability loss by itself unless additional faults or failures happen at the same time.e t
            </remarks>
            <param name="currentNodeName">node name where selected instance for move is currently present</param>
            <param name="newNodeName">node name where selected instance to be moved</param>
            <param name="partitionSelector">Move Instance will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateful service.
            - If no active instance exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyInstance - If active instance for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the instance would prohibit the move
            </exception>
            <returns>A task with move instance result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.ReportCompletionAsync(System.String,System.Guid,System.Int64,System.Threading.CancellationToken)">
            <summary>
            This API will mark the replica completed.
            </summary>
            <param name="nodeName">Node name where replica needs to be completed </param>
            <param name="partitionId">Partition Id where the replica needs to be completed </param>
            <param name="replicaId">Replica Id that needs to be completed </param>
            <param name="token">Cancellation token</param>
            <exception cref= "T:System.ArgumentNullException" >Any of the required arguments are null.</exception>
            <exception cref= "T:System.Fabric.FabricException" >These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>ReportCompletionResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="T:System.Fabric.FabricClient.SecretStoreClient">
            <summary>
            <para>Allows creating Service Fabric Secret Store client
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.SecretStoreClient.GetSecretsAsync(System.Fabric.SecretStore.SecretReference[],System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get secrets from Central Secret store.
            </summary>
            <param name="secretReferences">List of secrets to retrieve.</param>
            <param name="includeValue">True to include the secret value in response</param>
            <param name="timeout">Max time to wait for the async operation to complete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
            <returns>The task representing the asynchronous action.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.SecretStoreClient.CreateSecretsAsync(System.Fabric.SecretStore.SecretDescription[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create secret resource in Central Secret store.
            </summary>
            <param name="secrets">List of secrets to create.</param>
            <param name="timeout">Max time to wait for the async operation to complete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
            <returns>The task representing the asynchronous action.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.SecretStoreClient.SetSecretsAsync(System.Fabric.SecretStore.Secret[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set secrets in Central Secret store.
            </summary>
            <param name="secrets">List of secrets to set.</param>
            <param name="timeout">Max time wait for the async operation to complete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
            <returns>The task representing the asynchronous action.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.SecretStoreClient.RemoveSecretsAsync(System.Fabric.SecretStore.SecretReference[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove secrets from Central Secret store.
            </summary>
            <param name="secretReferences">List of secrets to set.</param>
            <param name="timeout">Max time wait for the async operation to complete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
            <returns>The task representing the asynchronous action.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.SecretStoreClient.GetSecretVersionsAsync(System.Fabric.SecretStore.SecretReference[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get secret version from Central Secret store.
            </summary>
            <param name="secretReferences">List of secrets to set.</param>
            <param name="timeout">Max time wait for the async operation to complete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
            <returns>The task representing the asynchronous action.</returns>
        </member>
        <member name="T:System.Fabric.FabricClientSettings">
            <summary>
            <para>Represents the configuration settings for the <see cref="T:System.Fabric.FabricClient" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClientSettings.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClientSettings" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.ClientFriendlyName">
            <summary>
            <para>Gets or sets the client friendly name that will appear in Service Fabric traces for debugging.</para>
            </summary>
            <value>
            <para>The client friendly name that will appear in Service Fabric traces for debugging.</para>
            </value>
            <remarks>
            <para>The default value is null and the client friendly name will automatically be generated as a GUID internally.</para>
            <para>If multiple clients can be created from the same process or on the same node, it is recommended to append a unique identifier to the name.
            For example, MyProcessIdentifier-{guid}.
            This ensures that traces can track different actions to the clients that generated them.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit">
            <summary>
            <para>Gets the maximum number of cached location entries on the client.</para>
            </summary>
            <value>
            <para>The maximum number of cached location entries on the client.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit" /> property is 1000.</para>
            <para>The <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit" /> property is not updatable. Setting this property will throw a <see cref="T:System.ArgumentException" /> exception.</para>
            <para>When the cache limit is reached the oldest entries are discarded first. The default value is 100.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount">
            <summary>
            <para>Gets or sets the bucket count used by the client’s service resolution cache.</para>
            </summary>
            <value>
            <para>The bucket count used by the client’s service resolution cache.</para>
            </value>
            <remarks>
            <para>The default value is 1024.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval">
            <summary>
            <para>Gets or sets the timeout on service change notification requests from the client to the gateway for all registered callbacks.</para>
            </summary>
            <value>
            <para>The timeout on service change notification requests from the client to the gateway for all registered callbacks.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval" /> property is 120 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout">
            <summary>
            <para>Gets or sets the timeout after which, if the current gateway address does not respond with a valid connection, another different address is randomly selected from the gateway addresses collection.</para>
            </summary>
            <value>
            <para>The timeout after the current gateway address does not respond with a valid connection.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout" /> property is 2 seconds.</para>
            <para>The <see cref="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout" /> property must be less than the value of the <see cref="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval" /> property.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.KeepAliveInterval">
            <summary>
            <para>Gets the interval at which the <see cref="T:System.Fabric.FabricClient" /> will ping the connected endpoint.</para>
            </summary>
            <value>
            <para>The interval at which the <see cref="T:System.Fabric.FabricClient" /> will ping the connected endpoint.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.KeepAliveInterval" /> property is 0 seconds.</para>
            <para>This property can't be updated after the <see cref="T:System.Fabric.FabricClient" /> is opened.
            Setting this property will throw a <see cref="T:System.ArgumentException" /> exception.</para>
            <para>
                <see cref="T:System.Fabric.FabricClient" /> will continue pinging as long as it has pending operations.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.ConnectionIdleTimeout">
            <summary>
            This parameter has been deprecated. This will be removed in our next release.
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.HealthOperationTimeout">
            <summary>
            <para>Gets or sets the timeout on health operation requests from the client to the gateway.</para>
            </summary>
            <value>
            <para>The timeout on health operation requests from the client to the gateway. This setting applies only to report health operations, and is not
            used by the query operations.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.HealthOperationTimeout" /> property is 120 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.HealthReportSendInterval">
            <summary>
            <para>Gets or sets the interval at which health reports are sent to Health Manager.</para>
            </summary>
            <value>
            <para>The interval at which health reports are sent to Health Manager.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.HealthReportSendInterval" /> property is 30 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.HealthReportRetrySendInterval">
            <summary>
            <para>Gets or sets the retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</para>
            </summary>
            <value>
            <para>The retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.HealthReportRetrySendInterval" /> property is 30 seconds. The minimum value is 1 second.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.NotificationGatewayConnectionTimeout">
            <summary>
            <para>Gets or sets the timeout for running a re-connection protocol if the client has registered for service notifications. The default value is 30 seconds. </para>
            </summary>
            <value>
            <para>The timeout for running a re-connection protocol if the client has registered for service notifications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.NotificationCacheUpdateTimeout">
            <summary>
            <para>Gets or sets the timeout for updating the local cache in response to service notifications. The default value is 30 seconds.</para>
            </summary>
            <value>
            <para>The timeout for updating the local cache in response to service notifications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.AuthTokenBufferSize">
            <summary>
            Gets or sets a value indicating the buffer size to use when retrieving an authentication token from Azure Active Directory.
            </summary>
            <value>
            Returns the buffer size in bytes.
            </value>
        </member>
        <member name="T:System.Fabric.FabricErrorCode">
            <summary>
            <para>Defines error codes that can be associated with a <see cref="T:System.Fabric.FabricException" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.Unknown">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that there was an unknown error.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPartitionKey">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the partition key is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UserRoleClientCertificateNotConfigured">
            <summary>
            <para>
            Indicates that certificate for user role (<see cref="F:System.Fabric.FabricClientRole.User" />)
            <see cref="T:System.Fabric.FabricClient" /> is not setup.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NameAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the Service Fabric Name already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceGroupAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service group already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application type is currently being provisioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application type already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NameNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the Service Fabric Name was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PropertyNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the property was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PropertyValueEmpty">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the value of the property was empty.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceGroupNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service group was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application type was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application type is in use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application does not exist.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service type was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceManifestNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the service manifest was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NameNotEmpty">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the Service Fabric Name is not empty: 
            there are entities such as child Names, Service or Properties associated with it.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeNotFound">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the node was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeTypeNotFound">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the node type or node type information was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeIsUp">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the node is up when it is expected to be down.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NotPrimary">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the replica is not the primary.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NoWriteQuorum">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service partition does not have write quorum.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReconfigurationPending">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reconfiguration is currently in pending state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReplicationQueueFull">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the replication queue is full.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReplicationOperationTooLarge">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the replication operation is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidAtomicGroup">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the atomic group is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceOffline">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service is offline.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PartitionNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the partition was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceMetadataMismatch">
            <summary>
            <para>Two <see cref="T:System.Fabric.ResolvedServicePartition" /> objects cannot be compared using <see cref="M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)" /> 
            because they describe different replica sets.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceAffinityChainNotSupported">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the service affinity chain is not supported.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.WriteConflict">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates there was a write conflict.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application upgrade validation failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeMismatch">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that there is a mismatch in the service type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service template was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeAlreadyRegistered">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service type was already registered.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeNotRegistered">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service type was not registered.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the application is currently being upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationUpdateInProgress">
            <summary>
            A FabricErrorCode that indicates the application is currently being updated.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UpgradeDomainAlreadyCompleted">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the upgrade domain was already completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricVersionNotFound">
            <summary>
            <para>The specified code or Cluster Manifest version cannot be unprovisioned or used as the target of an upgrade because it has not been provisioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricVersionInUse">
            <summary>
            <para>The specified code or Cluster Manifest version cannot be unprovisioned because it is either being used by the cluster or is the target of a cluster upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricVersionAlreadyExists">
            <summary>
            <para>The specified code or Cluster Manifest version has already been provisioned in the system.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricAlreadyInTargetVersion">
            <summary>
            <para>The Service Fabric cluster is already in the target code or Cluster Manifest version specified by the upgrade request.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricNotUpgrading">
            <summary>
            <para>The Service Fabric cluster is not currently being upgrade and the request is only valid during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricUpgradeInProgress">
            <summary>
            <para>The Service Fabric Cluster is currently begin upgraded and the request is not valid during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricUpgradeValidationError">
            <summary>
            <para>An error in the Service Fabric cluster upgrade request was discovered during pre-upgrade validation of the upgrade description and Cluster Manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the <see cref="T:System.Fabric.FabricClient.HealthClient" /> has reached the maximum number of health reports that can accept for processing. More reports will be accepted when progress is done with the currently accepted reports. By default, the <see cref="T:System.Fabric.FabricClient.HealthClient" /> can accept 10000 different reports.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the report is stale. Returned when <see cref="T:System.Fabric.FabricClient.HealthClient" /> 
            has a <see cref="T:System.Fabric.Health.HealthReport" /> for the same entity, <see cref="P:System.Fabric.Health.HealthInformation.SourceId" /> 
            and <see cref="P:System.Fabric.Health.HealthInformation.Property" /> with same or higher <see cref="P:System.Fabric.Health.HealthInformation.SequenceNumber" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the health entity is not found in the Health Store. Returned when Health Store has no reports from a Service Fabric system component on the entity or on one of the hierarchical parents. This can happen if the entity or one of its parents doesn�t exist in the Service Fabric cluster, or the reports didn�t yet arrive at the health store.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTooBusy">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates Service Fabric service is too busy to accept requests at this time. This is a transient error.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CommunicationError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates a communication error has occurred.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.GatewayNotReachable">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the gateway could not be reached. This is a transient error.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ObjectClosed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the object was closed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PropertyCheckFailed">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the a Check <see cref="T:System.Fabric.PropertyBatchOperation" /> has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EnumerationCompleted">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the enumeration completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConfigurationSectionNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the configuration section was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConfigurationParameterNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the configuration parameter was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidConfiguration">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the configuration was invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the image builder validation error as occurred.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderReservedDirectoryError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the path passed by the user starts with a reserved directory.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the replica does not exist.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ProcessDeactivated">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the process got deactivated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ProcessAborted">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the process aborted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidAddress">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the address was invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidNameUri">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the URI is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ValueTooLarge">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the property value is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DirectoryNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the directory was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PathTooLong">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the path is too long.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FileNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the file was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NotReady">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the code is not ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.OperationTimedOut">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the operation timed out.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.OperationNotComplete">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the operation did not completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CodePackageNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the code package was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConfigurationPackageNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that configuration package was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DataPackageNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the data package was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EndpointResourceNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the endpoint resource was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidCredentialType">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the credential type is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509FindType">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the X509FindType is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the X509 store location is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509StoreName">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the X509 store name is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the X509 certificate thumbprint string is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the protection level is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509Store">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the X509 certificate store cannot be opened.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidSubjectName">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the subject name is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the format of common name list string is invalid. It should be a comma separated list</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidCredentials">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the credentials are invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DecryptionFailed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the decryption failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EncryptionFailed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the encryption has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the image store object was corrupted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderUnexpectedError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the ImageBuilder hit an unexpected error.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderTimeoutError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the ImageBuilder was not able to perform the operation in the specified timeout.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderAccessDeniedError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the ImageBuilder hit an AccessDeniedException when using the ImageStore.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderInvalidMsiFile">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the MSI file being provisioned is not valid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageStoreIOException">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates there was an ImageStoreIOEception.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageStoreAcquireFileLockFailed">
            <summary>
            <para>
            A FabricErrorCode that indicates that the operation failed to acquire a lock.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidServiceType">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the ServiceType was not defined in the service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading">
            <summary>
            <para>The application is not currently being upgraded and the request is only valid during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationAlreadyInTargetVersion">
            <summary>
            <para>The application is already in the target version specified by an application upgrade request.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.KeyTooLarge">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the key is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.KeyNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the key cannot be found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.SequenceNumberCheckFailed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the sequence number check failed. This usually happens when there is a conflicting operation executed on the same object which modifies the sequence number.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TransactionNotActive">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the transaction is not active because it has already been committed or rolled back.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TransactionTooLarge">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the transaction is too large, which typically results when the transaction either contains too many operations or the size of the data being written is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MultithreadedTransactionsNotAllowed">
            <summary>
            <para>
            FabricErrorCode that indicates that one transaction can't be used by multiple threads simultaneously.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TransactionAborted">
            <summary>
            FabricErrorCode that indicates that the transaction was aborted.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionTransportStartupFailure">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session transport startup has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionAlreadyExists">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionCannotConnect">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session cannot connect.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerExists">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session manager already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionRejected">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session was rejected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionNotFound">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session cannot be found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionQueueEmpty">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session queue is empty.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionQuotaExceeded">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session quota exceeded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionServiceFaulted">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session service was faulted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerAlreadyListening">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session manager is already listening.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session manager was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerNotListening">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session manager is not listening.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionInvalidTargetPartition">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the reliable session has invalid target partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.RepairTaskAlreadyExists">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the repair task already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.RepairTaskNotFound">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the repair task was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InstanceIdMismatch">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the instance identifier doesn�t match.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeHasNotStoppedYet">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the node has not stopped yet.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InsufficientClusterCapacity">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the cluster capacity is insufficient.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintKeyUndefined">
            <summary>
            <para>
            A FabricErrorCode that indicates the specified constraint key is undefined.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPackageSharingPolicy">
            <summary>
            <para>
            A FabricErrorCode that indicates the package sharing policy is incorrect.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PreDeploymentNotAllowed">
            <summary>
            <para>
            Predeployed of application package on Node not allowed. Predeployment feature requires ImageCache to be enabled on node.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidBackupSetting">
            <summary>
            <para>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaOperation">
            <summary>
            <para>
            Cannot restart a replica of a volatile stateful service or an instance of a stateless service
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation">
            <summary>
            <para>
            The replica is currently transitioning (closing or opening) and the operation cannot be performed at this time
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MissingFullBackup">
            <summary>
            <para>
            Incremental backups can only be done after an initial full backup.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupInProgress">
            <summary>
            <para>
            A backup is currently in progress.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PLBNotReady">
            <summary>
            <para>
            The Cluster Resource Balancer is not yet ready to handle the operation.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DuplicateServiceNotificationFilterName">
            <summary>
            <para>Indicates that a service notification filter has already been registered at the specified name by the current Fabric Client.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPartitionOperation">
            <summary>
            A FabricErrorCode that indicates the partition operation is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.AlreadyPrimaryReplica">
            <summary>
            The replica already has Primary role.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.AlreadySecondaryReplica">
            <summary>
            The replica already has Secondary role.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.AlreadyInstance">
            <summary>
            The stateless instance already exists
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.AsyncOperationNotComplete">
            <summary>
            Async operation is not completed.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupDirectoryNotEmpty">
            <summary>
            <para>
            The backup directory is not empty.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ForceNotSupportedForReplicaControlOperation">
            <summary>
            <para>
            The replica belongs to a self-activated service. The ForceRemove option is not supported for such replicas
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConnectionDenied">
            <summary>
            <para>
            A FabricErrorCode that indicates the connection was denied by the remote side.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServerAuthenticationFailed">
            <summary>
            <para>
            A FabricErrorCode that indicates the authentication failed.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricCannotConnect">
            <summary>
            <para>
            A FabricErrorCode that indicates there was a connection failure.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricConnectionClosedByRemoteEnd">
            <summary>
            A FabricErrorCode that indicates the connection was closed by the remote end.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricMessageTooLarge">
            <summary>
            <para>
            A FabricErrorCode that indicates the message is too large.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintNotSatisfied">
            <summary>
            <para>
            The service's and cluster's configuration settings would result in a constraint-violating state if the operation were executed.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricEndpointNotFound">
            <summary>
            <para>
            A FabricErrorCode that indicates the specified endpoint was not found.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DuplicateWaitObject">
            <summary>
            A FabricErrorCode that indicates that an object appears more than once in an array of synchronization objects.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EntryPointNotFound">
            <summary>
            A FabricErrorCode that indicates that the entry point was not found. This happens when type loading failures occur.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DeleteBackupFileFailed">
            <summary>
            Deletion of backup files/directory failed. Currently this can happen
            in a scenario where backup is used mainly to truncate logs.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.OperationCanceled">
            <summary>
            Operation was canceled by the system and should be retried by the client.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidTestCommandState">
            <summary>
            A FabricErrorCode that indicates that this API call is not valid for the current state of the test command.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TestCommandOperationIdAlreadyExists">
            <summary>
            A FabricErrorCode that indicates that this test command operation id (Guid) is already being used.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ChaosAlreadyRunning">
            <summary>
            A FabricErrorCode that indicates that an instance of Chaos is already running.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CMOperationFailed">
            <summary>
            Creation or deletion terminated due to persistent failures after bounded retry.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricDataRootNotFound">
            <summary>
            Fabric Data Root is not defined on the target machine.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidRestoreData">
            <summary>
            Indicates that restore metadata present in supplied restore directory in invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DuplicateBackups">
            <summary>
            Indicates that backup-chain in specified restore directory contains duplicate backups.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidBackupChain">
            <summary>
            Indicates that backup-chain in specified restore directory has one or more missing backups.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.StopInProgress">
            <summary>
            An operation is already in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.AlreadyStopped">
            <summary>
            The node is already in a stopped state
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeIsDown">
            <summary>
            The node is down (not stopped).
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeTransitionInProgress">
            <summary>
            Node transition in progress
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidInstanceId">
            <summary>
            The provided instance id is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidDuration">
            <summary>
            The provided duration is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidBackup">
            <summary>
            Indicates that backup provided for restore is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.RestoreSafeCheckFailed">
            <summary>
            Indicates that backup provided for restore has older data than present in service.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConfigUpgradeFailed">
            <summary>
            Indicates that the config upgrade fails.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UploadSessionRangeNotSatisfiable">
            <summary>
            Indicates that the upload session range will overlap or are out of range.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UploadSessionIdConflict">
            <summary>
            Indicates that the upload session ID is existed for a different image store relative path.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPartitionSelector">
            <summary>
            Indicates that the partition selector is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaSelector">
            <summary>
            Indicates that the replica selector is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DnsServiceNotFound">
            <summary>
            Indicates that DnsService is not enabled on the cluster.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidDnsName">
            <summary>
            Indicates that service DNS name is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DnsNameInUse">
            <summary>
            Indicates that service DNS name is in use by another service.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ComposeDeploymentAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the compose deployment already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the compose deployment is not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidForStatefulServices">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the operation is only valid for stateless services.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidForStatelessServices">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the operation is only valid for stateful services.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.OnlyValidForStatefulPersistentServices">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the operation is only valid for stateful persistent services.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidUploadSessionId">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the upload session ID is invalid. Plesea use GUID as upload session ID.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupNotEnabled">
            <summary>
            Indicates that the backup protection is not enabled
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupEnabled">
            <summary>
            Indicates that there is a backup protection enablement
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupPolicyDoesNotExist">
            <summary>
            Indicates the Backup Policy does not Exist
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupPolicyAlreayExists">
            <summary>
            Indicates the Backup Policy is already Exists
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.RestoreAlreadyInProgress">
            <summary>
            Indicates that a partition is already has a restore in progress
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.RestoreSourceTargetPartitionMismatch">
            <summary>
            Indicates that the source from where restore is requested has a properties mismatch with target partition
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FaultAnalysisServiceNotEnabled">
            <summary>
            Indicates the Restore cannot be triggered as Fault Analysis Service is not running
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ContainerNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the container is not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ObjectDisposed">
            <summary>
            Indicates that the operation is performed on a disposed object.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NotReadable">
            <summary>
            Indicates the partition is not readable.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidOperation">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that operation is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.SingleInstanceApplicationAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the single instance application already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.SingleInstanceApplicationNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the single instance application is not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.VolumeAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the volume already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.VolumeNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the volume is not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidServiceScalingPolicy">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the scaling policy specified for the service is invalid. 
            Verify that every <see cref="T:System.Fabric.Description.ScalingTriggerDescription" /> and <see cref="T:System.Fabric.Description.ScalingMechanismDescription" /> is valid in the context of the kind and metrics of the service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DatabaseMigrationInProgress">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the service is undergoing database migration and writes are currently not available.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CentralSecretServiceGenericError">
            <summary>
            Indicates generic error happens in central secret service
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotUpgrading">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates the compose deployment is not upgrading. Call <see cref="M:System.Fabric.FabricClient.ComposeDeploymentClient.GetComposeDeploymentUpgradeProgressAsync(System.String)" /> to get more information.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.SecretInvalid">
            <summary>
            A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the secret is invalid
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.SecretVersionAlreadyExists">
            <summary>
            A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the secret version already exists
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.SingleInstanceApplicationUpgradeInProgress">
            <summary>
            A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the single instance application's upgrade is in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.OperationNotSupported">
            <summary>
            A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the operation is not supported.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NetworkNotFound">
            <summary>
            A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the network is not found.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NetworkInUse">
            <summary>
            A <see cref="T:System.Fabric.FabricErrorCode" /> that indicates that the network is currently in use.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EndpointNotReferenced">
            <summary>
            A <see cref="T:System.Fabric.FabricErrorCode" />
            </summary>
        </member>
        <member name="T:System.Fabric.FabricException">
            <summary>
            <para>The base Service Fabric exception class.</para>
            </summary>
            <remarks>
            <para>Defines an error code property that is used to indicate the precise circumstance that caused the exception, in addition to properties defined by the base <see cref="T:System.Exception" /> class.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class with specified error message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Int32)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class with specified message and Hresult.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="hresult">The HResult that the exception is wrapping around</param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class with specified message, inner exception and HResult.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
            <param name="hresult">The HResult that the exception is wrapping around</param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class from a serialized object data, with a specified context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException" /> class from a serialized object data, with specified context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="P:System.Fabric.FabricException.ErrorCode">
            <summary>
            <para>Gets the error code parameter.</para>
            </summary>
            <value>
            <para>The error code associated with the <see cref="T:System.Fabric.FabricException" /> exception.</para>
            </value>
        </member>
        <member name="T:System.Fabric.FabricInvalidPartitionKeyException">
            <summary>
            <para>The exception that indicates failure due to the use of a service partition key that is not valid.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class with specified error message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class from a serialized object data, with a specified context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException" /> class from a serialized object data, with specified context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricElementAlreadyExistsException">
            <summary>
            <para>The exception that indicates failure due to the existence of a conflicting entity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class with specified error message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class from the serialized object data, with a specified context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementAlreadyExistsException" /> class with a specified error code, with specified context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricElementNotFoundException">
            <summary>
            <para>The exception that is thrown when a Service Fabric element is not available.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementNotFoundException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementNotFoundException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Runtime.Serialization.StreamingContext" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementNotFoundException" /> class with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Runtime.Serialization.StreamingContext" /> class with specified error message and inner exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementNotFoundException" /> class with specified message, inner exception and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementNotFoundException" /> class with specified info, context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricElementNotFoundException" /> class with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricNotPrimaryException">
            <summary>
            <para>The exception that is thrown when the callee is not a primary.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.FabricNotPrimaryException" /> indicates that the operation cannot be performed because the callee is currently not a primary.
            For example, this exception can be observed if a secondary replica attempted to replicate an operation via 
            <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)" />. A likely scenario is that the replica is no longer the primary.</para>
            <para>
            Handling <see cref="T:System.Fabric.FabricNotPrimaryException"/> for <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">Reliable Collections</see> :
                1. If the service sees <see cref="T:System.Fabric.FabricNotPrimaryException" /> in <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservicebase.runasync?viewFallbackFrom=servicefabricsvcs#Microsoft_ServiceFabric_Services_Runtime_StatefulServiceBase_RunAsync_System_Threading_CancellationToken_">RunAsync</see>, 
                    it should catch the exception, complete all tasks and return from <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservicebase.runasync?viewFallbackFrom=servicefabricsvcs#Microsoft_ServiceFabric_Services_Runtime_StatefulServiceBase_RunAsync_System_Threading_CancellationToken_">RunAsync</see>. 
                    The <see cref="T:System.Threading.CancellationToken"/> passed to <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservicebase.runasync?viewFallbackFrom=servicefabricsvcs#Microsoft_ServiceFabric_Services_Runtime_StatefulServiceBase_RunAsync_System_Threading_CancellationToken_">RunAsync</see> would be signalled. All background tasks should complete execution when this cancellation is signalled.
                2. If the service sees <see cref="T:System.Fabric.FabricNotPrimaryException" /> while processing a client request (e.g. via their communication listener), the service should throw the exception to the client to signal the client that it should re-resolve the service in order to locate the new Primary.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class with a specified message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class with specified info, context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException" /> class with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricTransientException">
            <summary>
            <para>The exception that indicates failure of an operation due to a transient environmental or runtime circumstance.</para>
            <para>Handling <see cref="T:System.Fabric.FabricTransientException"/> for <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">Reliable Collections</see> :
                The user is suggested to catch this exception, abort the transaction and retry all operations with a new Transaction
            </para>
            </summary>
            <remarks>
            <para>For example, an operation may fail because a quorum of replicas is temporarily not reachable. The <see cref="T:System.Fabric.FabricTransientException" /> corresponds to failed operations that can be tried again.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class with a specified message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class with specified info, context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricTransientException" /> class with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricObjectClosedException">
            <summary>
            <para>
            The exception that is thrown when the Service Fabric object is currently in a closed state due to one of the following conditions:
                1. The Service Fabric object is being deleted.
                2. The Service Fabric object is not reachable due to a failover.
            </para>
            </summary>
            <remarks>
            <para>For example, this exception can be observed when a service attempts to perform an operation on a Service Fabric or <see cref="T:System.Fabric.FabricReplicator" /> object while it is in the closed state. Another example is when an API is invoked on a <see cref="T:System.Fabric.FabricClient" /> object when it is in the closed state.</para>
            <para>
            Handling <see cref="T:System.Fabric.FabricObjectClosedException" /> for <see cref="T:System.Fabric.FabricClient"/> calls:
                If a FabricClient call sees <see cref="T:System.Fabric.FabricObjectClosedException" />, see <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions">FabricClient Exception Handling</see> for handling common FabricClient failures.
            </para>
            <para>
            Handling <see cref="T:System.Fabric.FabricObjectClosedException"/> for <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">Reliable Collections</see> :
                1. If the service sees <see cref="T:System.Fabric.FabricObjectClosedException" /> in <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservicebase.runasync?viewFallbackFrom=servicefabricsvcs#Microsoft_ServiceFabric_Services_Runtime_StatefulServiceBase_RunAsync_System_Threading_CancellationToken_">RunAsync</see>, 
                    it should catch the exception and return from <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservicebase.runasync?viewFallbackFrom=servicefabricsvcs#Microsoft_ServiceFabric_Services_Runtime_StatefulServiceBase_RunAsync_System_Threading_CancellationToken_">RunAsync</see>.
                    The <see cref="T:System.Threading.CancellationToken"/> passed to <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservicebase.runasync?viewFallbackFrom=servicefabricsvcs#Microsoft_ServiceFabric_Services_Runtime_StatefulServiceBase_RunAsync_System_Threading_CancellationToken_">RunAsync</see> would be signalled. All background tasks should complete execution when this cancellation is signalled.
                2. If the service sees <see cref="T:System.Fabric.FabricObjectClosedException" /> while processing a client request (e.g. via their communication listener), the service should throw the exception to the client to signal the client that it should re-resolve the service in order to locate the new Primary.
            
            [NOTE] If an <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestate?view=azure-dotnet">IReliableState</see> was removed via <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestatemanager.removeasync?view=azure-dotnet#Microsoft_ServiceFabric_Data_IReliableStateManager_RemoveAsync_Microsoft_ServiceFabric_Data_ITransaction_System_Uri_System_TimeSpan_">IReliableStateManager.RemoveAsync()</see>,
            any calls trying to access this <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestate?view=azure-dotnet">IReliableState</see> would see <see cref="T:System.Fabric.FabricObjectClosedException"/>. These calls needs to be synchronized with the <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestatemanager.removeasync?view=azure-dotnet#Microsoft_ServiceFabric_Data_IReliableStateManager_RemoveAsync_Microsoft_ServiceFabric_Data_ITransaction_System_Uri_System_TimeSpan_">IReliableStateManager.RemoveAsync()</see> call and should know that the <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestate?view=azure-dotnet">IReliableState</see> has been removed.
            Possible ways to handle this case are:
                1. Recreate the <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestate?view=azure-dotnet">IReliableState</see> if it was removed and retry the operation.
                2. Ignore the <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestate?view=azure-dotnet">IReliableState</see> and process other <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestate?view=azure-dotnet">IReliableState</see> in the service.
                3. Use locks to avoid the race. Hence if a remove call comes in, the user can stop processing the <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.data.ireliablestate?view=azure-dotnet">IReliableState</see> further.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class from a serialized object data, with a specified context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException" /> class from a serialized object data, with specified context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricConnectionDeniedException">
            <summary>
            <para>The exception that is thrown when a connection request is denied by Service Fabric cluster or server.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class with a specified error code.
            </para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class with specified error message and error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class from a serialized object data, with a specified context.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricConnectionDeniedException" /> class from a serialized object data, with specified context and error code.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricServerAuthenticationFailedException">
            <summary>
            <para>The exception that indicates a failed authentication of cluster or server identity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class with a specified error code.
            </para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class with specified error message and error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class from a serialized object data, with a specified context.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServerAuthenticationFailedException" /> class from a serialized object data, with specified context and error code.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricInvalidAddressException">
            <summary>
            <para>The exception that is thrown when an address is not recognized by Service Fabric.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException" /> class with a specified error code.
            </para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException" /> class with specified error message and error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAddressException"/> class from a serialized object data, with specified context and error code.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricInvalidAtomicGroupException">
            <summary>
            <para>The exception that is thrown when the Service Fabric atomic group is invalid.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> with a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> class with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> class from a serialized object data, with a specified context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidAtomicGroupException" /> class from a serialized object data, with specified context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricMissingFullBackupException">
            <summary>
            <para>
            The exception that is thrown when an attempt is made to create an incremental backup of the key-value store
            before an initial full backup is created.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMissingFullBackupException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.MissingFullBackup"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMissingFullBackupException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.MissingFullBackup"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMissingFullBackupException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMissingFullBackupException" /> class from a serialized object data, with a specified context.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricNotReadableException">
            <summary>
            <para>
            The exception that is thrown when a service partition or a replica cannot accept reads.
            </para>
            </summary>
            <remarks>
            <para>
            The exception can be seen in the following 2 scenarios :
                1. The partition does not have a read quorum.
                2. The service is trying to read from an <see href="https://msdn.microsoft.com/library/azure/dn707635.aspx">IdleSecondary replica</see>.
            </para>
            <para>
            Handling <see cref="T:System.Fabric.FabricNotReadableException"/> for <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">Reliable Collections</see> :
            If <see cref="T:System.Fabric.FabricNotReadableException" /> is seen by the service or a client call, the exception should be caught, current transaction should be disposed and all the operations should be retried with a new transaction object.
            Read status will eventually be granted or a non-retriable exception will be thrown. An optional backoff can be added before retrying.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotReadableException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotReadableException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.Unknown"/> and a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricNotReadableException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotReadableException" /> class from a serialized object data, with a specified context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricImageStoreException">
            <summary>
            <para>
            The exception that is thrown when perform ImageStore operations.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class with a specified error code.
            </para>
            </summary>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class with specified error message and error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class from a serialized object data, with a specified context.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricImageStoreException" /> class from a serialized object data, with specified context and error code.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricBackupInProgressException">
            <summary>
            <para>The exception that is thrown when an attempt is made to initiate a backup while a previously initiated backup is still in progress.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricBackupInProgressException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.BackupInProgress"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the FabricBackupInProgressException class with error code <see cref="F:System.Fabric.FabricErrorCode.BackupInProgress"/> and a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricBackupInProgressException" /> class from a serialized object data, with a specified context.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            <summary>
            <para>The exception that is thrown when a user-provided backup directory is not empty.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.BackupDirectoryNotEmpty"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.BackupDirectoryNotEmpty"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException" /> class from a serialized object data, with a specified context.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricReplicationOperationTooLargeException">
            <summary>
            <para>The exception that is thrown when the replication operation is larger than the configured limit.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.ReplicationOperationTooLarge"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.ReplicationOperationTooLarge"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException" /> class from a serialized object data, with a specified context.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricServiceNotFoundException">
            <summary>
            <para>The exception that is thrown when there is no service found by the specified name.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServiceNotFoundException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.ServiceNotFound"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServiceNotFoundException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.ServiceNotFound"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServiceNotFoundException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricCannotConnectException">
            <summary>
            <para>The exception that indicates that there is CannotConnect Error.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricCannotConnectException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.FabricCannotConnect"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricCannotConnectException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.FabricCannotConnect"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricCannotConnectException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricCannotConnectException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricMessageTooLargeException">
            <summary>
            <para>The exception that indicates the message is too large.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMessageTooLargeException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.FabricMessageTooLarge"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMessageTooLargeException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.FabricMessageTooLarge"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMessageTooLargeException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricEndpointNotFoundException">
            <summary>
            <para>The exception that is thrown when the specified endpoint is not found.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricEndpointNotFoundException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.FabricEndpointNotFound"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricEndpointNotFoundException" /> class with error code <see cref="F:System.Fabric.FabricErrorCode.FabricEndpointNotFound"/> and a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of <see cref="T:System.Fabric.FabricEndpointNotFoundException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricDeleteBackupFileFailedException">
            <summary>
            <para>The exception that is thrown when deletion of a file or a directory fails during backup.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.DeleteBackupFileFailed"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.DeleteBackupFileFailed"/> and a specified error message.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricInvalidTestCommandStateException">
            <summary>
            <para>The exception that is thrown when an operation is not valid for a test command in a particular state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.InvalidTestCommandState"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.InvalidTestCommandState"/> and a specified error message.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException">
            <summary>
            <para>The exception that is thrown when a test command already exists, i.e. when there is a duplicate operation identifier.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.TestCommandOperationIdAlreadyExists"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.TestCommandOperationIdAlreadyExists"/> and a specified error message.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricChaosAlreadyRunningException">
            <summary>
            <para>The exception that is thrown when there is an attempt to create a new instance of Service Fabric's built-in Chaos Test service, while the service is already running in the cluster.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricChaosAlreadyRunningException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosAlreadyRunningException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.ChaosAlreadyRunning"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricChaosAlreadyRunningException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosAlreadyRunningException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.ChaosAlreadyRunning"/> and a specified error message.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricChaosAlreadyRunningException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosAlreadyRunningException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricChaosAlreadyRunningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosAlreadyRunningException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricChaosEngineException">
            <summary>
            <para>The exception that is thrown when Service Fabric's built-in Chaos Test service has encountered something unexpected.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricChaosEngineException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosEngineException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.ChaosAlreadyRunning"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricChaosEngineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosEngineException"/> class with error code <see cref="F:System.Fabric.FabricErrorCode.ChaosAlreadyRunning"/> and a specified error message.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricChaosEngineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosEngineException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricChaosEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Fabric.FabricChaosEngineException"/> class from a serialized object data, with a specified context.
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricRestoreSafeCheckFailedException">
            <summary>
            The exception that is thrown when Backup is too old to be used for restore
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRestoreSafeCheckFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricRestoreSafeCheckFailedException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRestoreSafeCheckFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricRestoreSafeCheckFailedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricRestoreSafeCheckFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricRestoreSafeCheckFailedException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricRestoreSafeCheckFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricRestoreSafeCheckFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricInvalidPartitionSelectorException">
            <summary>
            The exception that is thrown when a PartitionSelector is invalid.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionSelectorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidPartitionSelectorException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionSelectorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidPartitionSelectorException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionSelectorException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionSelectorException" /> with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionSelectorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidPartitionSelectorException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:System.Fabric.FabricInvalidReplicaSelectorException">
            <summary>
            The exception that is thrown when a ReplicaSelector is invalid.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidReplicaSelectorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidReplicaSelectorException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidReplicaSelectorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidReplicaSelectorException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidReplicaSelectorException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidReplicaSelectorException" /> with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidReplicaSelectorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidReplicaSelectorException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:System.Fabric.FabricInvalidForStatefulServicesException">
            <summary>
            The exception that is thrown when an operation is only valid for stateless services.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatefulServicesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatefulServicesException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatefulServicesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatefulServicesException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatefulServicesException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidForStatefulServicesException" /> with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatefulServicesException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatefulServicesException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatefulServicesException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatefulServicesException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricInvalidForStatelessServicesException">
            <summary>
            The exception that is thrown when an operation is only valid for stateful services.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatelessServicesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatelessServicesException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatelessServicesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatelessServicesException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatelessServicesException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidForStatelessServicesException" /> with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatelessServicesException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatelessServicesException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidForStatelessServicesException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidForStatelessServicesException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException">
            <summary>
            The exception that is thrown when an operation is only valid for stateful persistent services.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException" /> with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" /> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricOnlyValidForStatefulPersistentServicesException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode" />defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricPeriodicBackupNotEnabledException">
            <summary>
            The exception that is thrown trying to get backup scheduling policy for a partition for which backup is not enabled
            </summary>
        </member>
        <member name="M:System.Fabric.FabricPeriodicBackupNotEnabledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricPeriodicBackupNotEnabledException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricPeriodicBackupNotEnabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricPeriodicBackupNotEnabledException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricPeriodicBackupNotEnabledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricPeriodicBackupNotEnabledException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricPeriodicBackupNotEnabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricPeriodicBackupNotEnabledException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.TransactionFaultedException">
            <summary>
            <para>Exception that indicates a failure due to the transaction being faulted internally by the system.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.TransactionFaultedException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.TransactionFaultedException" /> class with appropriate message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for this exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.TransactionFaultedException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.TransactionFaultedException" /> class with appropriate message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for this exception.</para>
            </param>
            <param name="inner">
            <para>The Inner Exception that provides detailed information.</para>
            </param>
        </member>
        <member name="M:System.Fabric.TransactionFaultedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.TransactionFaultedException" /> class from serialized state.</para>
            </summary>
            <param name="info">
            <para>Contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>Contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricReplicator">
            <summary>
            <para>Replicates state for high availability and reliability. </para>
            </summary>
            <remarks>
            <para>Provides the default implementation of the <see cref="T:System.Fabric.IStateReplicator" />, <see cref="T:System.Fabric.IReplicator" />, and <see cref="T:System.Fabric.IPrimaryReplicator" /> interfaces, which user services can use, along with their implementation of the <see cref="T:System.Fabric.IStateProvider" /> interface.</para>
            <para>An instance of the <see cref="T:System.Fabric.FabricReplicator" /> class is obtained via the <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)" /> method.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.FabricReplicator.UnknownSequenceNumber">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.FabricReplicator.InvalidAtomicGroupId">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="P:System.Fabric.FabricReplicator.StateReplicator">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.IStateReplicator" /> which can be used to replicate state</para>
            </summary>
            <value>A value representing the <see cref="T:System.Fabric.IStateReplicator" /> which can be used to replicate state</value>
        </member>
        <member name="P:System.Fabric.FabricReplicator.StateReplicator2">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.IStateReplicator2" /> which can be used to replicate state</para>
            </summary>
            <value>A value representing the <see cref="T:System.Fabric.IStateReplicator2" /> which can be used to replicate state</value>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync(System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="epoch">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="role">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync(System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <returns>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <returns>
            <para>For Internal Use Only.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="epoch">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="currentConfiguration">
            <para>For Internal Use Only.</para>
            </param>
            <param name="previousConfiguration">
            <para>For Internal Use Only.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="quorumMode">
            <para>For Internal Use Only.</para>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>For Internal Use Only.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="currentConfiguration">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <remarks>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="replicaInfo">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" />  object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica(System.Int64)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="replicaId">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <remarks>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.FabricUpgradeProgress">
            <summary>
            <para>Encapsulates the progress of a Service Fabric upgrade.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDescription">
            <summary>
            <para>Gets the upgrade parameter details that describe the behavior of the current upgrade.</para>
            </summary>
            <value>
            <para>The upgrade parameter details that describe the behavior of the current upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.TargetCodeVersion">
            <summary>
            <para>Gets the target code version for this  upgrade.</para>
            </summary>
            <value>
            <para>The target code version for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.TargetConfigVersion">
            <summary>
            <para>Gets the target configuration version for this  upgrade.</para>
            </summary>
            <value>
            <para>The target configuration version for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeState">
            <summary>
            <para>Gets the upgrade state for this  upgrade.</para>
            </summary>
            <value>
            <para>The upgrade state for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDomains">
            <summary>
            <para>Gets the list of upgrade domains.</para>
            </summary>
            <value>
            <para>The list of upgrade domains.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.RollingUpgradeMode">
            <summary>
            <para>Gets the rolling upgrade mode for this  upgrade.</para>
            </summary>
            <value>
            <para>The rolling upgrade mode for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.NextUpgradeDomain">
            <summary>
            <para>Gets the next upgrade domain for this  upgrade.</para>
            </summary>
            <value>
            <para>The next upgrade domain for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current overall upgrade.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current overall upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.CurrentUpgradeDomainDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current Upgrade Domain.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current Upgrade Domain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UnhealthyEvaluations">
            <summary>
            <para>Gets the health evaluations which describe the data and the algorithm used by health manager to evaluate cluster health. Only populated when the cluster’s aggregated health state is  <see cref="F:System.Fabric.Health.HealthState.Error" />. When the upgrade rolls back because of health evaluation, it provides a snapshot view of the health at the time the health check was performed.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state. The items in the list can be of the following types: <see cref="T:System.Fabric.Health.ApplicationsHealthEvaluation" />, <see cref="T:System.Fabric.Health.NodesHealthEvaluation" />, <see cref="T:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation" />, <see cref="T:System.Fabric.Health.SystemApplicationHealthEvaluation" /> oror <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.CurrentUpgradeDomainProgress">
            <summary>
            <para>Gives the detailed upgrade progress for nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeDomainProgress" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.StartTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade started.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade started in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade failed in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureReason">
            <summary>
            <para>
            Gets the category of upgrade failure if the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            <para>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </para>
            </summary>
            <value>
            <para>The upgrade progress details. <see cref="T:System.Fabric.UpgradeDomainProgress" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.FabricUpgradeProgress.ToString">
            <summary>
            Gets a string representation of the fabric upgrade progress.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.FabricUpgradeProgress"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricUpgradeProgress.GetChangedUpgradeDomains(System.Fabric.FabricUpgradeProgress)">
            <summary>
            <para>Gets the list of changed upgrade domains.</para>
            </summary>
            <param name="previousProgress">
            <para>The previous progress report from this  upgrade process.</para>
            </param>
            <returns>
            <para>The list of changed upgrade domains.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricUpgradeState">
            <summary>
            <para>Specifies the upgrade state when upgrading Service Fabric.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.Invalid">
            <summary>
            <para>All Service Fabric enumerations have reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingBackInProgress">
            <summary>
            <para>Specifies that the rolling back process is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingBackCompleted">
            <summary>
            <para>Specifies that the rolling back process has completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingForwardPending">
            <summary>
            <para>Specifies that the rolling forward process is pending client input.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingForwardInProgress">
            <summary>
            <para>Specifies that the rolling forward process is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingForwardCompleted">
            <summary>
            <para>Specifies that the rolling forward process has completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.Failed">
            <summary>
            <para>Indicates that the upgrade has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingBackPending">
            <summary>
            <para>Specifies that the rolling back process has pending client input.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.FabricOrchestrationUpgradeProgress">
            <summary>
            <para>Encapsulates the progress of a Service Fabric upgrade.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricOrchestrationUpgradeProgress.UpgradeState">
            <summary>
            <para>Gets the upgrade state for this  upgrade.</para>
            </summary>
            <value>
            <para>The upgrade state for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricOrchestrationUpgradeProgress.ProgressStatus">
            <summary>
            <para>Gets the upgrade state for this  upgrade.</para>
            </summary>
            <value>
            <para>The upgrade state for this  upgrade.</para>
            </value>
            
        </member>
        <member name="P:System.Fabric.FabricOrchestrationUpgradeProgress.ConfigVersion">
            <summary>
            Gets the JSON config version
            </summary>
        </member>
        <member name="P:System.Fabric.FabricOrchestrationUpgradeProgress.Details">
            <summary>
            Upgrade details
            </summary>
        </member>
        <member name="T:System.Fabric.FabricUpgradeOrchestrationServiceState">
            <summary>
            <para>Encapsulates the service state of Upgrade Orchestration Service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeOrchestrationServiceState.CurrentCodeVersion">
            <summary>
            current code version
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeOrchestrationServiceState.CurrentManifestVersion">
            <summary>
            current manifest version
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeOrchestrationServiceState.TargetCodeVersion">
            <summary>
            target code version
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeOrchestrationServiceState.TargetManifestVersion">
            <summary>
            target manifest version
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeOrchestrationServiceState.PendingUpgradeType">
            <summary>
            pending upgrade type
            </summary>
        </member>
        <member name="T:System.Fabric.FaultType">
            <summary>
            <para>Indicates the type of fault that a service reports: invalid, transient or permanent. </para>
            </summary>
            <remarks>
            <para>Services can report faults during runtime by using the <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)" /> method to indicate the type of fault.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.FaultType.Invalid">
            <summary>
            <para>The type is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FaultType.Permanent">
            <summary>
            <para>A permanent fault is a fault that the replica cannot recover from. This type of fault indicates that the replica can make no further progress and should be removed and replaced. </para>
            </summary>
            <remarks>
            <para>An example of a permanent fault would be a persistent stateful service that tries to write information to disk and determines that the disk had been removed or was unusable. Calling <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)" /> and reporting a permanent fault result in the service to be Aborted via <languageKeyword>IStatefulServiceReplica.</languageKeyword><see cref="M:System.Fabric.IStatefulServiceReplica.Abort" /> or <languageKeyword>IStatelessServiceInstance.</languageKeyword><see cref="M:System.Fabric.IStatelessServiceInstance.Abort" /> without a chance to gracefully clean up state or complete operations. Therefore, if any cleanup or other long-running work is necessary, it should be performed before <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)" /> is called. Note that the distinction between permanent and transient faults is useful mainly for persistent stateful services. Other than the call sequence, the effects on other service types are the same: the replica or instance is removed, all state at that replica or instance is lost, and the replica or instance is recreated, potentially in a different location.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.FaultType.Transient">
            <summary>
            <para>A transient fault indicates that there is some temporary condition which prevents the replica from making further progress or from processing further user requests. </para>
            </summary>
            <remarks>
            <para>An example of a transient fault is a service that determines that a portion of its state or some reference file is corrupted, but can be repaired if the service were to be re-initialized. In this case, the service uses the <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)" /> method to report a transient fault. Reporting a transient fault closes the service via <languageKeyword>IStatefulServiceReplica.</languageKeyword><see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)" /> or <languageKeyword>IStatelessServiceInstance.</languageKeyword><see cref="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)" />. Note that for stateless and stateful services, volatile transient faults are not very useful because state is not preserved across the failure. For these services, whether to use transient or permanent faults is dependent on whether the service should be gracefully closed asynchronously with cleanup or ungracefully closed with a synchronous <languageKeyword>IStatefulServiceReplica.</languageKeyword><see cref="M:System.Fabric.IStatefulServiceReplica.Abort" /> or <languageKeyword>IStatelessServiceInstance.</languageKeyword><see cref="M:System.Fabric.IStatelessServiceInstance.Abort" /> method.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.GatewayInformation">
            <summary>
            <para>Contains information identifying a Service Fabric node in the cluster.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeAddress">
            <summary>
            <para>Gets the address that Service Fabric clients use when connecting to this node (as specified in the Cluster Manifest).</para>
            </summary>
            <value>
            <para>The address that Service Fabric clients use when connecting to this node (as specified in the Cluster Manifest).</para>
            </value>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeId">
            <summary>
            <para>The unique identifier used internally by Service Fabric to identify a node. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeId" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeInstanceId">
            <summary>
            <para>The instance of a Service Fabric node changes when the node is restarted.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeName">
            <summary>
            <para>The friendly name of the Service Fabric node (defined in the Cluster Manifest) used to generate the NodeId.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.GetPropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation" /> that gets the specified property if it exists.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> fails, the entire batch will fail and not be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.GetPropertyOperation.#ctor(System.String)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.GetPropertyOperation" /> class with specified property name.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <remarks>
            <para>
                <see cref="P:System.Fabric.GetPropertyOperation.IncludeValue" /> is set to <languageKeyword>true</languageKeyword>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.GetPropertyOperation.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.GetPropertyOperation" /> with specified property name and include value flag.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="includeValue">
            <para>Specifies whether values should be included in the return or only metadata should be returned.</para>
            </param>
        </member>
        <member name="P:System.Fabric.GetPropertyOperation.IncludeValue">
            <summary>
            <para>Gets a value indicating whether the value of the property is returned together with the metadata.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the value of the property should be included; <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealth">
            <summary>
            <para>Describes the health of an application as returned by
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealth.ApplicationName">
            <summary>
            <para>Gets the application name, which uniquely identifies the application . </para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealth.ServiceHealthStates">
            <summary>
            <para>Gets the service health states for the current application as found in the health store.</para>
            </summary>
            <value>
            <para>The services of the current application as found in the health store.</para>
            </value>
            <para>Only services that respect the <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ServicesFilter"/> (if specified) are returned. 
            If the input filter is not specified, all services are returned.</para>
            <para>All services are evaluated to determine the application aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealth.DeployedApplicationHealthStates">
            <summary>
            <para>Gets the deployed application health states for the current application as found in the health store.</para>
            </summary>
            <value>
            <para>deployed applications for the current application as found in the health store.</para>
            </value>
            <para>Only deployed applications that respect the <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.DeployedApplicationsFilter"/> (if specified) are returned. 
            If the input filter is not specified, all deployed applications are returned.</para>
            <para>All deployed applications are evaluated to determine the application aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealth.HealthStatistics">
            <summary>
            Gets the application health statistics, which contain information about how many entities of the application are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            </summary>
            <value>The application health statistics.</value>
            <remarks>
            <para>
            The application health statistics contain information about how many services, partitions, replicas, deployed applications, and deployed service packages are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            It can be null or empty if the query that returns the <see cref="T:System.Fabric.Health.ApplicationHealth"/>
            specified <see cref="T:System.Fabric.Health.ApplicationHealthStatisticsFilter"/> to exclude health statistics.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.ApplicationHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ApplicationHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthPolicy">
            <summary>
            <para>Defines a health policy used to evaluate the health of a Service Fabric application
            or one of its children entities.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> class.</para>
            </summary>
            <remarks>The default application health policy doesn't tolerate any errors or warnings.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError">
            <summary>
            <para>Gets or sets a <see cref="T:System.Boolean" /> that determines whether�reports with warning state should be treated with the same severity as errors.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if reports with warning state should be treated as errors; <languageKeyword>false</languageKeyword> when 
            warnings should not be treated as errors.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy deployed applications.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy deployed applications. Allowed values are <see cref="T:System.Byte" /> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
            <remarks>
            <para>
            The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy 
            before the application is considered in error. 
            This is calculated by dividing the number of unhealthy deployed applications over the number of nodes
            that the applications are currently deployed on in the cluster.
            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage: zero.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthPolicy.ToString">
            <summary>
            Gets a string representation of the application health policy.
            </summary>
            <returns>A string representation of the application health policy.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy">
            <summary>
            <para>Gets or sets the health policy used by default to evaluate the health of a service type.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy" /> used to evaluate service type health if no service type policy is defined.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap">
            <summary>
            <para>Gets or sets the map with <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy" /> per service type name. </para>
            </summary>
            <value>
            <para>The map with service type health policy per service type name.</para>
            </value>
            <remarks>
            <para>The entries in the map replace the default service type health policy for each specified service type.
            For example, in an application that contains both a stateless gateway service type and a stateful engine service type,
            the health policies for the stateless and stateful services can be configured differently.
            With policy per service type, there's more granular control of the health of the service.
            </para>
            <para>If no policy is 
            specified for a service type name, the <see cref="P:System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy" />
            is used for evaluation.
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthPolicyMap">
            <summary>
            <para>Represents a map that contains specific application health policies for different applications.</para>
            </summary>
            <remarks>Can be used by queries like <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)"/> or <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)"/>
            to determine how the applications are evaluated.
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthPolicyMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthPolicyMap"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthPolicyMap.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.ApplicationHealthPolicyMap"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ApplicationHealthPolicyMap"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStatisticsFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.HealthStatistics" />.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/>
            to specify whether the health statistics should be returned as part of <see cref="T:System.Fabric.Health.ApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStatisticsFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthStatisticsFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStatisticsFilter.ExcludeHealthStatistics">
            <summary>
            Gets or sets a flag that indicates whether the health statistics should be included in query result.
            </summary>
            <value>A flag that indicates whether the health statistics should be included in query result.</value>
            <remarks>
            <para>
            If ExcludeHealthStatistics is set to <languageKeyword>true</languageKeyword>, the health statistics are not returned as part of the query result.
            Otherwise, the query result includes the application health statistics, which contain information about how many
            services, partitions and replicas of this application are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            Defaults to <languageKeyword>false</languageKeyword>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStatisticsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap">
            <summary>
            <para>
            Defines a map with max percentages unhealthy applications for specific application types. 
            </para>
            </summary>
            <remarks>The application type health policy map can be used during cluster health evaluation
            to describe special application types. The application types included in the map are evaluated against the percentage
            included in the map, and not with the global <see cref="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications"/>.
            The applications of application types specified in the map are not counted against the 
            global pool of applications.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.#ctor">
            <summary>
            <para>
            Instantiates an <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap" /> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.Add(System.String,System.Byte)">
            <summary>
            <para>
            Adds an entry in the map for a specific application type, with max percent unhealthy applications as value.
            </para>
            </summary>
            <param name="appTypeName">
            <para>The application type name.</para>
            </param>
            <param name="value">
            <para>The max percent unhealthy applications allowed for the application type. Must be between 0 and 100.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified percentage value was outside the range of integer values from zero to 100.</para>
            </exception>p
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthReport">
            <summary>
            <para>Represents a health report to be applied on an application health entity.</para>
            </summary>
            <remarks>The report can be sent to the health store using <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthReport.#ctor(System.Uri,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthReport" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, property, health state. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthReport.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the application name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthState">
            <summary>
            <para>Represents the health state of an application, which contains the application identifier and the aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthState.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthState.ToString">
            <summary>
            Gets a string description of the application health state.
            </summary>
            <returns>String description of the application.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateChunk">
            <summary>
            Represents an application health state chunk, which contains basic health information about the application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunk.#ctor">
            <summary>
            Instantiates an <see cref="T:System.Fabric.Health.ApplicationHealthStateChunk"/>.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ApplicationName">
            <summary>
            Gets the application name.
            </summary>
            <value>The application name.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ApplicationTypeName">
            <summary>
            Gets the application type name.
            </summary>
            <value>The application type name.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.HealthState">
            <summary>
            Gets the application aggregated health state, computed based on all reported health events, the children and the application health policy.
            </summary>
            <value>The application aggregated health state.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ServiceHealthStateChunks">
            <summary>
            Gets the list of the service health state chunks that respect the input filters.
            </summary>
            <value>The list of the service health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all services that have health state error.
            Regardless of filter value, all children are used to compute application aggregated health.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.DeployedApplicationHealthStateChunks">
            <summary>
            Gets the list of the deployed application health state chunks that respect the input filters.
            </summary>
            <value>The list of the deployed application health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all deployed applications that have health state error.
            Regardless of filter value, all children are used to compute application aggregated health.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunk.ToString">
            <summary>
            Creates a string description of the health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ApplicationHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ApplicationHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.ApplicationHealthState" /> 
            that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.IndexOf(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Int32" /> which represents the index of the item if found in the collection; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Insert(System.Int32,System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthState" /> at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Add(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Contains(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is found; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.CopyTo(System.Fabric.Health.ApplicationHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Int32" /> representing the number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Remove(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>The <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ApplicationHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of application filters to fine-grain
            select the applications that should be included in the query result.
            Note that all the applications are used to evaluate cluster aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            For an application to match the filter, its aggregated health state must match the specified health state filter.
            If the health state filter is Default, the health state filter defaults to None if there are no specific filters (application name or application type name).
            Otherwise, the Default filter is considered to apply to All.
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter">
            <summary>
            Gets or sets the application name filter.
            </summary>
            <value>The application name filter.</value>
            <remarks>If specified, the filter applies only to the desired application. 
            For the application to match the filter, its aggregated health state must match
            the specified health state filter.
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter">
            <summary>
            Gets or sets the application type name filter.
            </summary>
            <value>The application type name filter.</value>
            <remarks>If specified, the filter applies to all applications of specified application type that don't have a more specific filter (for a specific application name).
            For an application to match the filter, its aggregated health state must match the specified health state filter.
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> to be applied to the service children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> to be applied to the service children health states.</value>
            <remarks>The list can contain one default service filter or service filters for specific services to fine-grain entities returned by the query.
            All service children that match the filter will be returned as children of the application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> to be applied to the deployed application children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> to be applied to the deployed application children health states.</value>
            <remarks>The list can contain one default deployed application filter or deployed application filters for specific deployed applications to fine-grain entities returned by the query.
            All deployed application children that match the filter will be returned as children of the application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStatesFilter">
            <summary>
            <para>Provides filter for <see cref="T:System.Fabric.Health.ApplicationHealthState" /> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ClusterHealthQueryDescription"/>
            to specify which application children of the cluster should be returned as part of <see cref="T:System.Fabric.Health.ClusterHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthStatesFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState" /> entries in the collection. </para>
            </summary>
            <value>
            <para>The value of the filter. The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ApplicationHealthStatesFilter"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthEvaluation">
            <summary>
            <para>Represents health evaluation for an application, containing information about the data and the algorithm used by health store to evaluate 
            health. </para>
            </summary>
            <remarks>The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> or 
            <see cref="F:System.Fabric.Health.HealthState.Warning" />.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthEvaluation.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the application. </para>
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.Health.HealthEvaluation" /> representing the unhealthy 
            evaluations that led to current aggregated health state.</para>
            </value>
            <remarks>The types of the unhealthy evaluations 
            can be <see cref="T:System.Fabric.Health.DeployedApplicationsHealthEvaluation" />, <see cref="T:System.Fabric.Health.ServicesHealthEvaluation" /> 
            or <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for applications, containing health evaluations for each unhealthy application that impacted current 
            aggregated health state.</para>
            </summary>
            <remarks>The applications evaluation can be returned during cluster health evaluation, when the aggregated health state 
            of the cluster is either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.</para>
            </summary>
            <value>
            <para>A list of <see cref="T:System.Fabric.Health.HealthEvaluation" /> representing 
            the unhealthy evaluations that led to current aggregated health state.</para>
            </value>
            <remarks>
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ApplicationHealthEvaluation" /> that impacted the aggregated health.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy applications from the <see cref="T:System.Fabric.Health.ClusterHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy applications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of applications in the health store.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int64" /> representing the total count of applications in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation">
            <summary>
            <para>
            Represents health evaluation for applications of an application type.
            </para>
            </summary>
            <remarks>
            <para>The application type applications evaluation can be returned when 
            cluster health evaluation returns unhealthy aggregated health state, 
            either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.
            It contains health evaluations for each unhealthy application 
            of the included application type that impacted current aggregated health state.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.ApplicationTypeName">
            <summary>
            <para>
            Gets the application type name.
            </para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>
            Gets the list of unhealthy evaluations that led to the aggregated health state.
            </para>
            </summary>
            <value>
            <para>The list of unhealthy evaluations for the specified application type.</para>
            </value>
            <remarks> Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ApplicationHealthEvaluation" /> of this application type that impacted the aggregated health.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            <para>
            Gets the maximum allowed percentage of unhealthy applications for the application type, specified as an entry in 
            <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap" />.
            </para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy applications for the application type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>
            Gets the total number of applications of the application type found in the health store.
            </para>
            </summary>
            <value>
            <para>The total number of applications of the application type.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealth">
            <summary>
            <para>Represents the health of the cluster, as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)" />.
            Contains the cluster aggregated health state, the application health states, the node health states as well as health events, health evaluation, and health statistics.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealth.NodeHealthStates">
            <summary>
            <para>Gets the cluster node health states as found in the health store.</para>
            </summary>
            <value>
            <para>The cluster nodes as found in the health store.</para>
            </value>
            <para>Only nodes that respect the <see cref="P:System.Fabric.Description.ClusterHealthQueryDescription.NodesFilter"/> (if specified) are returned. 
            If the input filter is not specified, all nodes are returned.</para>
            <para>All nodes are evaluated to determine the cluster aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealth.ApplicationHealthStates">
            <summary>
            <para>Gets the cluster application health states as found in the health store.</para>
            </summary>
            <value>
            <para>The cluster applications as found in the health store.</para>
            </value>
            <para>Only applications that respect the <see cref="P:System.Fabric.Description.ClusterHealthQueryDescription.ApplicationsFilter"/> (if specified) are returned. 
            If the input filter is not specified, all applications are returned.</para>
            <para>All applications are evaluated to determine the cluster aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealth.HealthStatistics">
            <summary>
            Gets the cluster health statistics, which contain information about how many cluster entities are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            </summary>
            <value>The cluster health statistics.</value>
            <remarks>
            <para>
            The cluster health statistics contain information about how many cluster entities are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            It can be null or empty if the query that returns the <see cref="T:System.Fabric.Health.ClusterHealth"/>
            specified <see cref="T:System.Fabric.Health.ClusterHealthStatisticsFilter"/> to exclude health statistics.
            By default, the health query returns statistics that do not include statistics about the system application:
            the number of applications, services, partitions, replicas, deployed applications, and deployed service packages
            contain only user entities.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.ClusterHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ClusterHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthChunk">
            <summary>
            Represents the cluster state chunk, which includes health information about the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ClusterHealthChunk"/>.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.HealthState">
            <summary>
            Gets the cluster aggregated health state.
            </summary>
            <value>The cluster aggregated health state.</value>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.NodeHealthStateChunks">
            <summary>
            Gets the list of the node health state chunks that respect the input filters.
            </summary>
            <value>The list of the node health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information.</para></remarks>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.ApplicationHealthStateChunks">
            <summary>
            Gets the list of the application health state chunks that respect the input filters.
            </summary>
            <value>The list of the application health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information.</para></remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthChunk.ToString">
            <summary>
            Creates a string description of the cluster chunk.
            </summary>
            <returns>String description of the cluster chunk.</returns>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthPolicy">
            <summary>
            <para>Defines a health policy used to evaluate the health of the cluster or of a cluster node.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ClusterHealthPolicy" /> class.</para>
            </summary>
            <remarks>By default, no errors or warnings are tolerated.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError">
            <summary>
            <para>Gets or sets a <see cref="T:System.Boolean" /> that determines whether�reports with warning state should be treated with the same severity as errors.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if reports with warning state should be treated as errors; <languageKeyword>false</languageKeyword> if warnings 
            should not be treated as errors.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy nodes.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes. Allowed values are integer values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
            <remarks>
            <para>
            The percentage represents the maximum tolerated percentage of nodes that can be unhealthy 
            before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node,
            the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy nodes
            over the total number of nodes in the cluster.
            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage: zero.
            </para>
            <para>In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy applications.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy applications. Allowed values are integer values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
            <remarks>
            <para>
            The percentage represents the maximum tolerated percentage of applications that can be unhealthy 
            before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application,
            the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy applications
            over the total number of applications deployed in the cluster, excluding all applications of application types
            that are included in the <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/>.
            The computation rounds up to tolerate one failure on small numbers of applications. Default percentage: zero.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthPolicy.ToString">
            <summary>
            Gets a string representation of the cluster health policy.
            </summary>
            <returns>A string representation of the cluster health policy.</returns>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap">
            <summary>
            <para>
            Gets the map with MaxPercentUnhealthyApplications per application type name. 
            </para>
            </summary>
            <value>
            <para>The application type health policy map with MaxPercentUnhealthyApplications per application type name.</para>
            </value>
            <remarks>
            <para>The application type health policy map can be used during cluster health evaluation to describe special application types. 
            By default, all applications are put into a pool and evaluated with <see cref="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications"/>. If one or more application types are special 
            and should be treated in a different way, they can be taken out of the global pool and evaluated against the percentages associated with their application type name in the map. 
            For example, in a cluster there are thousands of applications of different types, and a few control application instances of a special application type.
            The control applications should never be in error. So users can specify global MaxPercentUnhealthyApplications to 20% to tolerate some failures, 
            but for the application type "ControlApplicationType" set the MaxPercentUnhealthyApplications to 0. 
            This way, if some of the many applications are unhealthy, but below the global unhealthy percentage, the cluster would be evaluated to Warning. 
            A warning health state does not impact cluster upgrade or other monitoring triggered by Error health state.
            But even one control application in error would make cluster health error, which can rollback or prevent a cluster upgrade. </para>>
            <para>For the application types defined in the map, all application instances are taken out of the global pool of applications.
            They are evaluated based on the total number of applications of the application type, using the specific MaxPercentUnhealthyApplications from the map.
            All the rest of the applications remain in the global pool and are evaluated with MaxPercentUnhealthyApplications.</para>
            <para>To define entries for the specific application types in the cluster manifest, inside FabricSettings add entries
            for parameters with name formed by prefix "ApplicationTypeMaxPercentUnhealthyApplications-" followed by application type name.</para>
            <para>If no policy is specified for an application type, the default MaxPercentUnhealthyApplications is used for evaluation.</para>
            <para>The application type health evaluation is done only when the cluster is configured with EnableApplicationTypeHealthEvaluation <languageKeyword>true</languageKeyword>.
            The setting is disabled by default.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.NodeTypeHealthPolicyMap">
            <summary>
            <para>
            Gets the map with MaxPercentUnhealthyNodes per node type name. 
            </para>
            </summary>
            <value>
            <para>The node type health policy map with MaxPercentUnhealthyNodes per node type name.</para>
            </value>
            <remarks>
            <para>
            The node type health policy map can be used during cluster health evaluation to describe special node types. 
            For example, in a cluster there are hundreds of nodes of different types, and a few control node instances of a special node type.
            The control nodes should never be in error. So users can specify global MaxPercentUnhealthyNodes to 20% to tolerate some failures, 
            but for the node type "ControlNodeType" set the MaxPercentUnhealthyNodes to 0. 
            This way, if some of the many nodes are unhealthy, but below the global unhealthy percentage, the cluster would be evaluated to Warning. 
            A warning health state does not impact cluster upgrade or other monitoring triggered by Error health state.
            But even one control node in error would make cluster health error, which can rollback or prevent a cluster upgrade. 
            </para>>
            <para>
            To define entries for the specific node types in the cluster manifest, inside FabricSettings add entries
            for parameters with name formed by prefix "NodeTypeMaxPercentUnhealthyNodes-" followed by node type name.
            </para>
            <para>If no policy is specified for an node type, the default MaxPercentUnhealthyNodes is used for evaluation.</para>
            <para>The node type health evaluation is done only when the cluster is configured with EnableNodeTypeHealthEvaluation <languageKeyword>true</languageKeyword>.
            The setting is disabled by default.
            </para>
            <para>
            Please note that defining node type specific health policies do not impact the evaluation of
            <see cref="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes"/>; no nodes are taken
            out of the global evaluation pool, and they are health checks run independently of each other.
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthReport">
            <summary>
            <para>Represents a health report to be applied on the cluster health entity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthReport.#ctor(System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Creates a cluster health report.</para>
            </summary>
            <param name="healthInformation">
            <para>The health information which describes the report parameters. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthStatisticsFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.HealthStatistics" />.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ClusterHealthQueryDescription"/>
            to specify whether the health statistics should be returned as part of <see cref="T:System.Fabric.Health.ClusterHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthStatisticsFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ClusterHealthStatisticsFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthStatisticsFilter.ExcludeHealthStatistics">
            <summary>
            Gets or sets a flag that indicates whether the health statistics should be included in query result.
            </summary>
            <value>A flag that indicates whether the health statistics should be included in query result.</value>
            <remarks>
            <para>
            If ExcludeHealthStatistics is set to <languageKeyword>true</languageKeyword>, the health statistics are not returned as part of the query result.
            Otherwise, the query result includes the cluster health statistics.
            The statistics shows the number of entities in the cluster per entity type, with count for 
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            Defaults to <languageKeyword>false</languageKeyword>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthStatisticsFilter.IncludeSystemApplicationHealthStatistics">
            <summary>
            Gets or sets a flag that indicates whether the health statistics should include information for the fabric:/System application.
            </summary>
            <value>A flag that indicates whether the health statistics should include information for the fabric:/System application.</value>
            <remarks>
            <para>
            If IncludeSystemApplicationHealthStatistics is set to <languageKeyword>true</languageKeyword>, the health statistics 
            include the entities that belong to the fabric:/System application.
            Otherwise, the query result includes health statistics only for user applications.
            Defaults to <languageKeyword>false</languageKeyword>.
            </para>
            <para>In order to apply IncludeSystemApplicationHealthStatistics,
            ExcludeHealthStatistics must be set to <languageKeyword>false</languageKeyword> (default value).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthStatisticsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ClusterUpgradeHealthPolicy">
            <summary>
            <para>Defines a health policy used to evaluate the health of the cluster specific to cluster upgrade.</para>
            </summary>
            <remarks>
            <para>It’s used together 
            with <see cref="T:System.Fabric.Health.ClusterHealthPolicy" /> to evaluate cluster health and determine whether the monitored 
            cluster upgrade is successful or needs to be rolled back.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterUpgradeHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ClusterUpgradeHealthPolicy.MaxPercentDeltaUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
            </para>
            </summary>
            <value>
            <para>The maximum allowed percentage of delta health degradation. Allowed values are integer values from zero to 100.</para>
            </value>
            <remarks>The delta is 
            measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. 
            The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated 
            limits. The default value is 10%.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ClusterUpgradeHealthPolicy.MaxPercentUpgradeDomainDeltaUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of upgrade domain nodes health degradation 
            allowed during cluster upgrades.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of upgrade domain delta health degradation. Allowed values are integer values from zero to 100.</para>
            </value>
            <remarks>The delta 
            is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the 
            time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains 
            to make sure the state of the upgrade domains is within tolerated limits. The default value is 15%.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.Health.DeltaNodesCheckHealthEvaluation">
            <summary>
            <para>Represents health evaluation for delta nodes, 
            containing health evaluations for each unhealthy node that impacted current 
            aggregated health state. 
            Can be returned during cluster upgrade when the aggregated health state of the cluster is 
            <see cref="F:System.Fabric.Health.HealthState.Error" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.BaselineErrorCount">
            <summary>
            <para>Gets the number of nodes with aggregated heath state <see cref="F:System.Fabric.Health.HealthState.Error" /> in the health store 
            at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>The number of nodes with aggregated heath state <see cref="F:System.Fabric.Health.HealthState.Error" /> in the health store at 
            the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.BaselineTotalCount">
            <summary>
            <para>Gets the total number of nodes in the health store at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>The total number of nodes in the health store at the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the current total number of nodes in the health store.</para>
            </summary>
            <value>
            <para>The current total number of nodes in the health store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.MaxPercentDeltaUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of delta unhealthy nodes from the <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of delta unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>Returns a list of the unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealth">
            <summary>
            <para>Describes the health of an application deployed on a node as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealth.ApplicationName">
            <summary>
            <para>Gets the application name, which uniquely identifies the application . </para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealth.NodeName">
            <summary>
            <para>Gets the node name for the node where the application is deployed.</para>
            </summary>
            <value>
            <para>The node name for the node where the application is deployed.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealth.DeployedServicePackageHealthStates">
            <summary>
            <para>Gets the deployed service package health states for the current deployed application as found in the health store.</para>
            </summary>
            <value>
            <para>The deployed service packages of the current deployed application as found in the health store.</para>
            </value>
            <para>Only deployed service packages that respect the <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.DeployedServicePackagesFilter"/> (if specified) are returned. 
            If the input filter is not specified, all deployed service packages are returned.</para>
            <para>All deployed service packages are evaluated to determine the deployed application aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealth.HealthStatistics">
            <summary>
            Gets the deployed application health statistics, which contain information about how many deployed service packages are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            </summary>
            <value>The deployed application health statistics.</value>
            <remarks>
            <para>
            The deployed application health statistics contain information about how many deployed service packages are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            It can be null or empty if the query that returns the <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/>
            specified <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatisticsFilter"/> to exclude health statistics.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthReport">
            <summary>
            <para>Represents a health report to be applied on the deployed application health entity. </para>
            </summary>
            <remarks>The report can be sent to the health store using <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthReport.#ctor(System.Uri,System.String,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthReport" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, property, 
            health state. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>The <paramref name="applicationName" /> cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <paramref name="nodeName" /> cannot be empty.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="nodeName" /> cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="healthInformation" /> cannot be null.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthReport.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthReport.NodeName">
            <summary>
            <para>Gets the node name where the deployed application is running.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String" /> representing the node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthState">
            <summary>
            <para>Represents the health state of a deployed application, which contains the entity identifier and the aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthState.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthState.NodeName">
            <summary>
            <para>Gets the node name of the deployed application.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String" /> representing the node name.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthState.ToString">
            <summary>
            Creates a string description of the application on the node, containing the id and the health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateChunk">
            <summary>
            Represents a deployed application health state chunk, which contains basic health information about the deployed application.
            It is included as child of an application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunk"/>.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.NodeName">
            <summary>
            Gets the node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the deployed application, computed based on all reported health events, the children and the application health policy.
            </summary>
            <value>The aggregated health state of the deployed application.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.DeployedServicePackageHealthStateChunks">
            <summary>
            Gets the list of the deployed service package health state chunks children that respect the input filters.
            </summary>
            <value>The list of the deployed service package  replica health state chunks children that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all deployed service packages that have health state error.
            Regardless of filter value, all children are used to compute the entity aggregated health.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunk.ToString">
            <summary>
            Creates a string description of the health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.DeployedApplicationHealthState" /> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.IndexOf(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Int32" /> which represents the index of the item if found in the collection; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Insert(System.Int32,System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Fabric.Health.DeployedApplicationHealthState" /> at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Add(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Contains(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is found; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.CopyTo(System.Fabric.Health.DeployedApplicationHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateList.Count">
            <summary>
            <para>Gets the number of elements in the collection.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int32" /> representing the number of elements in the collection.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the collection is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Remove(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of deployed application filters to fine-grain
            select the deployed applications that should be included in the query result.
            Note that all the deployed applications are used to evaluate parents' aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            For a deployed application to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.NodeNameFilter">
            <summary>
            Gets or sets the node name filter.
            </summary>
            <value>The node name filter.</value>
            <remarks>If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
            Otherwise, the filter only applies to applications deployed on the specified node.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.DeployedServicePackageFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> to be applied to the deployed service package health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> to be applied to the deployed service package health states.</value>
            <remarks>All deployed service packages that match the filter will be returned as children of the deployed application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthState" /> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/>
            to specify which deployed application children should be returned as part of <see cref="T:System.Fabric.Health.ApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState" /> entries 
            in the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState" /> entries in the collection.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.DeployedApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStatisticsFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.HealthStatistics" />.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.DeployedApplicationHealthQueryDescription"/>
            to specify whether the health statistics should be returned as part of <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStatisticsFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatisticsFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStatisticsFilter.ExcludeHealthStatistics">
            <summary>
            Gets or sets a flag that indicates whether the health statistics should be included in query result.
            </summary>
            <value>A flag that indicates whether the health statistics should be included in query result.</value>
            <remarks>
            <para>
            If ExcludeHealthStatistics is set to <languageKeyword>true</languageKeyword>, the health statistics are not returned as part of the query result.
            Otherwise, the query result includes the deployed application health statistics,
            which contains information about how many deployed service packages are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            Defaults to <languageKeyword>false</languageKeyword>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStatisticsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a deployed application,
            containing information about the data and the algorithm used by health store 
            to evaluate health. </para>
            </summary>
            <remarks>The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthEvaluation.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthEvaluation.NodeName">
            <summary>
            <para>Gets the name of the node where the deployed application is running.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String" /> representing the node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state 
            of the deployed application. The types of the 
            unhealthy evaluations can be <see cref="T:System.Fabric.Health.DeployedServicePackagesHealthEvaluation" /> or 
            <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </summary>
            <value>
            <para>The list of unhealthy evaluations that led to the current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for deployed applications, 
            containing health evaluations for each unhealthy deployed application that impacted 
            current aggregated health state. 
            Can be returned when evaluating application health and the aggregated health state is 
            either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.DeployedApplicationHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>A list of unhealthy 
            evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationsHealthEvaluation.MaxPercentUnhealthyDeployedApplications">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy deployed applications
            from the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" />.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Byte" /> representing the maximum allowed percentage 
            of unhealthy deployed applications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of deployed applications of the application in the health store.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int64" /> representing the total count of 
            deployed applications of the application in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealth">
            <summary>
            <para>Describes the health of a deployed service package 
            as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealth.ApplicationName">
            <summary>
            <para>Gets the application name, which uniquely identifies the application.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealth.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealth.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of deployed service package.
            </summary>
            <value>
            <para>
            A string representing ActivationId of deployed service package. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Health.DeployedServicePackageHealth.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealth.NodeName">
            <summary>
            <para>Gets the node name where the deployed service package is running.</para>
            </summary>
            <value>
            <para>The node name where the deployed service package is running.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthReport">
            <summary>
            <para>Represents a health report to be applied on the deployed service package health entity. </para>
            </summary>
            <remarks>The report can be sent to the health store using <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthReport.#ctor(System.Uri,System.String,System.String,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthReport" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null or empty.</para>
            </param>
            <param name="serviceManifestName">
            <para>Service manifest name. Cannot be null or empty.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>The application name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Node name is invalid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Node name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Health information cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Service manifest name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Service manifest name is invalid.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthReport.#ctor(System.Uri,System.String,System.String,System.String,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthReport" /> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null or empty.</para>
            </param>
            <param name="serviceManifestName">
            <para>Service manifest name. Cannot be null or empty.</para>
            </param>
            <param name="servicePackageActivationId">
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package. 
            This can be obtained by using <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>
            specified at the time of creating the service was <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>The application name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Node name is invalid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Node name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Health information cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Service manifest name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Service manifest name is invalid.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthReport.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthReport.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> representing the service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthReport.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package. 
            This can be obtained by using <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>
            specified at the time of creating the service was <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthReport.NodeName">
            <summary>
            <para>Gets the name of the node where the deployed service package is running.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> representing the node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthState">
            <summary>
            <para>Represents the health state of a deployed service package, containing the entity identifier and the aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthState.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthState.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> representing the service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthState.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package. 
            This can be obtained by using  <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>
            specified at the time of creating the service was <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthState.NodeName">
            <summary>
            <para>Gets the node name of the node where the deployed service package is running.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> representing the node name.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthState.ToString">
            <summary>
            Creates a string description of the deployed service package health state, containing the identifier and the aggregated health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk">
            <summary>
            Represents a deployed service package health state chunk, which contains basic health information about the deployed service package.
            It is included as child of a deployed application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk"/>.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateChunk.ServiceManifestName">
            <summary>
            Gets the service manifest name, which is part of the deployed service package unique identifier, together with node name and application name.
            </summary>
            <value>The service manifest name.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateChunk.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of service package.
            </summary>
            <value>
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package. 
            This can be obtained by using  <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>
            specified at the time of creating the service was <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the deployed service package, computed based on all reported health events and the application health policy.
            </summary>
            <value>The aggregated health state of the deployed service package .</value>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunk.ToString">
            <summary>
            Creates a string description of the deployed service package health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState" /> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.IndexOf(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Int32" /> which represents the index of the item if found in the collection; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Insert(System.Int32,System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState" /> at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Add(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Contains(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is found; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.CopyTo(System.Fabric.Health.DeployedServicePackageHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int32" /> representing the number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the collection is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Remove(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of deployed service package filters to fine-grain
            select the deployed service packages that should be included in the query result.
            Note that all the deployed service packages are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            For a deployed service package to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.ServiceManifestNameFilter">
            <summary>
            Gets or sets the service manifest name filter.
            </summary>
            <value>The service manifest name filter.</value>
            <remarks>If not specified, all deployed service packages that match the parent filters (if any) and the specified health state filters match the filter.
            Otherwise, the filter only applies to the deployed service package for the specified service manifest name and the health state filter will be matched against it.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.ServicePackageActivationIdFilter">
            <summary>
            Gets or sets the service package ActivationId filter.
            </summary>
            <value>
            <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> of deployed service package can be obtained
             by using <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)"/> query. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>
            specified at the time of creating the service was <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if 
            it was not specified, in which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then 
            value of <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState" /> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.DeployedApplicationHealthQueryDescription"/>
            to specify which deployed service package children should be returned as part of <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStatesFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState" /> 
            entries in the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState" /> entries in the collection.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a deployed service package,
            containing information about the data and the algorithm used by 
            health store to evaluate health.
            The evaluation is returned only when the aggregated health state is either 
            <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri" /> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.NodeName">
            <summary>
            <para>Gets the name of the node where the deployed service package is running.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> representing the node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of deployed service package.
            </summary>
            <value>
            <para>
            A string representing ActivationId of deployed service package. 
            </para>
            <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/> specified at the time of creating the service is 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/> (or if it is not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess"/>), then value of 
            <see cref="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.ServicePackageActivationId"/> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode"/>.
            </para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state. 
            The type of the unhealthy evaluations can 
            be <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackagesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for deployed service packages, 
            containing health evaluations for each unhealthy deployed service 
            package that impacted current aggregated health state. 
            Can be returned when evaluating deployed application health and the aggregated 
            health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackagesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.DeployedServicePackageHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackagesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of deployed service packages of the deployed application in the health store.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int64" /> representing the total count of 
            deployed service packages of the deployed 
            application in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.EntityHealth">
            <summary>
            <para>Represents the base class for all entity health related classes.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.EntityHealth.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.EntityHealth" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.EntityHealth.AggregatedHealthState">
            <summary>
            <para>Gets the entity aggregated health state.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthState" /> representing the aggregated health state 
            computed by Health Manager based on 
            reported events on entity and its children (if any) and desired health policy.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.EntityHealth.HealthEvents">
            <summary>
            <para>Gets the health events reported on the entity.</para>
            </summary>
            <value>
            <para>The health events reported on the entity.</para>
            </value>
            <remarks>The health events are created based on the health reports sent to health store. 
            They contain additional metadata added by health store.</remarks>
        </member>
        <member name="P:System.Fabric.Health.EntityHealth.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that show why the current aggregated health state
            was returned by Health Manager.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that describe why the current aggregated health state was returned by Health Manager.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.EntityHealth.AddUnhealthyEvaluationsString(System.Text.StringBuilder)">
            <summary>
            Given a <see cref="T:System.Text.StringBuilder"/>, appends a string that describes unhealthy evaluations, if any.
            </summary>
            <param name="sb">The string builder where the evaluation descriptions are added.</param>
        </member>
        <member name="T:System.Fabric.Health.EntityHealthState">
            <summary>
            <para>Represents the base class for all entity health state classes.</para>
            </summary>
            <remarks>An entity health state contains entity identifier and entity aggregated health state.</remarks>
        </member>
        <member name="M:System.Fabric.Health.EntityHealthState.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.EntityHealthState" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.EntityHealthState.AggregatedHealthState">
            <summary>
            <para>Gets the aggregated health state computed by Health Manager 
            based on all reported events and the desired policy.</para>
            </summary>
            <value>
            <para>The aggregated health state computed by Health Manager.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.EventHealthEvaluation">
            <summary>
            <para>Represents health evaluation of a <see cref="T:System.Fabric.Health.HealthEvent" />. 
            Can be returned when evaluating health of an 
            entity returns <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.EventHealthEvaluation.UnhealthyEvent">
            <summary>
            <para>Gets the unhealthy event details.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEvent" /> that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.EventHealthEvaluation.ConsiderWarningAsError">
            <summary>
            <para>Gets <see cref="T:System.Boolean" /> that indicates whether warnings are treated 
            with the same severity as errors. The field is 
            specified in the health policy used to evaluate the entity.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if warnings are treated as errors; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.EntityKind">
            <summary>
            <para>Represents the entity kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.Invalid">
            <summary>
            <para>Indicates that the entity kind is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.Replica">
            <summary>
            <para>Indicates that the health entity is a replica, either a stateful service replica or a stateless service instance.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.Partition">
            <summary>
            <para>Indicates that the health entity is a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.Node">
            <summary>
            <para>Indicates that the health entity is a node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.Service">
            <summary>
            <para>Indicates that the health entity is a service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.Application">
            <summary>
            <para>Indicates that the health entity is an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.DeployedApplication">
            <summary>
            <para>Indicates that the health entity is a deployed application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.DeployedServicePackage">
            <summary>
            <para>Indicates that the health entity is a deployed service package.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.EntityKind.Cluster">
            <summary>
            <para>Indicates that the health entity is the cluster.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.EntityKindHealthStateCount">
            <summary>
            <para>
            Represents health state count for entities of the specified entity kind.
            It is returned as part of health statistics when requested by the health queries.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.EntityKindHealthStateCount.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.EntityKindHealthStateCount" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.EntityKindHealthStateCount.EntityKind">
            <summary>
            Gets the entity kind. The <see cref="T:System.Fabric.Health.HealthStateCount"/> shows how many entities of this kind are in 
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            </summary>
            <value>The entity kind.</value>
        </member>
        <member name="P:System.Fabric.Health.EntityKindHealthStateCount.HealthStateCount">
            <summary>
            Gets the health state count for the entities of the specified kind.
            </summary>
            <value>The health state count for the entities of the specified kind.</value>
        </member>
        <member name="M:System.Fabric.Health.EntityKindHealthStateCount.ToString">
            <summary>
            Returns a string representation of the health state count.
            </summary>
            <returns>A string representation of the health state count.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthEvaluation">
            <summary>
            <para>Represents a health evaluation which shows why an entity was evaluated at the current health state.
            The evaluation describes the data and the algorithm used by health store to evaluate the health of an entity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthEvaluation.#ctor(System.Fabric.Health.HealthEvaluationKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthEvaluation" /> class.</para>
            </summary>
            <param name="kind">
            <para>The <see cref="T:System.Fabric.Health.HealthEvaluationKind" /> of the evaluation.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.HealthEvaluation.Kind">
            <summary>
            <para>Gets the kind of the health evaluation.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Health.HealthEvaluationKind" /> of the health evaluation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvaluation.Description">
            <summary>
            <para>Gets the description of the health evaluation, 
            which represents a summary of the evaluation process.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> representing the description of the health evaluation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvaluation.AggregatedHealthState">
            <summary>
            <para>The aggregated health state of the evaluated entity.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Health.HealthState" /> representing the aggregated health state.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.HealthEvaluation.ToString">
            <summary>
            Returns a string representation of the health evaluation.
            </summary>
            <returns>A string representation of the health evaluation.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthEvaluationKind">
            <summary>
            <para>Enumerates the kinds of health evaluation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Invalid">
            <summary>
            <para>Indicates that the health evaluation is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Event">
            <summary>
            <para>Indicates that the health evaluation is for a health event.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Replicas">
            <summary>
            <para>Indicates that the health evaluation is for the replicas of a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Partitions">
            <summary>
            <para>Indicates that the health evaluation is for the partitions of a service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedServicePackages">
            <summary>
            <para>Indicates that the health evaluation is for the deployed service packages of a deployed application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedApplications">
            <summary>
            <para>Indicates that the health evaluation is for the deployed applications of an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Services">
            <summary>
            <para>Indicates that the health evaluation is for services of an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Nodes">
            <summary>
            <para>Indicates that the health evaluation is for the cluster nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Applications">
            <summary>
            <para>Indicates that the health evaluation is for the cluster applications.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.SystemApplication">
            <summary>
            <para>Indicates that the health evaluation is for the system application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.UpgradeDomainDeployedApplications">
            <summary>
            <para>Indicates that the health evaluation is for the deployed applications of an application in an upgrade domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.UpgradeDomainNodes">
            <summary>
            <para>Indicates that the health evaluation is for the cluster nodes in an upgrade domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Replica">
            <summary>
            <para>Indicates that the health evaluation is for a replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Partition">
            <summary>
            <para>Indicates that the health evaluation is for a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedServicePackage">
            <summary>
            <para>Indicates that the health evaluation is for a deployed service package.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedApplication">
            <summary>
            <para>Indicates that the health evaluation is for a deployed application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Service">
            <summary>
            <para>Indicates that the health evaluation is for a service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Node">
            <summary>
            <para>Indicates that the health evaluation is for a node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Application">
            <summary>
            <para>Indicates that the health evaluation is for an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeltaNodesCheck">
            <summary>
            <para>Indicates that the health evaluation is for the delta of unhealthy cluster nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.UpgradeDomainDeltaNodesCheck">
            <summary>
            <para>Indicates that the health evaluation is for the delta of unhealthy upgrade domain cluster nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.ApplicationTypeApplications">
            <summary>
            <para>
            Indicates that the health evaluation is for the application type applications.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.NodeTypeNodes">
            <summary>
            <para>
            Indicates that the health evaluation is for the node type nodes.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthEvent">
            <summary>
            <para>Represents health information reported on a health entity, such as cluster, application or node,
            with additional metadata added by the Health Manager.</para>
            </summary>
            <remarks>Health events are returned by health queries such as
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)"/>.
            They contain <see cref="T:System.Fabric.Health.HealthInformation"/> sent to Health Manager in a <see cref="T:System.Fabric.Health.HealthReport"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.SourceUtcTimestamp">
            <summary>
            <para>Gets the date and time when the health report was sent by the source.</para>
            </summary>
            <value>
            <para>The date and time when the health report was sent by the source.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastModifiedUtcTimestamp">
            <summary>
            <para>Gets the date and time when the health report was last modified by the health store.</para>
            </summary>
            <value>
            <para>The date and time when the health report was last modified by the health store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.IsExpired">
            <summary>
            <para>Gets a value that indicates whether the health event has expired.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the health event has expired;
                <languageKeyword>false</languageKeyword> if the health event was not expired at the time the health store evaluated the query.</para>
            </value>
            <remarks>
            <para>An event can be expired only if RemoveWhenExpired is false.
            Otherwise, the event is not returned by query and is removed from the store.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastOkTransitionAt">
            <summary>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> is <see cref="F:System.Fabric.Health.HealthState.Ok" />, 
            returns the time at which the health report was first reported with <see cref="F:System.Fabric.Health.HealthState.Ok" />. For periodic reporting, 
            many reports with the same state may have been generated.</para>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> is <see cref="F:System.Fabric.Health.HealthState.Error" /> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning" />, returns the time at which the health state was last in 
            <see cref="F:System.Fabric.Health.HealthState.Ok" />, before transitioning to a different state. If the <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> 
            has never been <see cref="F:System.Fabric.Health.HealthState.Ok" />, the value will be System.DateTime.FromFileTimeUtc(0).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.DateTime" /> representing the last transition time (UTC) involving <see cref="F:System.Fabric.Health.HealthState.Ok" />.</para>
            </value>
            <remarks>
            <para>The transition fields, <see cref="P:System.Fabric.Health.HealthEvent.LastOkTransitionAt"/>, <see cref="P:System.Fabric.Health.HealthEvent.LastWarningTransitionAt"/>, <see cref="P:System.Fabric.Health.HealthEvent.LastErrorTransitionAt"/> give the history of the health state transitions for the event.
            They can be used for smarter alerts or "historical" health event information. They enable scenarios such as:
            <list type="bullet">
                <item>
                    <para>Alert when a property has been at warning/error for more than X minutes.
                    This avoids alerts on temporary conditions. For example, an alert if the health state has been warning for more than five minutes can be translated into 
                    (HealthState == Warning and Now - LastWarningTransitionTime > 5 minutes).</para>
                </item>
                <item>
                    <para>Alert only on conditions that have changed in the last X minutes.
                    If a report was already at error before the specified time, it can be ignored because it was already signaled previously.</para>
                </item>
                <item>
                    <para>If a property is toggling between warning and error, determine how long it has been unhealthy (i.e. not OK). 
                    For example, an alert if the property hasn't been healthy for more than five minutes can be translated into (HealthState != Ok and Now - LastOkTransitionTime > 5 minutes).</para>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastWarningTransitionAt">
            <summary>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> is <see cref="F:System.Fabric.Health.HealthState.Warning" />, 
            returns the time at which the health report was first reported with <see cref="F:System.Fabric.Health.HealthState.Warning" />. For periodic reporting, 
            many reports with the same state may have been generated.</para>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> is <see cref="F:System.Fabric.Health.HealthState.Ok" /> or 
            <see cref="F:System.Fabric.Health.HealthState.Error" />, returns the time at which the health state was last in <see cref="F:System.Fabric.Health.HealthState.Warning" />, 
            before transitioning to a different state. If the <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> has never been 
            <see cref="F:System.Fabric.Health.HealthState.Warning" />, the value will be System.DateTime.FromFileTimeUtc(0).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.DateTime" /> representing the last transition time (UTC) involving <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </value>
            <remarks>
            <para>The transition fields, <see cref="P:System.Fabric.Health.HealthEvent.LastOkTransitionAt"/>, <see cref="P:System.Fabric.Health.HealthEvent.LastWarningTransitionAt"/>, <see cref="P:System.Fabric.Health.HealthEvent.LastErrorTransitionAt"/> give the history of the health state transitions for the event.
            They can be used for smarter alerts or "historical" health event information. They enable scenarios such as:
            <list type="bullet">
                <item>
                    <para>Alert when a property has been at warning/error for more than X minutes.
                    This avoids alerts on temporary conditions. For example, an alert if the health state has been warning for more than five minutes can be translated into 
                    (HealthState == Warning and Now - LastWarningTransitionTime > 5 minutes).</para>
                </item>
                <item>
                    <para>Alert only on conditions that have changed in the last X minutes.
                    If a report was already at error before the specified time, it can be ignored because it was already signaled previously.</para>
                </item>
                <item>
                    <para>If a property is toggling between warning and error, determine how long it has been unhealthy (i.e. not OK). 
                    For example, an alert if the property hasn't been healthy for more than five minutes can be translated into (HealthState != Ok and Now - LastOkTransitionTime > 5 minutes).</para>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastErrorTransitionAt">
            <summary>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> is <see cref="F:System.Fabric.Health.HealthState.Error" />, returns 
            the time at which the health report was first reported with <see cref="F:System.Fabric.Health.HealthState.Error" />. For periodic reporting, many reports 
            with the same state may have been generated.</para>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> is <see cref="F:System.Fabric.Health.HealthState.Ok" /> or 
            <see cref="F:System.Fabric.Health.HealthState.Warning" />, returns the time at which the health state was last in <see cref="F:System.Fabric.Health.HealthState.Error" />, 
            before transitioning to a different state. If the <see cref="P:System.Fabric.Health.HealthInformation.HealthState" /> has never been 
            <see cref="F:System.Fabric.Health.HealthState.Error" />, the value will be System.DateTime.FromFileTimeUtc(0).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.DateTime" /> representing the last transition time (UTC) involving <see cref="F:System.Fabric.Health.HealthState.Error" />.</para>
            </value>
            <remarks>
            <para>The transition fields, <see cref="P:System.Fabric.Health.HealthEvent.LastOkTransitionAt"/>, <see cref="P:System.Fabric.Health.HealthEvent.LastWarningTransitionAt"/>, <see cref="P:System.Fabric.Health.HealthEvent.LastErrorTransitionAt"/> give the history of the health state transitions for the event.
            They can be used for smarter alerts or "historical" health event information. They enable scenarios such as:
            <list type="bullet">
                <item>
                    <para>Alert when a property has been at warning/error for more than X minutes.
                    This avoids alerts on temporary conditions. For example, an alert if the health state has been warning for more than five minutes can be translated into 
                    (HealthState == Warning and Now - LastWarningTransitionTime > 5 minutes).</para>
                </item>
                <item>
                    <para>Alert only on conditions that have changed in the last X minutes.
                    If a report was already at error before the specified time, it can be ignored because it was already signaled previously.</para>
                </item>
                <item>
                    <para>If a property is toggling between warning and error, determine how long it has been unhealthy (i.e. not OK). 
                    For example, an alert if the property hasn't been healthy for more than five minutes can be translated into (HealthState != Ok and Now - LastOkTransitionTime > 5 minutes).</para>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.HealthInformation">
            <summary>
            <para>Gets the health information that was sent to health store in a <see cref="T:System.Fabric.Health.HealthReport"/>.</para>
            </summary>
            <value>
            <para>The health information that was sent to health store in a <see cref="T:System.Fabric.Health.HealthReport"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.HealthEvent.ToString">
            <summary>
            Gets a string representation of the health event.
            </summary>
            <returns>A string representation of the health event.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthEventsFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.HealthEvent" /> objects.</para>
            </summary>
            <remarks>The filter can be used in health queries to filter which events are returned in entity health.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthEventsFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthEventsFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEventsFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthEventsFilter.HealthStateFilter">
            <summary>
            <para>DERECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent" /> entries in the 
            collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent" /> entries in the collection.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.HealthEventsFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthEventsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthInformation">
            <summary>
            <para>Represents common health report information.
            It is included in all health reports sent to the health store
            and in all health events returned by health queries.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthInformation.UnknownSequenceNumber">
            <summary>
            Unknown sequence number, which is an invalid sequence number that is not accepted by the health store.
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthInformation.AutoSequenceNumber">
            <summary>
            Auto sequence number, replaced with a valid sequence number by the health client.
            </summary>
            <remarks>When a health client receives a report with Auto sequence number,
            it replaces the auto sequence number with a valid sequence number.
            The sequence number is guaranteed to increase in the same process.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthInformation.#ctor(System.String,System.String,System.Fabric.Health.HealthState)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthInformation" /> class.</para>
            </summary>
            <param name="sourceId">
            <para>The source of the report. It cannot be <languageKeyword>null</languageKeyword> or empty.
            It can't start with "System.", which is reserved keyword for system components reporting.</para>
            </param>
            <param name="property">
            <para>The property of the report. It cannot be <languageKeyword>null</languageKeyword> or empty.</para>
            </param>
            <param name="healthState">
            <para>The health state of the report. Must be specified.
            Must be one of the <see cref="F:System.Fabric.Health.HealthState.Error" />, 
            <see cref="F:System.Fabric.Health.HealthState.Warning" /> or <see cref="F:System.Fabric.Health.HealthState.Ok" /> values.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="sourceId" /> cannot be <languageKeyword>null</languageKeyword>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="property" /> cannot be <languageKeyword>null</languageKeyword>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <paramref name="sourceId" /> cannot be empty.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <paramref name="property" /> cannot be empty.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Specified <paramref name="healthState" /> is not supported.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.HealthReportId">
            <summary>
            <para>The health report ID which uniquely identifies each type of health report.</para>
            </summary>
            <value>
            <para>This ID can be used to look up more details regarding a health report on aka.ms/sfhealthid.
            Only health reports sent by a Service Fabric system service will have an id which can be found 
            on the paged linked above. Not all reports will have a health report id. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SourceId">
            <summary>
            <para>Gets the source name which identifies the watchdog/system component 
            which generated the health information.</para>
            </summary>
            <value>
            <para>The source of the health report, which identifies the watchdog/system component that creates the report.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Property">
            <summary>
            <para>Gets the property of the health report.</para>
            </summary>
            <value>
            <para>The property of the health report. 
            Together with the <see cref="P:System.Fabric.Health.HealthInformation.SourceId"/>, it uniquely 
            identifies the health information.</para>
            </value>
            <remarks>
            <para>
            The property is a <see cref="T:System.String"/> and not a fixed enumeration to allow the reporter
            flexibility to categorize the state condition that triggers the report.
            For example, a reporter with <see cref="P:System.Fabric.Health.HealthInformation.SourceId"/> "A" can monitor the state of the available disk on a node,
            so it can report "AvailableDisk" property on that node.
            A reporter with <see cref="P:System.Fabric.Health.HealthInformation.SourceId"/> "B" can monitor the node connectivity, so it can report
            a property "Connectivity" on the same node.
            In the health store, these reports are treated as separate health events for the specified node.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.HealthState">
            <summary>
            <para>Gets the health state that describes the severity of the monitored condition used for reporting.</para>
            </summary>
            <value>
            <para>The health state that describes the severity of the monitored condition used for reporting.</para>
            </value>
            <remarks>
            <para>
            The accepted health states are <see cref="F:System.Fabric.Health.HealthState.Ok"/>,
            <see cref="F:System.Fabric.Health.HealthState.Warning"/> and <see cref="F:System.Fabric.Health.HealthState.Error"/>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Description">
            <summary>
            <para>Gets or sets the description of the health information. 
            It represents free text used to add human readable information about the monitored condition.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> which describes the health information in human readable form.</para>
            </value>
            <remarks>
            <para>The maximum string length for the description is 4096 characters.
            If the provided string is longer, it will be automatically truncated.
            When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is 4096 characters.
            The presence of the marker indicates to users that truncation occurred.
            Note that when truncated, the description has less than 4096 characters from the original string.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.TimeToLive">
            <summary>
            <para>Gets or sets how long the health report is valid. Must be larger than TimeSpan.Zero.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.TimeSpan" /> representing the time to live of the health report.</para>
            </value>
            <remarks><para>When clients report periodically, they should send reports 
            with higher frequency than time to live.
            If clients report on transition, they can set the time to live to infinite.</para>
            <para>When time to live expires, the health event that contains the health information
            is either removed from health store, if <see cref="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired"/> is 
            <languageKeyword>true</languageKeyword> or evaluated at error, if <see cref="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired"/> is <languageKeyword>false</languageKeyword>.
            </para></remarks>
            <exception cref="T:System.ArgumentException">
            <para>The specified value was invalid. Please provide a duration that is larger than 0.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired">
            <summary>
            <para>Gets or sets a value that indicates whether the report is removed from health store when it expires. 
            If set to <languageKeyword>false</languageKeyword>, the 
            report is treated as an error when expired. <languageKeyword>false</languageKeyword> by default.</para>
            </summary>
            <value>
            <para>
            <languageKeyword>true</languageKeyword> if the report should be removed from health store when expired;
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks><para>When clients report periodically, they should set <see cref="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired"/> <languageKeyword>false</languageKeyword> (default).
            This way, is the reporter has issues (eg. deadlock) and can't report, 
            the entity is evaluated at error when the health report
            expires, and this will flag the entity as <see cref="F:System.Fabric.Health.HealthState.Error"/>.
            Periodic health clients should send reports 
            with higher frequency than time to live to account for delays due to health client batching, 
            message transport delays over the wire and health store processing.</para></remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SequenceNumber">
            <summary>
            <para>Gets or sets the sequence number associated with the health information,
            used by the health store for staleness detection.
            Must be greater than <see cref="F:System.Fabric.Health.HealthInformation.UnknownSequenceNumber" />.</para>
            </summary>
            <value>
            <para>The report sequence number associated with the health information.</para>
            </value>
            <remarks>
            <para>The report sequence number is used by health store to detect stale reports.
            </para>
            <para>Most of the times, the reporter doesn't need to specify the sequence number. The default value
            <see cref="F:System.Fabric.Health.HealthInformation.AutoSequenceNumber"/> can be used instead. When a health client receives a report with Auto sequence number,
            it generates a valid sequence number, which is guaranteed to increase in the same process.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthInformation.ToString">
            <summary>
            Creates a string description of the health information.
            </summary>
            <returns>String description of the health information.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthReport">
             <summary>
             <para>Represents the base class for health report classes.</para>
             </summary>
             <remarks>
             <para>Supported types of health reports are: 
            �<list type="bullet">
            �<item><description><see cref="T:System.Fabric.Health.ApplicationHealthReport"/></description></item>
            �<item><description><see cref="T:System.Fabric.Health.ClusterHealthReport"/></description></item>
            �<item><description><see cref="T:System.Fabric.Health.NodeHealthReport"/></description></item>
            �<item><description><see cref="T:System.Fabric.Health.PartitionHealthReport"/></description></item>
            �<item><description><see cref="T:System.Fabric.Health.ServiceHealthReport"/></description></item>
            �<item><description><see cref="T:System.Fabric.Health.StatelessServiceInstanceHealthReport"/></description></item>
            �<item><description><see cref="T:System.Fabric.Health.StatefulServiceReplicaHealthReport"/></description></item>
             </list>
             </para>
             <para>The report can be sent to the health store using
             <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</para>
             </remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthReport.#ctor(System.Fabric.Health.HealthReportKind,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthReport" /> class.</para>
            </summary>
            <param name="kind">
            <para>The kind of the health report. </para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, property, health state. Required.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.HealthReport.Kind">
            <summary>
            <para>Gets the kind of the health report.</para>
            </summary>
            <value>
            <para>The kind of the health report.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthReport.HealthInformation">
            <summary>
            <para>Gets the health information that describes common health fields.</para>
            </summary>
            <value>
            <para>The health information that describes common health fields.</para>
            </value>
            <remarks>The health information is persisted in the health store inside the <see cref="T:System.Fabric.Health.HealthEvent"/>.</remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthReportIds">
            <summary> 
            Use this class to define health report IDs 
            
            The same health report should have the same health report IDs.
            Health reports from native code are defined in ServiceModel/HealthReportId
            Please cross check with C++ definitions and the definitions in this file to ensure that different health reports do not use the same health report ID 
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportIds.DCAInsufficientSpace70">
            <summary>
            HealthReportIds to identify health reports uniquely
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportIds.DCADiskSpaceUsageIsAboveQuota">
            <summary>
            Health Report ID for DCA DiskSpaceUsageIsAboveQuota
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthReportSendOptions">
            <summary>
            <para>Represents the send options that are applied when sending a <see cref="T:System.Fabric.Health.HealthReport"/>.</para>
            </summary>
            <remarks>
            <para>The report can be sent to the health store using
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthReportSendOptions.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthReportSendOptions" /> class.</para>
            </summary>
            <remarks>By default, there are no send options set. The fabric client settings are used to determine when to send the report and when to retry send on failure.</remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthReportSendOptions.Immediate">
            <summary>
            Gets or sets the flag which indicates whether the report should be sent immediately.
            Defaults to false, in which case the report is sent per the fabric client health report related settings.
            </summary>
            <value>A flag which indicates whether the report should be sent immediately.</value>
            <remarks>
            <para>
            If <languageKeyword>true</languageKeyword>, the report is sent immediately, regardless of the
            <see cref="P:System.Fabric.FabricClientSettings.HealthReportSendInterval"/> configuration set on the health client.
            This is useful for critical reports that should be sent as soon as possible.
            Another scenario where this may be useful is if the client needs to be closed, for example because the host process is going down, and you need to increase the chances of the report being sent.
            Depending on timing and other conditions, sending the report may still fail, either because the client doesn't have time to send it before shutdown,
            or because the message is lost and the health client went down before it can retry.
            </para>
            <para>
            If <languageKeyword>false</languageKeyword>, the report is sent based on the health client settings, especially the
            <see cref="P:System.Fabric.FabricClientSettings.HealthReportSendInterval"/> configuration.
            </para>
            <para>
            By default, reports are not sent immediately.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing. 
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthReportKind">
            <summary>
            <para>Represents the health report kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Invalid">
            <summary>
            <para>Indicates that the health report kind is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.StatefulServiceReplica">
            <summary>
            <para>Indicates that the health report is for a stateful service replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.StatelessServiceInstance">
            <summary>
            <para>Indicates that the health report is for a stateless service instance.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Partition">
            <summary>
            <para>Indicates that the health report is for a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Node">
            <summary>
            <para>Indicates that the health report is for a node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Service">
            <summary>
            <para>Indicates that the health report is for a service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Application">
            <summary>
            <para>Indicates that the health report is for an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.DeployedApplication">
            <summary>
            <para>Indicates that the health report is for a deployed application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.DeployedServicePackage">
            <summary>
            <para>Indicates that the health report is for a deployed service package.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Cluster">
            <summary>
            <para>Indicates that the health report is for cluster.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthState">
            <summary>
            <para>Represents the health state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Invalid">
            <summary>
            <para>Indicates that the health state is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Ok">
            <summary>
            <para>Indicates that the health state is ok.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Warning">
            <summary>
            <para>Indicates that the health state is warning. There may something wrong that requires investigation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Error">
            <summary>
            <para>Indicates that the health state is error, there is something wrong that needs to be investigated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Unknown">
            <summary>
            <para>Indicates that the health state is unknown.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthStateChunkList`1">
            <summary>
            Represents a chunk list that contains a list of health state chunk items.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <remarks><para>The chunk list is obtained from queries that can potentially have more results than can fit a message. 
            Only the entries that fit are returned. The list included the total number of items that should have been returned if there was enough space.</para></remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.HealthStateChunkList`1"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.HealthStateChunkList`1"/> class with the items of another list.
            </summary>
            <param name="list">The list with items used to create the paged list.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.IndexOf(`0)">
            <summary>
            Gets the index in this list for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index in this list for the specified item. </returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into this list at the specified index.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from this list. 
            </summary>
            <param name="index">The index where the item will be removed.</param>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.TotalCount">
            <summary>
            Gets the total number of items to be returned in one or more messages.
            </summary>
            <value>The total number of items available in the system, out of which the current items were returned.</value>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Add(`0)">
            <summary>
            Adds an item to this list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Contains(`0)">
            <summary>
            Specifies whether the list contains a specific item.
            </summary>
            <param name="item">The item to search.</param>
            <returns>true if the list contains a specific item; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from this list to the specified array starting at the specified index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.Count">
            <summary>
            Gets or sets the number of items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.IsReadOnly">
            <summary>
            Gets or sets a flag that indicated whether the list can be modified.
            </summary>
            <value>Flag indicating whether the list can be modified.</value>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Remove(`0)">
            <summary>
            Removes the specified item from this list. 
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>true if the item is removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.ToString">
            <summary>
            Returns a string representation of the chunk list.
            </summary>
            <returns>A string representation of the chunk list.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="T:System.Fabric.Health.HealthStateChunkListHelper">
            <summary>
            Extensions for health state chunk list operations.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkListHelper.ToArray``1(System.Fabric.Health.HealthStateChunkList{``0})">
            <summary>
            Returns an array with the items in the chunk list.
            </summary>
            <typeparam name="T">The type of the list objects.</typeparam>
            <param name="list">The health state chunk list.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthStateCount">
            <summary>
            <para>Represents information about how many health entities are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>,
            and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateCount.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthStateCount" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthStateCount.OkCount">
            <summary>
            Gets the number of entities that are in health state <see cref="F:System.Fabric.Health.HealthState.Ok"/>.
            </summary>
            <value>
            The number of entities that are in health state <see cref="F:System.Fabric.Health.HealthState.Ok"/>.
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthStateCount.WarningCount">
            <summary>
            Gets the number of entities that are in health state <see cref="F:System.Fabric.Health.HealthState.Warning"/>.
            </summary>
            <value>
            The number of entities that are in health state <see cref="F:System.Fabric.Health.HealthState.Warning"/>.
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthStateCount.ErrorCount">
            <summary>
            Gets the number of entities that are in health state <see cref="F:System.Fabric.Health.HealthState.Error"/>.
            </summary>
            <value>
            The number of entities that are in health state <see cref="F:System.Fabric.Health.HealthState.Error"/>.
            </value>
        </member>
        <member name="M:System.Fabric.Health.HealthStateCount.ToString">
            <summary>
            Returns a string representation of the health state count.
            </summary>
            <returns>A string representation of the health state count.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthStateFilter">
            <summary>
            <para>Enumerates filters for parameters of type <see cref="T:System.Fabric.Health.HealthState" />. 
            This enumeration has a <see cref="T:System.FlagsAttribute" /> 
            that allows a bitwise combination of its member values.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Default">
            <summary>
            <para>Default value. Depending on usage, may match any <see cref="T:System.Fabric.Health.HealthState" /> or none.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.None">
            <summary>
            <para>Filter that doesn’t match any <see cref="T:System.Fabric.Health.HealthStateFilter" />. 
            Used in order to return no results on a given collection of states.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Ok">
            <summary>
            <para>Filter that matches input with value <see cref="F:System.Fabric.Health.HealthState.Ok" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Warning">
            <summary>
            <para>Filter that matches input with value <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Error">
            <summary>
            <para>Filter that matches input with value <see cref="F:System.Fabric.Health.HealthState.Error" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.All">
            <summary>
            <para>Filter that matches any <see cref="T:System.Fabric.Health.HealthState" />.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthStatistics">
            <summary>
            <para>
            Represents health statistics for an entity.
            It is returned as part of health queries results when the query descriptions
            are configured to include statistics.
            The statistics include health state counts for all children types of the current entity.
            For example, for cluster, the health statistics include health state counts for
            nodes, applications, services, partitions, replicas, deployed applications and deployed service packages.
            For partition, the health statistics include health counts for replicas.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStatistics.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthStatistics" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthStatistics.HealthStateCountList">
            <summary>
            Gets a list of <see cref="T:System.Fabric.Health.HealthStateCount"/> information for different entity kinds.
            </summary>
            <value>A list with <see cref="T:System.Fabric.Health.HealthStateCount"/> information for different entity kinds.</value>
            <remarks>
            <para>
            The list keeps track of how many children of the queried entity are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthStatistics.ToString">
            <summary>
            Returns a string representation of the health state count.
            </summary>
            <returns>A string representation of the health state count.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealth">
            <summary>
            <para>Describes the health of a node as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealth.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.NodeHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.NodeHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.NodeHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthReport">
            <summary>
            <para>Represents a health report to be applied on the node health entity. 
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthReport.#ctor(System.String,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.NodeHealthReport" /> class.</para>
            </summary>
            <param name="nodeName">
            <para>The node name. Can’t be null or empty.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, 
            property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>Node name can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Health information can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Node name can’t be empty.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthReport.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthState">
            <summary>
            <para>Represents the health state of a node, which contains the node identifier and its aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthState.NodeName">
            <summary>
            <para>Gets the name of the node.</para>
            </summary>
            <value>
            <para>The name of the node.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthState.ToString">
            <summary>
            Creates a string description of the node health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.NodeHealthState"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateChunk">
            <summary>
            Represents a node health state chunk, which contains basic health information about the node.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateChunk.NodeName">
            <summary>
            Gets the node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the node, computed based on all reported health events and the cluster health policy.
            </summary>
            <value>The aggregated health state of the node.</value>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateChunk.ToString">
            <summary>
            Creates a string description of the node health state chunk.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.NodeHealthStateChunk"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.NodeHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.NodeHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.NodeHealthState" /> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.IndexOf(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>The index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Insert(System.Int32,System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Add(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Contains(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.CopyTo(System.Fabric.Health.NodeHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Remove(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.NodeHealthState"/> objects.
            </summary>
            <remarks>The cluster health state chunk queries can specify a list of node filters to fine-grain
            select the nodes that should be included in the query result.
            Note that all the nodes are used to evaluate cluster aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            For a node to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateFilter.NodeNameFilter">
            <summary>
            Gets or sets the node name filter.
            </summary>
            <value>The node name filter.</value>
            <remarks>If not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
            Otherwise, the filter only applies to the specfied node.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.NodeHealthState" /> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ClusterHealthQueryDescription"/>
            to specify which node children of the cluster should be returned as part of <see cref="T:System.Fabric.Health.ClusterHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.NodeHealthStatesFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState" /> entries in 
            the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState" /> entries in the collection. 
            Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a node, 
            containing information about the data and the algorithm used by health store to 
            evaluate health. 
            The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthEvaluation.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the node. 
            The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for nodes, 
            containing health evaluations for each unhealthy node that impacted current aggregated 
            health state. Can be returned when evaluating cluster health and the aggregated health state is either 
            <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations 
            that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy nodes from the <see cref="T:System.Fabric.Health.ClusterHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of nodes in the health store.</para>
            </summary>
            <value>
            <para>The total number of nodes in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodeTypeHealthPolicyMap">
            <summary>
            <para>
            Defines a map with max percentages unhealthy nodes for specific node types. 
            </para>
            </summary>
            <remarks>The node type health policy map can be used during cluster health evaluation
            to describe special node types. The node types included in the map are evaluated against the percentage
            included in the map, and also with the global <see cref="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes"/>.
            The nodes of node types specified in the map are also counted against the 
            global pool of nodes; they are independent checks</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeTypeHealthPolicyMap.#ctor">
            <summary>
            <para>
            Instantiates an <see cref="T:System.Fabric.Health.NodeTypeHealthPolicyMap" /> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeTypeHealthPolicyMap.Add(System.String,System.Byte)">
            <summary>
            <para>
            Adds an entry in the map for a specific node type, with max percent unhealthy nodes as value.
            </para>
            </summary>
            <param name="nodeTypeName">
            <para>The node type name.</para>
            </param>
            <param name="value">
            <para>The max percent unhealthy nodes allowed for the node type. Must be between 0 and 100.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified percentage value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Health.NodeTypeHealthPolicyMap.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.NodeTypeHealthPolicyMap"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.NodeTypeHealthPolicyMap"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeTypeNodesHealthEvaluation">
            <summary>
            <para>
            Represents health evaluation for nodes of an node type.
            </para>
            </summary>
            <remarks>
            <para>The node type nodes evaluation can be returned when 
            cluster health evaluation returns unhealthy aggregated health state, 
            either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.
            It contains health evaluations for each unhealthy node 
            of the included node type that impacted current aggregated health state.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.NodeTypeNodesHealthEvaluation.NodeTypeName">
            <summary>
            <para>
            Gets the node type name.
            </para>
            </summary>
            <value>
            <para>The node type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodeTypeNodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>
            Gets the list of unhealthy evaluations that led to the aggregated health state.
            </para>
            </summary>
            <value>
            <para>The list of unhealthy evaluations for the specified node type.</para>
            </value>
            <remarks> Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation" /> of this node type that impacted the aggregated health.</remarks>
        </member>
        <member name="P:System.Fabric.Health.NodeTypeNodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            <para>
            Gets the maximum allowed percentage of unhealthy nodes for the node type, specified as an entry in 
            <see cref="T:System.Fabric.Health.NodeTypeHealthPolicyMap" />.
            </para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes for the node type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodeTypeNodesHealthEvaluation.TotalCount">
            <summary>
            <para>
            Gets the total number of nodes of the node type found in the health store.
            </para>
            </summary>
            <value>
            <para>The total number of nodes of the node type.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealth">
            <summary>
            <para>Describes health of a partition as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealth.PartitionId">
            <summary>
            <para>Gets the partition ID, which uniquely identifies the partition.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealth.ReplicaHealthStates">
            <summary>
            <para>Gets the replica health states for the current partition as found in the health store.</para>
            </summary>
            <value>
            <para>The replicas of the current partition as found in the health store.</para>
            </value>
            <para>Only replicas that respect the <see cref="P:System.Fabric.Description.PartitionHealthQueryDescription.ReplicasFilter"/> (if specified) are returned. 
            If the input filter is not specified, all replicas are returned.</para>
            <para>All replicas are evaluated to determine the partition aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealth.HealthStatistics">
            <summary>
            Gets the partition health statistics, which contain information about how many replicas are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            </summary>
            <value>The partition health statistics.</value>
            <remarks>
            <para>
            The partition health statistics contain information about how many replicas are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            It can be null or empty if the query that returns the <see cref="T:System.Fabric.Health.PartitionHealth"/>
            specified <see cref="T:System.Fabric.Health.PartitionHealthStatisticsFilter"/> to exclude health statistics.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.PartitionHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.PartitionHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthReport">
            <summary>
            <para>Represents a health report to be applied on a partition health entity. 
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthReport.#ctor(System.Guid,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthReport" /> class.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID. Required.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, property, 
            health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthReport.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthState">
            <summary>
            <para>Represents the health state of a partition, which contains the partition identifier and its aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthState.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthState.ToString">
            <summary>
            Creates a string description of the partition health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.PartitionHealthState"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateChunk">
            <summary>
            Represents a partition health state chunk, which contains basic health information about the partition.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.PartitionHealthStateChunk"/>.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.PartitionId">
            <summary>
            Gets the partition id.
            </summary>
            <value>The partition id.</value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.HealthState">
            <summary>
            Gets the partition aggregated health state, computed based on all reported health events, the replica children and the application health policy.
            </summary>
            <value>The aggregated health state of the partition.</value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.ReplicaHealthStateChunks">
            <summary>
            Gets the list of the partition replica health state chunks that respect the input filters.
            </summary>
            <value>The list of the partition replica health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all replicas that have health state error.
            Regardless of filter value, all children are used to compute partition aggregated health.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunk.ToString">
            <summary>
            Creates a string description of the partition health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.PartitionHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.PartitionHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.PartitionHealthState" /> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.IndexOf(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32" /> which represents the index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Insert(System.Int32,System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Health.PartitionHealthState" /> at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Add(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Contains(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.CopyTo(System.Fabric.Health.PartitionHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Remove(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.PartitionHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of partition filters to fine-grain
            select the partitions that should be included in the query result.
            Note that all the partitions are used to evaluate parents' aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            For a partition to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.PartitionIdFilter">
            <summary>
            Gets or sets the partition id filter.
            </summary>
            <value>The partition id filter.</value>
            <remarks>If not specified, all partitions that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the partition identified by the partition id. All the other filter members, like health state filter and replicas filter, are applied to this partition.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.ReplicaFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> to be applied to the replica children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> to be applied to the replica children health states.</value>
            <remarks>All replica children that match the filter will be returned as children of the partition.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.PartitionHealthState" /> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ServiceHealthQueryDescription"/>
            to specify which partition children should be returned as part of <see cref="T:System.Fabric.Health.ServiceHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthStatesFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState" /> entries 
            in the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState" /> entries in the collection. 
            The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStatisticsFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.HealthStatistics" />.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.PartitionHealthQueryDescription"/>
            to specify whether the health statistics should be returned as part of <see cref="T:System.Fabric.Health.PartitionHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStatisticsFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthStatisticsFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStatisticsFilter.ExcludeHealthStatistics">
            <summary>
            Gets or sets a flag that indicates whether the health statistics should be included in query result.
            </summary>
            <value>A flag that indicates whether the health statistics should be included in query result.</value>
            <remarks>
            <para>
            If ExcludeHealthStatistics is set to <languageKeyword>true</languageKeyword>, the health statistics are not returned as part of the query result.
            Otherwise, the query result includes the partition health statistics, which contains information about how many replicas are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            Defaults to <languageKeyword>false</languageKeyword>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStatisticsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for the partitions of a service, 
            containing health evaluations for each unhealthy partition 
            that impacts current aggregated health state. 
            Can be returned when evaluating service health and the aggregated health state is 
            either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.PartitionHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionsHealthEvaluation.MaxPercentUnhealthyPartitionsPerService">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy partitions per service from the <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy partitions per service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of partitions of the service from the health store.</para>
            </summary>
            <value>
            <para>The total number of partitions of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a partition, 
            containing information about the data and the algorithm used by health store 
            to evaluate health. The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthEvaluation.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the partition. 
            The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.ReplicasHealthEvaluation" /> or <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealth">
            <summary>
            <para>Describes the health of a stateful service replica or a stateless service instance as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealth.Kind">
            <summary>
            <para>Gets the kind of the replica, either stateless or stateful. Based on this, the replica health can be converted to either 
            <see cref="T:System.Fabric.Health.StatefulServiceReplicaHealth" /> or <see cref="T:System.Fabric.Health.StatelessServiceInstanceHealth" />.</para>
            </summary>
            <value>
            <para>The service kind, which indicates whether the replica is stateful or stateless.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealth.PartitionId">
            <summary>
            <para>Gets the partition identifier.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealth.Id">
            <summary>
            <para>Gets the stateful replica ID or the stateless service instance ID.</para>
            </summary>
            <value>
            <para>The stateful replica ID or stateless instance ID.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.ReplicaHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ReplicaHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthState">
            <summary>
            <para>Represents a base class for stateful service replica or stateless service instance health state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthState.#ctor(System.Fabric.Query.ServiceKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ReplicaHealthState" /> class.</para>
            </summary>
            <param name="kind">The service kind, which shows whether the service is stateful or stateless.</param>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthState.Kind">
            <summary>
            <para>Gets the kind of the service replica.</para>
            </summary>
            <value>
            <para>The service replica kind.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthState.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthState.ToString">
            <summary>
            Creates a string description of the replica health state.
            </summary>
            <returns>String description of the health state.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthState.Id">
            <summary>
            <para>Gets the stateful replica ID or stateless service instance ID.</para>
            </summary>
            <value>
            <para>The replica or instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateChunk">
            <summary>
            Represents a replica health state chunk, which contains basic health information about the replica.
            It is included as child of a partition.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ReplicaHealthStateChunk"/>.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the replica, computed based on all reported health events and the application health policy.
            </summary>
            <value>The aggregated health state of the replica.</value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateChunk.ReplicaOrInstanceId">
            <summary>
            Gets the replica id or the instance id, depending on the service kind.
            </summary>
            <value>The replica id or the instance id, depending on the service kind.</value>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunk.ToString">
            <summary>
            Creates a string description of the replica health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.ReplicaHealthState" /> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.IndexOf(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32" /> which represents the index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Insert(System.Int32,System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Health.ReplicaHealthState" /> at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Add(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Contains(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.CopyTo(System.Fabric.Health.ReplicaHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Remove(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ReplicaHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ReplicaHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ReplicaHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of replica filters to fine-grain
            select the replicas that should be included in the query result.
            Note that all the replicas are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            For a replica to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateFilter.ReplicaOrInstanceIdFilter">
            <summary>
            Gets or sets the stateful service replica id or the stateless instance id filter.
            </summary>
            <value>The stateful service replica id or the stateless instance id filter.</value>
            <remarks>If not specified, all replicas that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the replica identified by the given id.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.ReplicaHealthState" /> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.PartitionHealthQueryDescription"/>
            to specify which replica children should be returned as part of <see cref="T:System.Fabric.Health.PartitionHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ReplicaHealthStatesFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState" /> entries in 
            the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </summary>
            <value>
            <para> The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState" /> entries in the 
            collection. The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a replica, 
            containing information about the data and the algorithm used by health store to 
            evaluate health. The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthEvaluation.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the replica. The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthEvaluation.ReplicaOrInstanceId">
            <summary>
            <para>Gets the stateful service replica ID or the stateless service instance ID.</para>
            </summary>
            <value>
            <para>The replica or instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicasHealthEvaluation">
            <summary>
            <para>Represents health evaluation for replicas,
            containing health evaluations for each unhealthy replica that impacted current 
            aggregated health state.
            Can be returned when evaluating partition health and the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicasHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ReplicaHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicasHealthEvaluation.MaxPercentUnhealthyReplicasPerPartition">
            <summary>
            <para>Gets the maximum allowed percentage of 
            unhealthy replicas per partition from the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy replicas per partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicasHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of replicas in the partition from the health store.</para>
            </summary>
            <value>
            <para>The total number of replicas in the partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealth">
            <summary>
            <para>Describes the health of a service as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealth.ServiceName">
            <summary>
            <para>Gets the service name which uniquely identifies the service health entity.</para>
            </summary>
            <value>
            <para>The service name which uniquely identifies the service health entity.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealth.PartitionHealthStates">
            <summary>
            <para>Gets partition health states for the current service.</para>
            </summary>
            <value>
            <para>The partition health states for the current service.</para>
            </value>
            <remarks>
            <para>Only partitions that respect the <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.PartitionsFilter"/> (if specified) are returned. 
            If the input filter is not specified, all partitions are returned.</para>
            <para>All partitions are evaluated to determine the service aggregated health.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealth.HealthStatistics">
            <summary>
            Gets the service health statistics, which contain information about how many partitions and replicas are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            </summary>
            <value>The service health statistics.</value>
            <remarks>
            <para>
            The service health statistics contain information about how many partitions and replicas are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            It can be null or empty if the query that returns the <see cref="T:System.Fabric.Health.ServiceHealth"/>
            specified <see cref="T:System.Fabric.Health.ServiceHealthStatisticsFilter"/> to exclude health statistics.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealth.ToString">
            <summary>
            Gets a string representation of the <see cref="T:System.Fabric.Health.ServiceHealth"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ServiceHealth"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthReport">
            <summary>
            <para>Represents a health report to be applied on a service health entity.
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthReport.#ctor(System.Uri,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.ServiceHealthReport" />.</para>
            </summary>
            <param name="serviceName">
            <para>The service name. Required.</para>
            </param>
            <param name="healthInformation">
            <para>The HealthInformation which describes the report fields, like sourceId, property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthReport.ServiceName">
            <summary>
            <para>Gets the name of the service.</para>
            </summary>
            <value>
            <para>The name of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthState">
            <summary>
            <para>Represents the health state of a service, which contains the service identifier and its aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthState.ServiceName">
            <summary>
            <para>Gets the service name.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthState.ToString">
            <summary>
            Creates a string description of the service health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.ServiceHealthState"/>.</returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateChunk">
            <summary>
            Represents a service health state chunk, which contains basic health information about the service.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ServiceHealthStateChunk"/>.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.ServiceName">
            <summary>
            Gets the service name, which uniquely identifies the service.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the service, computed based on all reported health events, its children and the application health policy.
            </summary>
            <value>The aggregated health state of the service.</value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.PartitionHealthStateChunks">
            <summary>
            Gets the list of the service partition health state chunks that respect the input filters.
            </summary>
            <value>The list of the partition health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all partitions that have health state error.
            Regardless of filter value, all children are used to compute service aggregated health.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunk.ToString">
            <summary>
            Creates a string description of the service health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ServiceHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ServiceHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.ServiceHealthState" /> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.IndexOf(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>The index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Health.ServiceHealthState" /> at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Add(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Contains(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Remove(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ServiceHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of service filters to fine-grain
            select the services that should be included in the query result.
            Note that all the services are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            For a service to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.ServiceNameFilter">
            <summary>
            Gets or sets the service name filter.
            </summary>
            <value>The service name filter.</value>
            <remarks>If not specified, all services that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the specified service. All the other filter members, like health state filter, are applied to this service.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.PartitionFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> to be applied to the partition children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> to be applied to the partition children health states.</value>
            <remarks>The list can contain one default partition filter and/or partition filters for specific partitions to fine-grain entities returned by the query.
            All partition children that match the filter will be returned as children of the service.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStatesFilter">
            <summary>
            <para>Represents filter for <see cref="T:System.Fabric.Health.ServiceHealthState" /> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/>
            to specify which service children should be returned as part of <see cref="T:System.Fabric.Health.ApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ServiceHealthStatesFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState" /> entries in the collection. </para>
            </summary>
            <value>
            <para>The value of the filter. The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter" />.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStatisticsFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.HealthStatistics" />.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ServiceHealthQueryDescription"/>
            to specify whether the health statistics should be returned as part of <see cref="T:System.Fabric.Health.ServiceHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStatisticsFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ServiceHealthStatisticsFilter" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStatisticsFilter.ExcludeHealthStatistics">
            <summary>
            Gets or sets a flag that indicates whether the health statistics should be included in query result.
            </summary>
            <value>A flag that indicates whether the health statistics should be included in query result.</value>
            <remarks>
            <para>
            If ExcludeHealthStatistics is set to <languageKeyword>true</languageKeyword>, the health statistics are not returned as part of the query result.
            Otherwise, the query result includes the service health statistics, which contains information about how many partitions and replicas are in
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, <see cref="F:System.Fabric.Health.HealthState.Warning"/>, and <see cref="F:System.Fabric.Health.HealthState.Error"/> state.
            Defaults to <languageKeyword>false</languageKeyword>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStatisticsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a service,
            containing information about the data and the algorithm used by health store to 
            evaluate health.
            The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthEvaluation.ServiceName">
            <summary>
            <para>Gets the service name.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the service. The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.PartitionsHealthEvaluation" /> or <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServicesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for services of a certain service type belonging to an application,
            containing health evaluations for 
            each unhealthy service that impacted current aggregated health state.
            Can be returned when evaluating application health and the aggregated 
            health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.ServiceTypeName">
            <summary>
            <para>Gets the service type name.</para>
            </summary>
            <value>
            <para>The service type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ServiceHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.MaxPercentUnhealthyServices">
            <summary>
            <para>Gets the maximum allowed percentage of 
            unhealthy services from the <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy services.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of services of the current service type in the application from the health store.</para>
            </summary>
            <value>
            <para>The total number of services of the current service type in the specified application.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceTypeHealthPolicy">
            <summary>
            <para>Represents the health policy used to evaluate the health of services belonging to a service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceTypeHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy" /> class.</para>
            </summary>
            <remarks>By default, no errors or warnings are tolerated.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceTypeHealthPolicy.MaxPercentUnhealthyServices">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy services.</para>
            </summary>
            <value>
            <para>Returns the maximum allowed percentage of unhealthy services. 
            Allowed values are <see cref="T:System.Byte" /> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
            <remarks>
            <para>
            The percentage represents the maximum tolerated percentage of services that can be unhealthy 
            before the application is considered in error. If the percentage is respected but there is at least one unhealthy service,
            the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy services of the specific service type 
            over the total number of services of the specific service type.
            The computation rounds up to tolerate one failure on small numbers of services. Default percentage: zero.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceTypeHealthPolicy.MaxPercentUnhealthyPartitionsPerService">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy partitions per service.</para>
            </summary>
            <value>
            <para>Returns the maximum allowed percentage of unhealthy partitions per service.
            Allowed values are <see cref="T:System.Byte" /> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
            <remarks>
            <para>
            The percentage represents the maximum tolerated percentage of partitions that can be unhealthy 
            before the service is considered in error. If the percentage is respected but there is at least one unhealthy partition,
            the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service.
            The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage: zero.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceTypeHealthPolicy.MaxPercentUnhealthyReplicasPerPartition">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy replicas per partition.</para>
            </summary>
            <value>
            <para>Returns the maximum allowed percentage of unhealthy replicas per partition.
            Allowed values are <see cref="T:System.Byte" /> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
            <remarks>
            <para>
            The percentage represents the maximum tolerated percentage of replicas that can be unhealthy 
            before the partition is considered in error. If the percentage is respected but there is at least one unhealthy replica,
            the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition.
            The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage: zero.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceTypeHealthPolicy.ToString">
            <summary>
            Gets a string representation of the service type health policy.
            </summary>
            <returns>A string representation of the service type health policy.</returns>
        </member>
        <member name="T:System.Fabric.Health.StatefulServiceReplicaHealth">
            <summary>
            <para>Describes the health of a stateful service replica as returned by
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealth.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatefulServiceReplicaHealthReport">
            <summary>
            <para>Represents a health report to be applied on a stateful service replica health entity.
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.StatefulServiceReplicaHealthReport.#ctor(System.Guid,System.Int64,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.StatefulServiceReplicaHealthReport" />.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="replicaId">
            <para>The replica ID.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, 
            property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealthReport.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealthReport.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatefulServiceReplicaHealthState">
            <summary>
            <para>Represents the health state of the stateful service replica, which contains the replica is and the aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealthState.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatelessServiceInstanceHealth">
            <summary>
            <para>Describes the health of a stateless instance as returned by
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealth.InstanceId">
            <summary>
            <para>Gets the instance ID of the stateless service instance.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatelessServiceInstanceHealthReport">
            <summary>
            <para>Represents a health report to be applied on a stateless service health entity.
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.StatelessServiceInstanceHealthReport.#ctor(System.Guid,System.Int64,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.StatelessServiceInstanceHealthReport" />.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="instanceId">
            <para>The instance ID.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation" /> which describes the report fields, like sourceId, property, 
            health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealthReport.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealthReport.InstanceId">
            <summary>
            <para>Gets the instance ID.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatelessServiceInstanceHealthState">
            <summary>
            <para>Represents the health state of a stateless service instance health entity, which contains the instance id and the aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealthState.InstanceId">
            <summary>
            <para>Gets the instance ID.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.SystemApplicationHealthEvaluation">
            <summary>
            <para>Represents health evaluation for the fabric:/System application,
            containing information about the data and the algorithm used by health 
            store to evaluate health. The evaluation is returned only when the aggregated health state of the cluster is either 
            <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.SystemApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the system application. The types of the 
            unhealthy evaluations can be <see cref="T:System.Fabric.Health.DeployedApplicationsHealthEvaluation" />, 
            <see cref="T:System.Fabric.Health.ServicesHealthEvaluation" /> or <see cref="T:System.Fabric.Health.EventHealthEvaluation" />.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation">
            <summary>
            <para>Represents health evaluation for delta unhealthy cluster nodes in an upgrade domain, containing health evaluations for each 
            unhealthy node that impacted current aggregated health state.
            Can be returned during cluster upgrade when cluster aggregated health 
            state is <see cref="F:System.Fabric.Health.HealthState.Error" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.UpgradeDomainName">
            <summary>
            <para>Gets the name of the upgrade domain where nodes health is currently evaluated.</para>
            </summary>
            <value>
            <para>The upgrade domain name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.BaselineErrorCount">
            <summary>
            <para>Gets the number of upgrade domain nodes with aggregated heath state 
            <see cref="F:System.Fabric.Health.HealthState.Error" /> in 
            the health store at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>The number of upgrade domain nodes with aggregated heath state 
            <see cref="F:System.Fabric.Health.HealthState.Error" /> in the 
            health store at the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.BaselineTotalCount">
            <summary>
            <para>Gets the total number of upgrade domain nodes in the health store
            at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>T he total number of upgrade domain nodes in the health store
            at the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the current total number of upgrade domain nodes in the health store.</para>
            </summary>
            <value>
            <para>The current total number of upgrade domain nodes in the health store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.MaxPercentUpgradeDomainDeltaUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of upgrade domain delta unhealthy nodes
            from the <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of upgrade domain delta unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for deployed applications of an application in an upgrade domain,
            containing health evaluations for 
            each unhealthy deployed application that impacted current aggregated health state.
            </para>
            </summary>
            <remarks>Can be returned when evaluating application health 
            during cluster or application upgrade and the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</remarks>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.UpgradeDomainName">
            <summary>
            <para>Gets the name of the upgrade domain where the application health is currently evaluated.</para>
            </summary>
            <value>
            <para>The upgrade domain name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.DeployedApplicationHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations 
            that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.MaxPercentUnhealthyDeployedApplications">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy deployed applications
            from the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy deployed applications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of deployed applications of the current application
            in the current upgrade domain.</para>
            </summary>
            <value>
            <para>The total number of deployed applications of the current application
            in the current upgrade domain.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for cluster nodes in an upgrade domain,
            containing health evaluations for each unhealthy node that 
            impacted current aggregated health state.
            Can be returned when evaluating cluster health during cluster upgrade and the aggregated health 
            state is either <see cref="F:System.Fabric.Health.HealthState.Error" /> or <see cref="F:System.Fabric.Health.HealthState.Warning" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.UpgradeDomainName">
            <summary>
            <para>Gets the name of the upgrade domain where nodes health is currently evaluated.</para>
            </summary>
            <value>
            <para>The upgrade domain name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation" /> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy nodes from the <see cref="T:System.Fabric.Health.ClusterHealthPolicy" />.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>The total number of nodes in the current upgrade domain.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ICodePackageActivationContext">
            <summary>
            Represents activation context for the Service Fabric activated service.
            </summary>
            <remarks>Includes information from the service manifest as well as information
            about the currently activated code package like work directory, context id etc.</remarks>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.CodePackageAddedEvent">
            <summary>
            Event raised when new <see cref="T:System.Fabric.CodePackage"/> is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.CodePackageRemovedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.CodePackage"/> is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.CodePackageModifiedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.CodePackage"/> in the service manifest is modified.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.ConfigurationPackageAddedEvent">
            <summary>
            Event raised when new <see cref="T:System.Fabric.ConfigurationPackage"/> is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.ConfigurationPackageRemovedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.ConfigurationPackage"/> is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.ConfigurationPackageModifiedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.ConfigurationPackage"/> in the service manifest is modified.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.DataPackageAddedEvent">
            <summary>
            Event raised when new <see cref="T:System.Fabric.DataPackage"/> is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.DataPackageRemovedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.DataPackage"/> is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.DataPackageModifiedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.DataPackage"/> in the service manifest is modified.
            </summary>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.WorkDirectory">
            <summary>
            Gets the path to the Work directory that the application can use.
            </summary>
            <value>The path to the code package Work directory.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.LogDirectory">
            <summary>
            Gets the path to the Log directory that the application can use.
            </summary>
            <value>The path to the code package Log directory.</value>
            <remarks>If you have specified a parameter name Log in LogicalDirectories section of ClusterManifest 
            then the returned path is a symbolic link to the parameter value.
            for ex: if <LogicalDirectory LogicalDirectoryName="Log" MappedTo="F:\Log" /> is specified then 
            the returned path to LogDirectory will be a symbolic link to F:\Log\NodeId\ApplicationType_ApplicationVersion</remarks>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.TempDirectory">
            <summary>
            Gets the path to the Temp directory that the application can use.
            </summary>
            <value>The path to the code package Temp directory.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.ContextId">
            <summary>
            Gets the context id.
            </summary>
            <value>The context id.</value>
            <remarks>The context id is the same for all code packages in the same service manifest.</remarks>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.CodePackageName">
            <summary>
            Gets the name of the fabric activated code package.
            </summary>
            <value>The name of the fabric activated code package.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.CodePackageVersion">
            <summary>
            Gets the version of the fabric activated code package.
            </summary>
            <value>The version of the fabric activated code package.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.ApplicationName">
            <summary>
            Gets the application name.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.ApplicationTypeName">
            <summary>
            Gets the application type name.
            </summary>
            <value>The name of the application type.</value>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceTypes">
            <summary>
            Retrieves the list of Service types in the service manifest.
            </summary>
            <returns>The list of service types in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceGroupTypes">
            <summary>
            Retrieves the list of Service Group types in the service manifest.
            </summary>
            <returns>The list of Service Group types in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetApplicationPrincipals">
            <summary>
            Retrieves the principals defined in the application manifest.
            </summary>
            <returns>The principals defined in the application manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetEndpoints">
            <summary>
            Retrieves the endpoint resources in the service manifest.
            </summary>
            <returns>The endpoint resources in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetEndpoint(System.String)">
            <summary>
            Retrieves the endpoint resource with a given name from the service manifest.
            </summary>
            <param name="endpointName">The name of the endpoint.</param>
            <returns>The endpoint resource with the specified name.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetCodePackageNames">
            <summary>
            Retrieves the list of code package names in the service manifest.
            </summary>
            <returns>The list of code package names in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetConfigurationPackageNames">
            <summary>
            Retrieves the list of configuration package names in the service manifest.
            </summary>
            <returns>The list of configuration package names in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetDataPackageNames">
            <summary>
            Retrieves the list of data package names in the service manifest.
            </summary>
            <returns>The list of data package names in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetCodePackageObject(System.String)">
            <summary>
            Returns the <see cref="T:System.Fabric.CodePackage"/> object from Service Package that matches the desired package name.
            </summary>
            <param name="packageName">The name of the code package.</param>
            <returns>The <see cref="T:System.Fabric.CodePackage"/> object from Service Package that matches the desired package name.</returns>
            /// <remarks>Throws KeyNotFoundException exception if the package is not found.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetConfigurationPackageObject(System.String)">
            <summary>
            Returns the <see cref="T:System.Fabric.ConfigurationPackage"/> object from Service Package that matches the desired package name.
            </summary>
            <param name="packageName">The name of the configuration package.</param>
            <returns>The <see cref="T:System.Fabric.ConfigurationPackage"/> object from Service Package that matches the desired package name.</returns>
            <remarks>Throws KeyNotFoundException exception if the package is not found.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetDataPackageObject(System.String)">
            <summary>
            Returns the <see cref="T:System.Fabric.DataPackage"/> object from Service Package that matches the desired package name.
            </summary>
            <param name="packageName">The name of the data package.</param>
            <returns>The <see cref="T:System.Fabric.DataPackage"/> object from Service Package that matches the desired package name.</returns>
            /// <remarks>Throws KeyNotFoundException exception if the package is not found.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceManifestName">
            <summary>
            Retrieves the name of the service manifest.
            </summary>
            <returns>The name of the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceManifestVersion">
            <summary>
            Retrieves the version of the service manifest.
            </summary>
            <returns>The version of the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.ReportApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current application. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.ReportApplicationHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health for current application. 
            Specifies options to control how the report is sent.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.ReportDeployedApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed application. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.ReportDeployedApplicationHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health for current deployed application. 
            Specifies options to control how the report is sent.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.ReportDeployedServicePackageHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed service package. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.ReportDeployedServicePackageHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health for current deployed service package. 
            Specifies send options that control how the report is sent to the health store.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.ICodePackageActivationContext2">
            <summary>
            Represents activation context for the Service Fabric activated service.
            </summary>
            <remarks>Includes information from the service manifest as well as information
            about the currently activated code package like work directory, context id etc.</remarks>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext2.ServiceListenAddress">
            <summary>
            <para>The address at which the service should start the communication listener.</para>
            </summary>
            <value>
            <para>The address at which the service should start the communication listener.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext2.ServicePublishAddress">
            <summary>
            <para>The address which the service should publish as the listen address.</para>
            </summary>
            <value>
            <para>The address which the service should publish as the listen address.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ICodePackageActivationContext3">
            <summary>
            Represents activation context for the Service Fabric activated service.
            </summary>
            <remarks>Includes information from the service manifest as well as information
            about the currently activated code package like work directory, context id etc.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext3.GetDirectory(System.String)">
            <summary>
            Retrieves the path to sub directory inside the work directory with the name "logicalDirectoryName".
            </summary>
            <returns>The path to sub directory with name logicalDirectoryName inside work directory</returns>
            <remarks>Throws an exception if logicalDirectoryName is not found under work directory.
            Otherwise will return directory path WorkDirectory\logicalDirectoryName which is a symbolic link to 
            directory specified with Name under LogicalDirectories Section of ClusterManifest.
            for example: if you have specified <LogicalDirectory LogicalDirectoryName="Foo" MappedTo="D:\\Foo" /> and call to this method
            with directoryName "Foo" will return you path WorkDirectory\Foo. Any writes made to returned path will go to D:\Foo\NodeId\ApplicationType_ApplicationVersion.
            This method is case insensitive so even if you say directoryName foo it will still return you directory path WorkDirectory\Foo.</remarks>
        </member>
        <member name="T:System.Fabric.CodePackageActivationContext">
            <summary>
            <para>Represents the activation which contains information about a running code package in a Service Fabric application.</para>
            <para>The <see cref="M:System.Fabric.FabricRuntime.GetActivationContext"/> and <see cref="M:System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)"/> methods can be used to get an instance of the activation context.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Finalize">
            <summary>
            <para>
            Performs cleanup operations on unmanaged resources held by the current object before the object is destroyed.
            </para>
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageAdded">
            <summary>
            Raised when a new code package is added to the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.CodePackageAddedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageRemoved">
            <summary>
            Raised when the code package is removed from the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.CodePackageRemovedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageModified">
            <summary>
            Raised when an existing code package is modified in the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.CodePackageModifiedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageAdded">
            <summary>
            Raised when a new configuration package is added to the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageAddedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageRemoved">
            <summary>
            Raised when a configuration package is removed from the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageRemovedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageModified">
            <summary>
            Raised when a configuration package is modified in the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageModifiedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageAdded">
            <summary>
            Raised when a data package is added to the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.DataPackageAddedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageRemoved">
            <summary>
            Raised when a data package is removed from the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.DataPackageRemovedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageModified">
            <summary>
            Raised when a data package is modified in the service manifest.
            </summary>
            <remarks>Obsolete. Use <see cref="E:System.Fabric.CodePackageActivationContext.DataPackageModifiedEvent"/> instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageAddedEvent">
            <summary>
            Raised during an application upgrade when a new code package is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageRemovedEvent">
            <summary>
            Raised during an application upgrade when a code package is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageModifiedEvent">
            <summary>
            Raised during an application upgrade when an existing code package is modified in the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageAddedEvent">
            <summary>
            Raised during an application upgrade when a new configuration package is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageRemovedEvent">
            <summary>
            Raised during an application upgrade when a configuration package is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageModifiedEvent">
            <summary>
            Raised during an application upgrade when a configuration package is modified in the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageAddedEvent">
            <summary>
            Raised during an application upgrade when a data package is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageRemovedEvent">
            <summary>
            Raised during an application upgrade when a data package is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageModifiedEvent">
            <summary>
            Raised during an application upgrade when a data package is modified in the service manifest.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.WorkDirectory">
            <summary>
            <para>Gets the path to the Work directory that the application can use to store data. For example: the state of the replicas.</para>
            </summary>
            <value>
            <para>The path to the Work directory.</para>
            </value>        
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.LogDirectory">
            <summary>
            <para>Gets the path to the log directory that the application can use.</para>
            </summary>
            <value>
            <para>The path to the application logs directory.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.TempDirectory">
            <summary>
            <para>Gets the path to the Temp directory that the Application can use for temporary files.</para>
            </summary>
            <value>
            <para>The path to the Temp directory.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ContextId">
            <summary>
            <para>Gets the ID that represents the service package name qualified with Application package name.</para>
            </summary>
            <value>
            <para>The context ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageName">
            <summary>
            <para>Gets the name of the fabric activated code package.</para>
            </summary>
            <value>
            <para>The name of the fabric activated code package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageVersion">
            <summary>
            <para>Gets the version of the fabric activated code package</para>
            </summary>
            <value>
            <para>The version of the fabric activated code package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationTypeName">
            <summary>
            <para>Gets the name of the application type.</para>
            </summary>
            <value>
            <para>The name of the application type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ServiceListenAddress">
            <summary>
            <para>The address at which the service should start the communication listener.</para>
            </summary>
            <value>
            <para>The address at which the service should start the communication listener.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ServicePublishAddress">
            <summary>
            <para>The address which the service should publish as the listen address.</para>
            </summary>
            <value>
            <para>The address which the service should publish as the listen address.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.NativeActivationContext">
            <summary>
            The native activation context
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceTypes">
            <summary>
            <para>Retrieves the list of service types in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of service types.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceGroupTypes">
            <summary>
            <para>Retrieves the list of service group types in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of Service Group types in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetApplicationPrincipals">
            <summary>
            <para>Retrieves all the principals defined in the application manifest.</para>
            </summary>
            <returns>
            <para>The principals defined in the application manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoints">
            <summary>
            <para>Retrieves all the end points in the service manifest.</para>
            </summary>
            <returns>
            <para>The end points in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageNames">
            <summary>
            <para>Retrieves the list of code package names in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of code package names in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageNames">
            <summary>
            <para>Retrieves the list of configuration package names in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of configuration package names in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageNames">
            <summary>
            <para>Retrieves the list of data package names in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of data package names in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoint(System.String)">
            <summary>
            <para>Retrieves an <see cref="T:System.Fabric.Description.EndpointResourceDescription"/> by name.</para>
            </summary>
            <param name="endpointName">
            <para>The name of the endpoint.</para>
            </param>
            <returns>
            <para>The description of the endpoint with a specified name.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>endpointName is null or empty</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>The endpoint was not found in the service manifest.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageObject(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:System.Fabric.CodePackage"/> object by name.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package to find</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.CodePackage" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">The packageName was not found in the service manifest.</exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageObject(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:System.Fabric.ConfigurationPackage"/> object by name.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package to find</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.ConfigurationPackage" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">The packageName was not found in the service manifest.</exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageObject(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:System.Fabric.DataPackage"/> object by name.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package to find</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.DataPackage" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">The packageName was not found in the service manifest.</exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackage(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:System.Fabric.Description.CodePackageDescription"/> object by name.</para>
            <para>This method is obsolete. Use <see cref="M:System.Fabric.CodePackageActivationContext.GetCodePackageObject(System.String)"/>.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package to find</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Description.CodePackageDescription" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">The packageName was not found in the service manifest.</exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackage(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:System.Fabric.Description.ConfigurationPackageDescription"/> object by name.</para>
            <para>This method is obsolete. Use <see cref="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageObject(System.String)"/>.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package to find</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Description.ConfigurationPackageDescription" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">The packageName was not found in the service manifest.</exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackage(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:System.Fabric.Description.DataPackageDescription"/> by name.</para>
            <para>This method is obsolete. Use <see cref="M:System.Fabric.CodePackageActivationContext.GetDataPackageObject(System.String)"/>.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package to find</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Description.DataPackageDescription" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">The packageName was not found in the service manifest.</exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestName">
            <summary>
            <para>Retrieves the name of the service manifest.</para>
            </summary>
            <returns>
            <para>The name of the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestVersion">
            <summary>
            <para>Retrieves the version of the service manifest.</para>
            </summary>
            <returns>
            <para>The version of the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current application. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                <para>Caused by one of the following:</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The code package activation context uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.CodePackageActivationContext.ReportApplicationHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportApplicationHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health for current application.
            Specifies options to control how the report is sent.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                <para>Caused by one of the following:</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The code package activation context uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed application. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                <para>Caused by one of the following:</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The code package activation context uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.CodePackageActivationContext.ReportDeployedApplicationHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedApplicationHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health for current deployed application. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                <para>Caused by one of the following:</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The code package activation context uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedServicePackageHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed service package. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                <para>Caused by one of the following:</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The code package activation context uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.CodePackageActivationContext.ReportDeployedServicePackageHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedServicePackageHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health for current deployed service package. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
                <para>Caused by one of the following:</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
                <para>
                    <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The code package activation context uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDirectory(System.String)">
            <summary>
            Retrieves the directory path for the directory inside the work directory.
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Dispose">
            <summary>
            <para>
            Disposes of the code package activation context.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.PackageAddedEventArgs`1">
            <summary>
            <para>Describes a package added event. </para>
            </summary>
            <typeparam name="TPackage">
            <para>Type of the package being described. See <see cref="T:System.Fabric.CodePackage" />, <see cref="T:System.Fabric.ConfigurationPackage" />, <see cref="T:System.Fabric.DataPackage" />.</para>
            </typeparam>
            <remarks>
            <para>See <see cref="E:System.Fabric.CodePackageActivationContext.CodePackageAddedEvent" />, 
            <see cref="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageAddedEvent" />, and <see cref="E:System.Fabric.CodePackageActivationContext.DataPackageAddedEvent" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.PackageAddedEventArgs`1.#ctor">
            <summary>
            <para>Creates a new instance of the <see cref="T:System.Fabric.PackageAddedEventArgs`1" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.PackageAddedEventArgs`1.Package">
            <summary>
            <para>Gets or sets the code, data, or configuration package that was added to the Service Manifest.</para>
            </summary>
            <value>
            <para>The code, data, or configuration package that was added to the Service Manifest.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PackageRemovedEventArgs`1">
            <summary>
            <para>Describes a package removed event. </para>
            </summary>
            <typeparam name="TPackage">
            <para>The type of the package being described. See <see cref="T:System.Fabric.CodePackage" />, <see cref="T:System.Fabric.ConfigurationPackage" />, <see cref="T:System.Fabric.DataPackage" />.</para>
            </typeparam>
            <remarks>
            <para>See <see cref="E:System.Fabric.CodePackageActivationContext.CodePackageRemovedEvent" />, <see cref="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageRemovedEvent" />, and <see cref="E:System.Fabric.CodePackageActivationContext.DataPackageRemovedEvent" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.PackageRemovedEventArgs`1.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PackageRemovedEventArgs`1" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.PackageRemovedEventArgs`1.Package">
            <summary>
            <para>Gets or sets the code, configuration, or data package that was removed from the Service Manifest.</para>
            </summary>
            <value>
            <para>The code, configuration, or data package that was removed from the Service Manifest.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PackageModifiedEventArgs`1">
            <summary>
              Represents the event arguments for package modification.
            </summary>
            <typeparam name="TPackage">
              The type of the modified package.
            </typeparam>
        </member>
        <member name="M:System.Fabric.PackageModifiedEventArgs`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Fabric.PackageModifiedEventArgs`1"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.PackageModifiedEventArgs`1.OldPackage">
            <summary>
              Gets or sets the old package that is modified.
            </summary>
            <value>
            <para>The old package that is modified.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PackageModifiedEventArgs`1.NewPackage">
            <summary>
              Gets or sets the new package.
            </summary>
            <value>
            <para>The new package that replaces the old package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Hosting.IFabricHostEntryPoint.ActiveCodePackageCount">
            <summary>
            The number of code packages that are currently active
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Start(System.String,System.String,System.String,System.String)">
            <summary>
            Called when the object has been instantiated in its own app domain
            All internal initialization can be done here
            <param name="hostEntryPointManagerUniqueId">A unique identifier for the host entry point manager. Useful for creating trace file names etc</param>
            <param name="logDirectory">the log directory for this activation context</param>
            <param name="workDirectory">the work directory for this activation context</param>
            <param name="appDomainConfigFilePath">config file for appDomain</param>
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.ActivateCodePackage(System.String,System.String,System.IntPtr,System.IntPtr)">
            <summary>
            Activate a code package
            All service types associated with the code package should be registered at this point
            </summary>
            <param name="activationContextId">a unique identifier for this particular activation request. the same value will be passed into Deactivate</param>
            <param name="codePackageNameToActivate">the name of the code package to activate</param>
            <param name="nativeCodePackageActivationContext">the code package activation context as obtained from native code</param>
            <param name="nativeFabricRuntime">the raw IFabricRuntime that should be used for all operations pertaining to this code package</param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.DeactivateCodePackage(System.String)">
            <summary>
            Deactivate a code package
            The code package id is the same as passed in to the Activate call
            The same IFabricRuntime should be used to unregister the factory that was used in the activate call
            The IFabricRuntime should be released at this point
            </summary>
            <param name="activationContextId"></param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Stop">
            <summary>
            Called before the appdomain hosting this entrypoint is unloaded
            Any active code packages should now be unloaded
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IHostEntryPointManager.EndDeactivate(System.IntPtr,System.Int32@,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="appDomainId">the app domain id in which the context was running</param>
            <param name="codePackageDirectory">the directory of the code package for this activation context</param>
            <param name="workDirectory">the work directory for this activation context</param>
            <param name="asyncOperationContext">context for this deactivate async operation</param>
        </member>
        <member name="T:System.Fabric.ExecutionPolicyExecutionType">
            <summary>
            <para>For Internal use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ExecutionPolicyExecutionType.RunAlways">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ExecutionPolicyExecutionType.RunToCompletion">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.ExecutionPolicyRestartPolicy">
            <summary>
            <para>For Internal use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ExecutionPolicyRestartPolicy.Always">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ExecutionPolicyRestartPolicy.OnFailure">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ExecutionPolicyRestartPolicy.Never">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.ExecutionPolicyDescription">
            <summary>
            <para>For Internal use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ExecutionPolicyDescription.#ctor(System.Fabric.ExecutionPolicyExecutionType,System.Fabric.ExecutionPolicyRestartPolicy)">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.ExecutionPolicyDescription.ExecutionType">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.ExecutionPolicyDescription.RestartPolicy">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="T:System.Fabric.FabricRuntime">
            <summary>
            <para>Allows user created hosts to obtain their <see cref="T:System.Fabric.CodePackageActivationContext" />, well as to register the
            necessary service factories [ <see cref="T:System.Fabric.IStatelessServiceFactory" />, <see cref="T:System.Fabric.IStatefulServiceFactory" />, or
            <see cref="T:System.Fabric.ServiceGroupFactory" />] or service types directly.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRuntime.#ctor(System.Fabric.CodePackageActivationContext,System.Action)">
            <summary>
            Called by FabricRuntime.Create
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetActivationContext">
            <summary>
            <para>Retrieves the current <see cref="T:System.Fabric.FabricRuntime" />’s <see cref="T:System.Fabric.CodePackageActivationContext" />.</para>
            </summary>
            <returns>
            <para>The activation context.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieves the current <see cref="T:System.Fabric.FabricRuntime" />’s <see cref="T:System.Fabric.CodePackageActivationContext" /> asynchronously
            with the specified <paramref name="timeout" /> and <paramref name="cancellationToken" />.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetCodePackageActivator">
            <summary>
            <para>This is for internal use only.</para>
            </summary>
            <returns>
            <para>The codepackage activator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetCodePackageActivatorAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>This is for internal use only.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetNodeContext">
            <summary>
            <para>Gets the Node Context object that contains information about Fabric Node. </para>
            </summary>
            <returns>
            <para>The node context.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetNodeContextAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to send a notification that
            the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.Create">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object.</para>
            </summary>
            <returns>
            <para>A newly created <see cref="T:System.Fabric.FabricRuntime" /> object.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.Create(System.Action)">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object with a specified callback function which will be executed if the
            underlying runtime terminates or exits for any reason.</para>
            </summary>
            <param name="fabricExitCallback">
            <para>The Action to be executed when the runtime exits or terminates.</para>
            </param>
            <returns>
            <para>A newly created <see cref="T:System.Fabric.FabricRuntime" />object.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.CreateAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object asynchronously with the specified <paramref name="timeout" /> and
            <paramref name="cancellationToken" />.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.CreateAsync(System.Action,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object asynchronously with the specified callback function which will be executed
            if the underlying runtime terminates or exits for any reason, <paramref name="timeout" />, and <paramref name="cancellationToken" />. </para>
            </summary>
            <param name="fabricExitCallback">
            <para>The Action to be executed when the runtime exits or terminates.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that the
            operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceType(System.String,System.Type)">
            <summary>
            <para>Associates the specified <paramref name="serviceTypeName" /> with the actual managed Type that implements it. </para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or
            the CreateService command.</para>
            </param>
            <param name="serviceTypeImplementation">
            <para>The qualified service Type that implements the specified <paramref name="serviceTypeName" />.</para>
            </param>
            <remarks>
            <para>Note that this mechanism for service type registration does not require a custom <see cref="T:System.Fabric.IStatelessServiceFactory" /> or
            <see cref="T:System.Fabric.IStatefulServiceFactory" /> to be provided at registration time.  Service Fabric will generate one at runtime and utilize
            it automatically.  If there is a need for a custom implementation of the factory, you can implement <see cref="T:System.Fabric.IStatelessServiceFactory" />
            or <see cref="T:System.Fabric.IStatefulServiceFactory" /> and then provide those via the corresponding factory registration methods
            (<see cref="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" /> or <see cref="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" />)</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.IStatelessServiceFactory" /> for the specified service type.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or the
            CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatelessServiceFactory" /> which can create the specified service type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.IStatefulServiceFactory" /> for the specified service type.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests
            and/or the CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatefulServiceFactory" /> which can create the specified service type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceGroupFactory(System.String,System.Fabric.ServiceGroupFactory)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.ServiceGroupFactory" /> for the specified type.</para>
            </summary>
            <param name="serviceGroupTypeName">
            <para>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in the
            manifests and/or the CreateServiceGroup command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.ServiceGroupFactory" /> which can create the specified service group type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceTypeAsync(System.String,System.Type,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously associates the specified serviceTypeName with the actual managed Type that implements it, with the specified <paramref name="timeout" />
            and <paramref name="cancellationToken" /></para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests
            and/or the CreateService command.</para>
            </param>
            <param name="serviceTypeImplementation">
            <para>The qualified service Type that implements the specified <paramref name="serviceTypeName" />.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that the
            operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously registers the specified <see cref="T:System.Fabric.IStatelessServiceFactory" /> for the specified service type, with the
            specified <paramref name="timeout" /> and <paramref name="cancellationToken" /></para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests
            and/or the CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatelessServiceFactory" /> which can create the specified service type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.IStatefulServiceFactory" /> for the specified service type with the specified
            <paramref name="timeout" /> and <paramref name="cancellationToken" />.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests
            and/or the CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatefulServiceFactory" /> which can create the specified service type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync(System.String,System.Fabric.ServiceGroupFactory,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously registers the specified <see cref="T:System.Fabric.ServiceGroupFactory" /> for the specified service group type with the
            specified <paramref name="timeout" /> and <paramref name="cancellationToken" />.</para>
            </summary>
            <param name="serviceGroupTypeName">
            <para>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in
            the manifests and/or the CreateServiceGroup command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.ServiceGroupFactory" /> which can create the specified service group type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to send a notification that the
            operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.Dispose">
            <summary>
            <para>Disposes of the <see cref="T:System.Fabric.FabricRuntime" />.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.FabricWorkerEntryPoint">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricWorkerEntryPoint.#ctor">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricWorkerEntryPoint.Activate(System.Fabric.FabricRuntime,System.Fabric.CodePackageActivationContext)">
            <summary>
            <para> Reserved for future use.</para>
            </summary>
            <param name="runtime">
            <para>Reserved for future use.</para>
            </param>
            <param name="activationContext">
            <para>Reserved for future use.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricWorkerEntryPoint.Deactivate">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IStatefulServiceFactory">
            <summary>
            <para>Represents a stateful service factory that is responsible for creating replicas of a specific type of stateful service. 
            Stateful service factories are registered with the <see cref="T:System.Fabric.FabricRuntime" /> by service hosts via 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)" /> or 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStatefulServiceFactory.CreateReplica(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            <para>Called by Service Fabric to create a stateful service replica for a particular service.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type that Service Fabric requests to be created.</para>
            </param>
            <param name="serviceName">
            <para>The fabric:/ name (Uri) of the service with which this replica is associated.</para>
            </param>
            <param name="initializationData">
            <para>A byte array that contains the initialization data which was originally passed as a part of this 
            service’s <see cref="T:System.Fabric.Description.ServiceDescription" />.</para>
            </param>
            <param name="partitionId">
            <para>The partition ID of type, a GUID, with which this replica is associated.</para>
            </param>
            <param name="replicaId">
            <para>The replica ID of type long for this replica. </para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IStatefulServiceReplica" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IStatelessServiceFactory">
            <summary>
            <para>Represents a stateless service factory that is responsible for creating instances of a specific type of stateless service. </para>
            </summary>
            <remarks>
            <para>Stateless service factories are registered with the <see cref="T:System.Fabric.FabricRuntime" /> by service hosts via 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)" /> or 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServiceFactory.CreateInstance(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            <para>Creates a stateless service instance for a particular service. This method is called by Service Fabric.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type that Service Fabric requests to be created.</para>
            </param>
            <param name="serviceName">
            <para>The <c>fabric:/ name</c> (Uri) of the service with which this replica is associated. </para>
            </param>
            <param name="initializationData">
            <para>A byte array that contains the initialization data which was originally passed as a part of this service’s <see cref="T:System.Fabric.Description.ServiceDescription" />.</para>
            </param>
            <param name="partitionId">
            <para>The partition ID (GUID) with which this replica is associated. </para>
            </param>
            <param name="instanceId">
            <para>The replica ID for this replica of type <see cref="T:System.Int64" />.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IStatelessServiceInstance" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.PackageSharingPolicyScope">
            <summary>
            <para>Represents the scope for the <see cref="T:System.Fabric.PackageSharingPolicy" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.None">
            <summary>
            <para>No package sharing policy scope.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.All">
            <summary>
            <para>Share all code, config and data packages from corresponding service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.Code">
            <summary>
            <para>Share all code packages from corresponding service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.Config">
            <summary>
            <para>Share all config packages from corresponding service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.Data">
            <summary>
            <para>Share all data packages from corresponding service manifest</para>
            </summary>
        </member>
        <member name="T:System.Fabric.PackageSharingPolicy">
            <summary>
            <para>Represents a policy for the package sharing.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicy.#ctor(System.String,System.Fabric.PackageSharingPolicyScope)">
            <summary>
            <para>
            Creates PackageSharingPolicy object.
            </para>
            </summary>
            <param name="packageName">
            <para>Name of specific package that should be shared. </para>
            </param>
            <param name="sharingScope">
            <para>PackageSharingPolicyScope parameter to indicate whether Code, Config, Data or All packages should be shared. </para>
            </param>
        </member>
        <member name="P:System.Fabric.PackageSharingPolicy.PackageName">
            <summary>
            <para>Gets the name of code, configuration or data package that should be shared.</para>
            </summary>
            <value>
            <para>The name of code, configuration or data package that should be shared.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PackageSharingPolicy.SharingScope">
            <summary>
            <para>Gets the scope for package sharing policy.</para>
            </summary>
            <value>
            <para>The scope for package sharing policy.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PackageSharingPolicyList">
            <summary>
            <para>Represents a list of PackageSharingPolicy objects.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicyList.#ctor">
            <summary>
            <para>Initializes A new instance of the <see cref="T:System.Fabric.PackageSharingPolicyList" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicyList.#ctor(System.Collections.Generic.IList{System.Fabric.PackageSharingPolicy})">
            <summary>
            <para>Initializes A new instance of the <see cref="T:System.Fabric.PackageSharingPolicyList" /> class.</para>
            </summary>
            <param name="packageSharingPolicies">
            <para>The collection of policies for sharing packages.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PackageSharingPolicyList.PackageSharingPolicies">
            <summary>
            <para>Gets the collection of policies for sharing packages.</para>
            </summary>
            <value>
            <para>The collection of policies for sharing packages.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ServiceGroupFactory">
            <summary>
            <para>Creates a service group factory that is used to create actual service groups from the provided type factories at runtime.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.#ctor">
            <summary>
            <para>Creates an empty <see cref="T:System.Fabric.ServiceGroupFactory" /> object.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.AddServiceType(System.String,System.Type)">
            <summary>
            <para>Registers a particular stateful or stateless service type with the service group factory so that it can be created as 
            a member of the service group.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name as a string. It should match the service type that is specified in the manifest or 
            the <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" /> of the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> 
            that is provided during the <see cref="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)" /> call.</para>
            </param>
            <param name="serviceTypeImplementation">
            <para>The fully qualified C# type of the service that implements the Service Fabric service.</para>
            </param>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.AddStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)">
            <summary>
            <para>Adds the specified stateless service factory to the service group factory.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name as a string. It should match the service type that is specified in the manifest 
            or the <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" /> of the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> 
            that is provided during the <see cref="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)" /> call.</para>
            </param>
            <param name="factory">
            <para>The stateless service factory to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.AddStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)">
            <summary>
            <para>Adds the specified stateful service factory to the service group factory.</para>
            </summary>
            <param name="serviceTypeName">
            <para>Indicates the service type name as a string. It should match the service type that is specified in the manifest or 
            the <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription" /> of the <see cref="T:System.Fabric.Description.ServiceGroupDescription" /> that 
            is provided during the <see cref="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)" /> call.</para>
            </param>
            <param name="factory">
            <para>The stateful service factory to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.RemoveServiceFactory(System.String)">
            <summary>
            <para>Removes the service factory.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name as a string. It should match the service type that was specified when the factory was registered. </para>
            </param>
        </member>
        <member name="T:System.Fabric.ServiceContext">
            <summary>
            The service context that the service is operating under.
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceContext.#ctor(System.Fabric.NodeContext,System.Fabric.ICodePackageActivationContext,System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.ServiceContext"/> class.
            </summary>
            <param name="nodeContext">The node context, which contains information about the node
            where the stateless service instance is running.</param>
            <param name="codePackageActivationContext">The code package activation context,
            which contains information from the service manifest and the currently activated code package,
            like work directory, context ID etc.</param>
            <param name="serviceTypeName">The service type name.</param>
            <param name="serviceName">The service name.</param>
            <param name="initializationData">The service initialization data,
            which represents custom initialization data provided by the creator of the service.</param>
            <param name="partitionId">The partition ID.</param>
            <param name="replicaOrInstanceId">The replica or instance ID.</param>
        </member>
        <member name="P:System.Fabric.ServiceContext.NodeContext">
            <summary>
            Gets the node context with information about the node where the service replica is instantiated.
            </summary>
            <value>The node context for the node where the service replica or instance is instantiated.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.CodePackageActivationContext">
            <summary>
            <para>
            Gets the code package activation context,
            which contains information from the service manifest and the currently activated code package,
            like work directory, context ID etc.</para>
            </summary>
            <value>The code package activation context.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.ServiceTypeName">
            <summary>
            Gets the service type name.
            </summary>
            <value>The service type name.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.ServiceName">
            <summary>
            Get the service name.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.InitializationData">
            <summary>
            Gets the initialization data of the service.
            </summary>
            <value>The initialization data.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.PartitionId">
            <summary>
            Gets the partition ID.
            </summary>
            <value>The partition ID.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.ReplicaOrInstanceId">
            <summary>
            Gets the stateful service replica ID or the stateless service instance ID.
            </summary>
            <value>The stateful service replica ID or the stateless service instance ID.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.TraceId">
            <summary>
            Gets the trace ID of the service.
            </summary>
            <value>The trace ID of the service.</value>
            <remarks>The trace ID can be used as an identifier for generated traces.</remarks>
        </member>
        <member name="P:System.Fabric.ServiceContext.ListenAddress">
            <summary>
            <para>The address at which the service should start the communication listener.</para>
            </summary>
            <value>
            <para>The address at which the service should start the communication listener.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceContext.PublishAddress">
            <summary>
            <para>The address which the service should publish as the listen address.</para>
            </summary>
            <value>
            <para>The address which the service should publish as the listen address.</para>
            </value>
        </member>
        <member name="T:System.Fabric.StatefulServiceContext">
            <summary>
            Represents the service context that the stateful service is operating under.
            </summary>
        </member>
        <member name="P:System.Fabric.StatefulServiceContext.ReplicaId">
            <summary>
            Gets the stateful service replica ID.
            </summary>
            <value>The stateful service replica ID.</value>
        </member>
        <member name="M:System.Fabric.StatefulServiceContext.#ctor(System.Fabric.NodeContext,System.Fabric.ICodePackageActivationContext,System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.StatefulServiceContext"/> class.
            </summary>
            <param name="nodeContext">The node context, which contains information about the node
            where the stateless service instance is running.</param>
            <param name="codePackageActivationContext">The code package activation context,
            which contains information from the service manifest and the currently activated code package,
            like work directory, context ID etc.</param>
            <param name="serviceTypeName">The service type name.</param>
            <param name="serviceName">The service name.</param>
            <param name="initializationData">The service initialization data, 
            which represents custom initialization data provided by the creator of the service.</param>
            <param name="partitionId">The partition ID.</param>
            <param name="replicaId">The replica ID.</param>
        </member>
        <member name="T:System.Fabric.StatelessServiceContext">
            <summary>
            The service context that the stateless service is operating under.
            </summary>
        </member>
        <member name="P:System.Fabric.StatelessServiceContext.InstanceId">
            <summary>
            Gets the stateless service instance ID.
            </summary>
            <value>The stateless service instance ID.</value>
        </member>
        <member name="M:System.Fabric.StatelessServiceContext.#ctor(System.Fabric.NodeContext,System.Fabric.ICodePackageActivationContext,System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.StatelessServiceContext"/> class.
            </summary>
            <param name="nodeContext">The node context, which contains information about the node
            where the stateless service instance is running.</param>
            <param name="codePackageActivationContext">The code package activation context,
            which contains information from the service manifest and the currently activated code package,
            like work directory, context ID etc.</param>
            <param name="serviceTypeName">The service type name.</param>
            <param name="serviceName">The service name.</param>
            <param name="initializationData">The service initialization data, 
            which represents custom initialization data provided by the creator of the service.</param>
            <param name="partitionId">The partition ID.</param>
            <param name="instanceId">The instance ID.</param>
        </member>
        <member name="T:System.Fabric.CodePackageActivationInformation">
            <summary>
            <para>For Internal use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationInformation.#ctor(System.String,System.Fabric.ExecutionPolicyDescription)">
            <summary>
            <para>For Internal use.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationInformation.CodePackageName">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationInformation.ExecutionPolicy">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="T:System.Fabric.CodePackageActivator">
            <summary>
            <para>Represents the activator for the codepackages in the service package. This is for internal use only</para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivator.ActivateCodePackageAsync(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivator.ActivateCodePackageAsync(System.Collections.Generic.IList{System.Fabric.CodePackageActivationInformation},System.Collections.Generic.IDictionary{System.String,System.String},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivator.DeactivateCodePackageAsync(System.Collections.Generic.IList{System.String},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivator.AbortCodePackage(System.Collections.Generic.IList{System.String})">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivator.CodePackageEvent">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.CodePackageActivator.CodePackageEventArgs">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivator.CodePackageEventArgs.eventDescription">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivator.Finalize">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivator.Dispose">
            <summary>
            <para>
            For Internal only
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.CodePackageEventDescription">
            <summary>
            <para>For Internal use.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageEventDescription.CodePackageName">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageEventDescription.IsSetupEntryPoint">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageEventDescription.IsContainerHost">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageEventDescription.EventType">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageEventDescription.TimeStampInTicks">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageEventDescription.SequenceNumber">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageEventDescription.Properties">
            <summary>
            For Internal use.
            </summary>
        </member>
        <member name="T:System.Fabric.CodePackageEventType">
            <summary>
            <para>For Internal use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.Invalid">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.Failed">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.Started">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.Ready">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.Health">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.Stopped">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.Terminated">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.CodePackageEventType.RanToCompletion">
            <summary>
            <para>
            For Internal use
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreConstants">
            <summary>
            Location for common constants;
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreConstants.FabricNodeSection">
            <summary>The FabricNode section name</summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreConstants.WorkingDirKey">
            <summary>The WorkingDir property name</summary>
        </member>
        <member name="T:System.Fabric.ImageStore.ExceptionHandler">
            <summary>
            Helper class to figure out what type of exception is being dealt with.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ExceptionHandler.IsFatalException(System.Exception)">
            <summary>
            Returns whether an exception is considered fatal and the process should exit.
            The function should be used only if all other expected known exceptions are caught before.
            </summary>
            <remarks>
            The function probably doesn't include all possible fatal exceptions.
            Therefore it is necesarry to report a Warning/Error to HealthStore if IsFatalException returns false for further investigation and bug fixes.
            If function returns true, consider to report Error to HealthStore that can cause the whole node to be restarted.
            DISCUSS ANY CHANGE TO THIS FUNCTION with owners of files where the function is used.  Adding or removing a fatal exception can cause services to stop working properly.
            </remarks>
            <param name="e">The exception being checked.</param>
            <returns>True if the exception is fatal, false otherwise</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.ExceptionHandler.IsIOException(System.Exception)">
            <summary>
            Returns whether an exception was thrown by an IO specific operation or not.
            </summary>
            <param name="e">The exception being checked.</param>
            <returns>True if the exception is fatal, false otherwise.</returns>
        </member>
        <member name="T:System.Fabric.ImageStore.FileImageStore">
            <summary>
            Implements a file share based image store.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FileImageStore.SchemeTag">
            <summary>
            The tag for file image store scheme.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FileImageStore.storeParams">
            <summary>
            This store keeps the parameters for the store.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FileImageStore.rootUri">
            <summary>
            The root URI of the store.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.#ctor(System.String,System.String,System.Fabric.ImageStore.ImageStoreAccessDescription)">
            <summary>
            Initializes a new instance of the FileImageStore class.
            </summary>
            <param name="uri">The root URI (the root folder) of the image store.</param>
            <param name="localRoot">The default path for the file image store root.</param>
            <param name="accessDescription">Access rights to specific users or groups.</param>
        </member>
        <member name="P:System.Fabric.ImageStore.FileImageStore.RootUri">
            <summary>
            Gets the root URI of the store.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.IsFileStoreUri(System.String)">
            <summary>
            Checks whether the URI is of the file store.
            </summary>
            <param name="imageStoreUri">The URI of the image store.</param>
            <returns>True if the URI is of a file store and false otherwise.</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.UploadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads the local source content to the image store at the remote destination.
            </summary>
            <param name="storeDestination"> Location relative to RootUri where the content needs to be uploaded. </param>
            <param name="localSource"> Physical location of the source. </param>
            <param name="timeout"> Upload timeout. </param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.UploadContent(System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads the local source content to the image store at the remote destination.
            </summary>
            <param name="storeDestination"> Location relative to RootUri where the content needs to be uploaded. </param>
            <param name="localSource"> Physical location of the source. </param>
            <param name="handler">The image store progress handler which is not supported at the file image store</param>
            <param name="timeout"> Upload timeout. </param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.UploadContentAsync(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads the local source content to the image store at the remote destination.
            </summary>
            <param name="storeDestination">Location relative to RootUri where the content needs to be uploaded.</param>
            <param name="localSource">Local location of the source.</param>
            <param name="timeout"> The timeout for performing the uploading operation.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.CopyContent(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads the local source content to the image store at the remote destination.
            </summary>
            <param name="storeSource"> Location (relative to RootUri) from where to download the content. </param>
            <param name="storeDestination"> Location relative to RootUri where the content needs to be uploaded. </param>
            <param name="timeout">The timeout for copy content operation.</param>
            <param name="skipFiles">Files that do not need to be copied.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten</param>
            <param name="checkMarkFile">Flag the specified the checkmark file.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.CopyContentAsync(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Copies file image store content internally
            </summary>
            <param name="storeSource">The relative path of source file image store to be copied from.</param>
            <param name="storeDestination">The relative path of destination file image store content to be copied to.</param>
            <param name="timeout">The timeout for performing the copying operation.</param>
            <param name="skipFiles">The list of the files names to be skipped for copying.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="checkMakeFile">Indicates whether to check mark file during copying.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.DownloadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the image store to local destination.
            </summary>
            <param name="storeSource"> Location (relative to RootUri) from where to download the content. </param>
            <param name="localDestination"> Physical location where to download the content. </param>
            <param name="copyFlag">Copy control information to specify how file can be overwritten</param>
            <param name="timeout">Download timeout</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.DownloadContent(System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the file image store to local destination.
            </summary>
            <param name="storeSource">The relative path of source file image store to be downloaded from.</param>
            <param name="localDestination">The local destination path to download the content.</param>
            <param name="handler">The image store progress handler which is not supported at the file image store.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.DownloadContentAsync(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the file image store to local destination.
            </summary>
            <param name="storeSource">The relative path of source file image store to be downloaded from.</param>
            <param name="localDestination">The local destination path to download the content.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListContent(System.String,System.TimeSpan)">
            <summary>
            All files at the given folder
            </summary>
            <param name="storeSource">Location (relative to root)</param>
            <param name="timeout">List timeout</param>
            <returns>File name of each files within the given location</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListPagedContent(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets the paged image store relative paths.
            Not currently supported for file image store.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListContentAsync(System.String,System.TimeSpan)">
            <summary>
            Get the paged image store relative paths.
            </summary>
            <param name="storeSource">The relative path to file or folder from image store root.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListPagedContentAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Get the image store content paged information which is not supported at the file image store
            </summary>
            <param name="listDescription">The information on how to get image store content</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListContentWithDetails(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Get the image store content information including all files and subfolders 
            </summary>
            <param name="storeSource">The relative path to file or folder from image store root</param>
            <param name="isRecursive">flag list subhierarchy</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns>ImageStoreContent object including files and subfolders</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListPagedContentWithDetails(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Get the paged image store content information 
            Currently no implementation and has not been supported at the file image store
            </summary>
            <param name="listDescription">The information how to get image store content</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListContentWithDetailsAsync(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Get the file image store content including all files and subfolders
            </summary>
            <param name="storeSource">Location (relative to root)</param>
            <param name="isRecursive">flag list subhierarchy</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ListPagedContentWithDetailsAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Get the paged image store content information.
            Currently no implementation and has not been supported at the file image store
            </summary>
            <param name="listDescription">The information how to get image store content</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.DoesContentExist(System.String,System.TimeSpan)">
            <summary>
            Check if content is present in the store.
            </summary>
            <param name="tag"> Location (relative to RootUri) where to check the presence of the content. </param>
            <param name="timeout">Check existence timeout</param>
            <returns> True if the content exists, false otherwise. </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.DoesContentExistAsync(System.String,System.TimeSpan)">
            <summary>
            Check if content is present in the store.
            </summary>
            <param name="tag"> Location (relative to RootUri) where to check the presence of the content. </param>
            <param name="timeout">Check existence timeout</param>
            <returns> True if the content exists, false otherwise. </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.DeleteContent(System.String,System.TimeSpan)">
            <summary>
            Remove tag from store and clear the data associated with tag.
            </summary>
            <param name="tag">Location (relative to RootUri) from where to delete the content.</param>
            <param name="timeout">The timeout for performing the delete operation.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.DeleteContentAsync(System.String,System.TimeSpan)">
            <summary>
            Remove tag from store and clear data associated with tag.
            </summary>
            <param name="tag">Location (relative to RootUri) from where to delete the content.</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.ConvertTagToSMBPath(System.String)">
            <summary>
            Converts a tag to an SMB file path by combining the root with the tag.
            </summary>
            <param name="tag">The tag specifying the resource.</param>
            <returns>The path to the tag.</returns>
        </member>
        <member name="T:System.Fabric.ImageStore.FileImageStore.FileProviderParameters">
            <summary>
            The parameters for the file share.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FileImageStore.FileProviderParameters.imageStoreRootUri">
            <summary>
            This is the root URI of the provider.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FileImageStore.FileProviderParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileProviderParameters class.
            </summary>
            <param name="rootUri">The root URI of the file store.</param>
        </member>
        <member name="P:System.Fabric.ImageStore.FileImageStore.FileProviderParameters.RootUri">
            <summary>
            Gets the value of the root URI.
            </summary>
        </member>
        <member name="T:System.Fabric.ImageStore.FolderCopy">
            <summary>
            Class that implements a multi-threaded folder copy using threadpool
            TODO: implement copy flags:
                        AbortOnFirstError
                        OverwriteExisting
                        OverwriteOlderFiles
                        MirrorSource
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.NewExtension">
            <summary>
            Extension used while making mirror(atomic) copy.  
            Files are copied with extension .new, Old ones are renamed to .old
            and .new is then renamed back to the appropriate file name
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.OldExtension">
            <summary>
            Extension used while making mirror(atomic) copy.  
            Files are copied with extension .new, Old ones are renamed to .old
            and .new is then renamed back to the appropriate file name
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.ClassName">
            <summary>
            Component name used for logging trace records
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.MaxRetryAttempts">
            <summary>
            Number of attempts to try if there is a failure.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.Randomizer">
            <summary>
            Generates random sleep times between retries (e.g. if writing to a file failed)
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.copyFlag">
            <summary>
            Copy flag options
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.filterExtensions">
            <summary>
            File extensions to filter
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.workItemsInProgress">
            <summary>
            Keeps track of the number of items enqueued.  copy is done when this reverts to 0.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.asyncEvent">
            <summary>
            Event that is fired to let external users know when copy is complete.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.internalCopyAsyncEvent">
            <summary>
            This is used to trigger internal async copy is complete, we need this event to do post clean up
            task after last work item is done.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.failedItems">
            <summary>
            Keeps track of the number of items that weren't copied
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.skipCopy">
            <summary>
            Whether we skipped due to destination already existing
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.traceSource">
            <summary>
            Logger for logging folder copy statements.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.disposed">
            <summary>
            To handled object disposal correctly
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.#ctor">
            <summary>
            Initializes a new instance of the FolderCopy class. 
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.#ctor(System.Fabric.CopyFlag,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the FolderCopy class. Constructor that takes Copy flags and file extensions to be filterd out
             while copying
            </summary>
            <param name="flag">Flag specifying what type of copying needs to be done.</param>
            <param name="filterExtensions">The file extensions that need to be filtered.</param>
        </member>
        <member name="P:System.Fabric.ImageStore.FolderCopy.FailedToCopy">
            <summary>
            Gets the number of items that were not copied.
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.FolderCopy.AsyncWaitHandle">
            <summary>
            Gets the async wait handle.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.MoveFileWithRetry(System.String,System.String)">
            <summary>
            Renames/Moves tempSourceFilePath to destinationFilePath.
            Function retries if there is another process/thread currently
            reading from destinationFilePath.
            <para></para>
            Throws if after several retries the move wasn't successful.
            For effectivity purposes, the tempSourceFilePath and destinationFilePath should
            be located in the same directory / at least in the same volume.
            <para></para>
            The use case for using this function is to quickly move the file with retry 
            so other readers don't have to wait/retry for a long time.
            e.g. File.Replace() or File.Copy() would take a long time if the file is large.
            <para></para>
            If the process/thread is stopped externally during execution of this function,
            one of the results can be that a temporary file (original destinationFilePath renamed) can stay
            orphaned on the disk and the file in destinationFilePath does not exist.
            Next time the process is started programmer should expect 
            the destinationFilePath may exist but needn't.
            </summary>
            <param name="sourceFilePath">
            File has to exist.
            It is supposed that the file is temporary, so nobody is using it.
            (so no IO conflicts/race condition is applied here)
            Path cannot be null or empty.
            </param>
            <param name="destinationFilePath">
            File can exist but doesn't have to.
            File can be access by other threads/processes while moving - retry policy is applied.
            Path cannot be null or empty
            </param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.Copy(System.String,System.String)">
            <summary>
            Copy method that blocks till the operartion is complete
            </summary>
            <param name="source">
            Source folder that needs to be copied
            </param>
            <param name="destination">
            Destination folder
            </param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.BeginCopy(System.String,System.String)">
            <summary>
            Async copy method that begins the copy operation.  Wait on AsyncWaitHandle to be notified of completion.
            </summary>
            <param name="source">
            Source folder that needs to be copied
            </param>
            <param name="destination">
            Destination folder
            </param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.AreFilesDifferent(System.String,System.String)">
            <summary>
            Compare two files and return true if they are different.
            </summary>
            <param name="firstFilename">The name of the first file to compare.</param>
            <param name="secondFilename">The name of the second file to compare.</param>
            <returns>True if the files are different, false otherwise </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.Dispose(System.Boolean)">
            <summary>
            Private Dispose method called by the public Dispose method
            </summary>
            <param name="isDisposing">Whether the object is disposing.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.TryDeleteFile(System.String)">
            <summary>
            Try to delete the file.
            </summary>
            <param name="filePath">The complete path of the file to be deleted.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.EndCopy(System.Object)">
            <summary>
            End copy delegate that is used to perform post copy completion task.
            </summary>
            <param name="state">
            Instance of CopyArgs that contains the source and destination folders
            </param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.CopyItem(System.Object)">
            <summary>
            Copy Item delegate that is used to dequeue a work item that is enqueued to be copied (file/folder)
            </summary>
            <param name="state">
            Instance of CopyArgs that contains the source and destination folders
            </param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.CopyFolder(System.String,System.String)">
            <summary>
            Copy Folder method called by the CopyItem delegate to dequeue a folder copy item
            This method enumerates the folder enqueues all its children and dequeues the current item
            </summary>
            <param name="sourceDir">
            Source folder to be copied
            </param>
            <param name="destinationDir">
            Destination folder
            </param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.CopyFile(System.String,System.String)">
            <summary>
            Copy File method called by the CopyItem delegate to dequeue a file copy item
            </summary>
            <param name="source">
            Source file to be copied
            </param>
            <param name="destination">
            Destination file
            </param>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.DecrementWorkItem">
            <summary>
            Method called by the CopyItem delegate to dequeue the current item and check if the operation is complete
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.ShouldCopy(System.String)">
            <summary>
            Returns whether the file should be filtered out or not
            </summary>
            <param name="source">
            Source file name
            </param>
            <returns>
            Returns true if should not be filtered
            </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.RenameFolder(System.String,System.String)">
            <summary>
            Renames a folder from <paramref name="srcFolderName"/> to <paramref name="dstFolderName"/>
            </summary>
            <param name="srcFolderName">The source folder.</param>
            <param name="dstFolderName">The destination folder.</param>
        </member>
        <member name="T:System.Fabric.ImageStore.FolderCopy.CopyArgs">
            <summary>
            Internal class used to pass around source and destination folder pairs
            to WaitCallback delegates as the state param
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.CopyArgs.source">
            <summary>
            Field to store the source uri to copy from
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.CopyArgs.destination">
            <summary>
            Field to store the destination uri to copy to
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.FolderCopy.CopyArgs.isFolder">
            <summary>
            Field that identifies whether the current item is a folder or a file
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.FolderCopy.CopyArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the CopyArgs class. Internal constructor that takes copy arguments for the current copy item
            </summary>
            <param name="source">Source uri to copy from</param>
            <param name="destination">Destination uri to copy to</param>
            <param name="isFolder">Identifies if the current copy item is a folder</param>
        </member>
        <member name="P:System.Fabric.ImageStore.FolderCopy.CopyArgs.Source">
            <summary>
            Gets the value of the source.
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.FolderCopy.CopyArgs.Destination">
            <summary>
            Gets the value of the destination.
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.FolderCopy.CopyArgs.IsFolder">
            <summary>
            Gets a value indicating whether the source is a folder.
            </summary>
        </member>
        <member name="T:System.Fabric.ImageStore.IImageStore">
            <summary>
            The image store interface.
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.IImageStore.RootUri">
            <summary>
            Gets the root uri of the image store.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.UploadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads content of the local source to the image store at the remote destination.
            </summary>
            <param name="remoteDestination"> Location relative to image store root where the content needs to be uploaded.</param>
            <param name="localSource"> Physical location of the source.</param>
            <param name="imageCopyFlag"> Copy flag specifying copy type.</param>
            <param name="acquireSourceReaderLock"> Specifies whether or not to acquire reader lock for the source. This is because when the end user uploads build the lock does not make sense.</param>
            <param name="timeout">specifying timeout of upload operation</param>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.UploadContent(System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads content of the local source to the image store at the remote destination.
            </summary>
            <param name="remoteDestination"> Location relative to image store root where the content needs to be uploaded.</param>
            <param name="localSource"> Physical location of the source.</param>
            <param name="progressHandler">Defines the behavior to process progress information from the uploading operation.</param>
            <param name="timeout">The timeout for performing the uploading operation.</param>
            <param name="imageCopyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.UploadContentAsync(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads content of the local source to the image store at the remote destination.
            </summary>
            <param name="remoteDestination"> Location relative to image store root where the content needs to be uploaded.</param>
            <param name="localSource"> Physical location of the source.</param>
            <param name="timeout">The timeout for performing the uploading operation.</param>
            <param name="imageCopyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.CopyContent(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Copies content from a path in the ImageStore to the destination path in the ImageStore.
            </summary>
            <param name="remoteSource">Location relative to image store root where the content to be copied will be found.</param>
            <param name="remoteDestination">Location relative to image store root where the content needs to be copied.</param>
            <param name="imageCopyFlag">Copy flag specifying copy type.</param>
            <param name="checkFolderMarkFile">Indicats whether to check mark file during copying.</param>
            <param name="skipFiles">The list of the files names to be skipped for copying.</param>
            <param name="timeout">The timeout for performing the copying operation.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.CopyContentAsync(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Copies content from a path in the ImageStore to the destination path in the ImageStore.
            </summary>
            <param name="remoteSource">The relative path of source image store content to be copied from.</param>
            <param name="remoteDestination">The relative path of destination image store content to be copied to.</param>
            <param name="timeout">The timeout for performing the copying operation.</param>
            <param name="skipFiles">The list of the files names to be skipped for copying.</param>
            <param name="imageCopyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="checkFolderMarkFile">Indicats whether to check mark file during copying.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.DownloadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the image store to local destination.
            </summary>
            <param name="remoteSource"> Location (relative to image store root) from where to download the content.</param>
            <param name="localDestination"> Physical location where to download the content.</param>
            <param name="imageCopyFlag">The copying flag specifying copy type.</param>
            <param name="timeout">specifying timeout of download operation.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.DownloadContent(System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the image store to local destination.
            </summary>
            <param name="remoteSource">The relative path of source image store to be downloaded from.</param>
            <param name="localDestination">The local destination path to download the content.</param>
            <param name="progressHandler">Defines the behavior to process progress information from the downloading operation.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="imageCopyFlag">Copy control information to specify how file can be overwritten.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.DownloadContentAsync(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the image store to local destination.
            </summary>
            <param name="remoteSource">The relative path of source image store to be downloaded from.</param>
            <param name="localDestination">The local destination path to download the content.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="imageCopyFlag">Copy control information to specify how file can be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListContent(System.String,System.TimeSpan)">
            <summary>
            Get the image store content information.
            Returns the List of image store relative paths under the given relative path.
            </summary>
            <param name="remoteLocation">Location (relative to image store root).</param>
            <returns>All relative path of content within the location.</returns>
            <param name="timeout">The timeout for performing the listing operation.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListContentAsync(System.String,System.TimeSpan)">
            <summary>
            Gets the image store relative paths under the given relative path.
            </summary>
            <param name="remoteLocation">The relative path to file or folder from image store root.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListPagedContent(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
             <summary>
             Gets paged image store relative paths under the given relative path.
             The purpose of paging is to prevent from the oversized message which might be happened when listing a large number of files.
             </summary>
            <param name="listDescription">The information on how to get image store content</param>
            <param name="timeout">The timeout for performing the listing operation</param>
             <returns>Paged relative path of the content within the location</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListPagedContentAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets paged image store relative paths under the given relative path.
            The purpose of paging is to prevent from the oversized message which might be happened when listing a large number of files.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListContentWithDetails(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Gets the image store content information under the given relative path.
            </summary>
            <param name="remoteLocation">The relative path to file or folder from image store root.</param>
            <param name="isRecursive">flag list subhierarchy.</param>
            <param name="timeout">specifying timeout of list operation.</param>
            <returns>All content within the location</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListContentWithDetailsAsync(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Gets the image store content information under the given relative path.
            </summary>
            <param name="remoteLocation">The relative path to file or folder from image store root.</param>
            <param name="isRecursive">flag list subhierarchy.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListPagedContentWithDetails(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
             <summary>
             Gets paged image store content under the given relative path.
             The purpose of paging is to prevent from the oversized message which might be happend when listing a large number of files.
             </summary>
            <param name="listDescription">The information on how to get image store content.</param>
             /// <param name="timeout">specifying timeout of list operation.</param>
             <returns>paged content within the location</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.ListPagedContentWithDetailsAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets paged image store content under the given relative path.
            The purpose of paging is to prevent from the oversized message which might be happend when listing a large number of files.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.DoesContentExist(System.String,System.TimeSpan)">
            <summary>
            Check if content is present in the store.
            </summary>
            <param name="remoteLocation"> Location (relative to image store root) where to check the presence of the content. </param>
            <param name="timeout">Specifying timeout of check existence operation.</param>
            <returns> True if the content exists, false otherwise. </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.DoesContentExistAsync(System.String,System.TimeSpan)">
            <summary>
            Check if content is present in the store.
            </summary>
            <param name="remoteLocation">Location (relative to image store root) where to check the presence of the content</param>
            <param name="timeout">The timeout for performing the checking existence operation</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.DeleteContent(System.String,System.TimeSpan)">
            <summary>
            Remove tag from store, clear data associated with tag.
            </summary>
            <param name="remoteLocation">Location (relative to image store root) from where to delete the content.</param>
            <param name="timeout">specifying timeout of delete operation</param>
        </member>
        <member name="M:System.Fabric.ImageStore.IImageStore.DeleteContentAsync(System.String,System.TimeSpan)">
            <summary>
            Remove tag from store, clear data associated with tag.
            </summary>
            <param name="remoteLocation">Location (relative to image store root) where to delete the content</param>
            <param name="timeout">The timeout for performing the deleting operation</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreAccessDescription">
            <summary>
            <para>Provides information about the permissions or access rights to the specific user or group.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreAccessDescription.WindowsIdentity">
            <summary>
            <para>A Windows user or group represented by the specified Windows account token or authentication.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreAccessDescription.HasReadAccess">
            <summary>
            <para>Indicates whether the specific user or group has read access.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreAccessDescription.HasWriteAccess">
            <summary>
            <para>Indicates whether the specific user or group has write access.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreAccessDescription.#ctor(System.Security.Principal.WindowsIdentity,System.String)">
            <summary>
            Initializes a new instance of ImageStoreAccessDescription class
            </summary>
            <param name="imageStoreAccessWindowsIdentity">A Windows user or group represented by the specified Windows account token or authentication.</param>
            <param name="localRoot">The local path of the working folder.</param>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreContent">
            <summary>
            <para>Information about the image store content at the specified image store relative path.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreContent.Files">
            <summary>
            <para>The list of image store file info objects represents files under the given image store relative path.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreContent.Folders">
            <summary>
            <para>The list of image store folder info objects represents subfolders under the given image store relative path.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreFactory">
            <summary>
            This is the factory class to produce different types of image stores.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreFactory.CreateImageStore(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a new image store.
            </summary>
            <param name="imageStoreUri">The uri of the image store.</param>
            <param name="workingDirectory">The temporary working directory.</param>
            <param name="localRoot">The local path of the working folder.</param>
            <param name="isInternal">Indicates whether or not it's for internal use.</param>
            <returns>An object of Image Store pointing to the given uri.</returns>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreFile">
            <summary>
            Information about a image store file
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreFile.StoreRelativePath">
            <summary>
            The file path relative to the image store root path
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreFile.FileVersion">
            <summary>
            <para>Information about the version of image store file.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreFile.FileSize">
            <summary>
            <para>The size of file in bytes.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreFile.ModifiedDate">
            <summary>
            <para>The date and time when the image store file was last modified.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreFile.VersionInfo">
            <summary>
            <para>Information about the name/version of service and application with which a image store file is associated.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreFile.ToString">
            <summary>
            Gets a string representation of the image store file.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.ImageStore.ImageStoreFile"/>.</returns>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreVersionInfo">
            <summary>
            <para>Information about the name and version of service/application with which a image store file/folder is associated.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreVersionInfo.ServiceManifestName">
            <summary>
            <para>Gets the name of service manifest..</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreVersionInfo.ServiceManifestVersion">
            <summary>
            <para>Get the version of service manifest.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreVersionInfo.ApplicationVersion">
            <summary>
            <para>Get the version of the applicaiton.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreVersionInfo.ConfigApplicationVersion(System.String)">
            <summary>
            Add the version of application if it doesn't exist.
            </summary>
            <param name="applicationVersion">The version of the application</param>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreVersionInfo.ConfigVersionInfo(System.String,System.String,System.String)">
            <summary>
            <para>Setup the version/name of service and application which is associated with a image store file/folder.</para>
            </summary>
            <param name="serviceManifestName">The name of service manifest</param>
            <param name="serviceManifestVerison">The version of service manifest</param>
            <param name="applicationVersion">The version of the applicaiton</param>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreFolder">
            <summary>
            Information about a image store folder including the number of files this folder contains and its image store relative path
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreFolder.#ctor(System.String,System.Int32)">
            <summary>
            Intialize Image store folder inforamtion object 
            </summary>
            <param name="storeRelativePath">The remote location within image store which is relative to the image store root.</param>
            <param name="fileCount">The number of files from within the image store folder.</param>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreFolder.StoreRelativePath">
            <summary>
            The remote location within image store which is relative to the image store root
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStoreFolder.FileCount">
            <summary>
            The number of files from within the image store folder
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreFolder.VersionInfo">
            <summary>
            <para>Information about the name/version of service and application with which a image store folder is associated.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreFolder.ToString">
            <summary>
            Gets a string representation of the folder in image store
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.ImageStore.ImageStoreFolder"/>.</returns>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStorePagedContent">
            <summary>
            Information about the image store content
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStorePagedContent.Files">
            <summary>
            The list of image store file info objects represents files found under the given image store relative path
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStorePagedContent.Folders">
            <summary>
            The list of image store folder info objects represents subfolders found under the given image store relative path
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStorePagedContent.ContinuationToken">
             <summary>
            Information used to obtain next set of image store content
             </summary>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStorePagedRelativePath">
            <summary>
            <para>Represents the information of the relative path from image store root with the continuation token for obtaining next set of image store content.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStorePagedRelativePath.RelativePath">
            <summary>
            <para>The relative path to file or folder from image store root.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.ImageStorePagedRelativePath.ContinuationToken">
            <summary>
            <para>Information used to obtain next set of image store content.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreProviderType">
            <summary>
            Describes the underlying storage provider for the cluster's Image Store as defined by the ImageStoreConnectionString setting in the Cluster Manifest.
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreProviderType.Invalid">
            <summary>
            An invalid or unrecognized provider
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreProviderType.AzureStorage">
            <summary>
            Azure Storage(either XStore or DSMS)
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreProviderType.FileShare">
            <summary>
            Either a local filesystem directory or file share
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreProviderType.ImageStoreService">
            <summary>
            Image Store system service running inside the cluster itself
            </summary>
        </member>
        <member name="T:System.Fabric.ImageStore.ImageStoreUtility">
            <summary>
            Provides supplementary utility methods for application package deployment
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreUtility.Sha256">
            <summary>
            ComputeHash SHA256 algorithm name
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.ImageStoreUtility.Sha256Tag">
            <summary>
            Hash string's SHA256 algorithm tag (algorithm + ':')
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.GenerateSfpkg(System.String,System.String,System.Boolean,System.String)">
            <summary>
            <para>
            Creates a 'sfpkg' file from the application package found in the specified application package root directory.
            </para>
            </summary>
            <param name="appPackageRootDirectory"><para>The application package root directory. It must exist.</para></param>
            <param name="destinationDirectory"><para>The folder where the sfpkg file is placed. If it doesn't exist, it is created.</para></param>
            <param name="sfpkgName"><para>The name of the sfpkg file.</para></param>
            <param name="applyCompression"><para>If true, the package is
            <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-package-apps#compress-a-package">compressed</see>
            before generating the sfpkg, inside <paramref name="appPackageRootDirectory"/>.
            If the package is already compressed, no changes are made. To compress, the appPackageRootDirectory must allow write access.
            If false, the sfpkg is generated using the application package as it is, either compressed or uncompressed. Default: true.</para></param>
            <returns><para>The path to the sfpkg file. Can be used to expand the sfpkg using <see cref="M:System.Fabric.ImageStore.ImageStoreUtility.ExpandSfpkg(System.String,System.String)"/>.</para></returns>
            <remarks>
            <para>
            If sfpkgName is not specified or null, the generated package takes the name of the application package root folder, adding the '.sfpkg' extension.
            If the specified name has no extension or a different extension, the extension is replaced with '.sfpkg'.
            </para>
            <para>The destination directory can't be same or a child of the application package root directory, as extraction will fail.</para>
            <para>No validation is performed to ensure the package is valid. Please test the package before generating the sfpkg.</para>
            <para>The sfpkg can be uploaded to an external store and used for provisioning.</para>
            <para>To expand the sfpkg to see the original content, use <see cref="M:System.Fabric.ImageStore.ImageStoreUtility.ExpandSfpkg(System.String,System.String)"/></para>
            </remarks>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.ExpandSfpkg(System.String,System.String)">
            <summary>
            Expands the specified sfpkg file in the application package folder.
            </summary>
            <param name="sfpkgFilePath"><para>The path to the sfpkg file, which must exist and have '.sfpkg' extension.</para></param>
            <param name="appPackageRootDirectory"><para>The directory where the package is expanded. If it exists, it will be first deleted to ensure the resulting application package is valid.</para></param>
            <remarks>
            <para>If the destination directory doesn't exist, it is created.</para>
            <para>If the destination folder contains the sfpkg to be extracted, the package is extracted in place and, when extraction is complete, the sfpkg is deleted, to ensure the folder is a valid application package. Otherwise, the sfpkg is not deleted.</para>
            <para>If the destination folder exists, it must not contain other files or folders.</para>
            <para>
            The command does not perform any validation on the sfpkg or the expanded package.
            </para>
            <para>If the sfpkg was created using <see cref="M:System.Fabric.ImageStore.ImageStoreUtility.GenerateSfpkg(System.String,System.String,System.Boolean,System.String)"/>, the <paramref name="sfpkgFilePath"/> is the returned value.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.HasAlgorithmTag(System.String)">
            <summary>
            Check if the hash string conforms new format.
            </summary>
            <param name="hash">hash string to be evaluated</param>
            <returns>tru if new format, false otherwise</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.ComputeHash(System.String,System.String,System.Boolean)">
            <summary>
            Compute hash of file or directory. Directory hash uses Merkel tree to compute hash
            </summary>
            <param name="algorithm">algorithm to compute hash, sha256</param>
            <param name="path">path to the file or directory</param>
            <param name="ignoreCase">if path is directory, this parameter is effective. If true, names in the directory are transformed to lower-case to compute hash.</param>
            <returns>the hash value in the format of hex string e.g. 0123456789ABCDEF </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.ArchiveApplicationPackage(System.String,System.Fabric.IImageStoreProgressHandler)">
            <summary>
            Compresses all service package sub-directories (i.e. code/config/data packages) found under the application package root directory.
            </summary>
            <param name="appPackageRootDirectory">The application package root directory.</param>
            <param name="progressHandler">An optional handler for tracking progress of the compression operation.</param>
            <remarks>
            <para>
            Package checksums are computed on the resulting compressed package files rather than the original uncompressed contents. This means that when uploading compressed packages that were previously uncompressed, their versions must be changed in the Service Manifest.
            Alternatively, simply omit the sub-package whose contents have not changed from the overall application package.
            Also note that changing the last modified timestamp of a compressed package's contents will also result in changing the package's checksum.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.TryExtractApplicationPackage(System.String,System.Fabric.IImageStoreProgressHandler)">
            <summary>
            Uncompresses all service package sub-directories (i.e. code/config/data packages) found under the application package root directory.
            </summary>
            <param name="appPackageRootDirectory">The application package root directory.</param>
            <param name="progressHandler">An optional handler for tracking progress of the uncompression operation.</param>
            <returns>
            <para>True if any compressed packages were found, false otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.GenerateApplicationPackageChecksumFiles(System.String,System.Fabric.IImageStoreProgressHandler,System.Boolean)">
            <summary>
            Generates checksum files for all service package sub-directories (i.e. code/config/data packages) and service manifests found under the application package root directory.
            </summary>
            <param name="appPackageRootDirectory">The application package root directory.</param>
            <param name="progressHandler">An optional handler for tracking progress of the checksum generation.</param>
            <param name="isImageStoreServiceEnabled">Should be set to true if the cluster's ImageStoreConnectionString is set to "fabric:ImageStore", false otherwise.</param>
            <remarks>
            <para>
            The cluster will automatically generate checksums during application type registration if they're not already part of the application package. This method can be used to incur the cost of checksum file generation while preparing the application package, which will reduce the cost of registering the application type package for large packages.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.ImageStore.ImageStoreUtility.GetImageStoreProviderType(System.String)">
            <summary>
            Helper method to determine the Image Store provider type based on an unencrypted Image Store connection string.
            </summary>
            <param name="imageStoreConnectionString">The unencrypted Image Store connection string found in the cluster manifest.</param>
            <returns>
            <para>The Image Store provider type.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.ImageStore.NativeImageStoreClient">
            <summary>
            <para>Implements a native image store client.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ImageStore.NativeImageStoreClient.SchemeTag">
            <summary>
            The tag for file image store scheme.
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.NativeImageStoreClient.RootUri">
            <summary>
            Gets the Root uri of the store.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.IsNativeImageStoreUri(System.String)">
            <summary>
            Checks whether the uri is of the native image store.
            </summary>
            <param name="imageStoreUri"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the native image store client class.
            </summary>
            <param name="isInternal">Indicates whether or not it's for internal use.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the native image store client class.
            </summary>
            <param name="connectionStrings">Information about the native image store connection string.</param>
            <param name="isInternal">Indicates whether or not it's for internal use.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.#ctor(System.String[],System.Boolean,System.String,System.Fabric.SecurityCredentials)">
            <summary>
            Initializes a new instance of the native image store client class.
            </summary>
            <param name="connectionStrings">Information about the native image store connection string.</param>
            <param name="isInternal">Indicates whether or not it's for internal use.</param>
            <param name="workingDirectory">Specify the working folder for native image store operations.</param>
            <param name="credentials">Information represent security credentials.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.UploadContent(System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads content of the local source to the native image store at the remote destination.
            </summary>
            <param name="remoteDestination">Location relative to image store root where the content needs to be uploaded.</param>
            <param name="localSource">local location of the source.</param>
            <param name="progressHandler">Defines the behavior to process progress information from the uploading operation.</param>
            <param name="timeout">The timeout for performing the uploading operation.</param>
            <param name="imageCopyFlag">Copy control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.UploadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads content of the local source to the native image store at the remote destination.
            </summary>
            <param name="remoteDestination">Location relative to RootUri where the content needs to be uploaded.</param>
            <param name="localSource">local location of the source.</param>
            <param name="timeout">The timeout for performing the uploading operation.</param>
            <param name="imageCopyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.UploadContentAsync(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads content of the local source to the native image store at the remote destination.
            </summary>
            <param name="storeDestination">Location relative to RootUri where the content needs to be uploaded.</param>
            <param name="localSource">local location of the source.</param>
            <param name="timeout">The timeout for performing the uploading operation.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.CopyContent(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Copies content from a path in the ImageStore to the destination path in the ImageStore.
            </summary>
            <param name="remoteSource">The relative path of source file image store to be copied from.</param>
            <param name="remoteDestination">The relative path of destination image store content to be copied to.</param>
            <param name="timeout">The timeout for performing the copying operation.</param>
            <param name="skipFiles">The list of the files names to be skipped for copying.</param>
            <param name="imageCopyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="checkMarkFile">Indicats whether to check mark file during copying.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.CopyContentAsync(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Copies content from a path in the ImageStore to the destination path in the ImageStore.
            </summary>
            <param name="storeSource">The relative path of source file image store to be copied from.</param>
            <param name="storeDestination">The relative path of destination image store content to be copied to.</param>
            <param name="timeout">The timeout for performing the copying operation.</param>
            <param name="skipFiles">The list of the files names to be skipped for copying.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="checkMarkFile">Indicats whether to check mark file during copying.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.DownloadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the image store to local destination.
            </summary>
            <param name="remoteSource">The relative path of source image store to be downloaded from.</param>
            <param name="localDestination">The local destination path to download the content.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="imageCopyFlag">The copying control information to specify how file can be overwritten.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.DownloadContent(System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the image store to local destination.
            </summary>
            <param name="remoteSource">The relative path of source image store to be downloaded from.</param>
            <param name="localDestination">The local destination path to download the content.</param>
            <param name="progressHandler">Defines the behavior to process progress information from the downloading operation.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="imageCopyFlag">The copying control information to specify how file can be overwritten.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.DownloadContentAsync(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the image store to local destination.
            </summary>
            <param name="storeSource">The relative path of source image store to be downloaded from.</param>
            <param name="localDestination">The local destination path to download the content.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListContent(System.String,System.TimeSpan)">
            <summary>
            Gets the image store content information.
            Returns the List of image store relative paths under the given relative path.
            </summary>
            <param name="remoteLocation">The relative path to file or folder in the image store from its root.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListPagedContent(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
             <summary>
             Gets paged image store relative paths under the given relative path.
             The purpose of paging is to prevent from the oversized message which might be happened when listing a large number of files.
             </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
             <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListContentAsync(System.String,System.TimeSpan)">
            <summary>
            Get the image store content information.
            Returns the List of image store relative paths under the given relative path.
            </summary>
            <param name="storeSource">The relative path to file or folder in the image store from its root.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListPagedContentAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets paged image store relative paths under the given relative path.
            The purpose of paging is to prevent from the oversized message which might be happened when listing a large number of files.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListContentWithDetails(System.String,System.Boolean,System.TimeSpan)">
             <summary>
             Gets the image store content information.
             Returns the information about the image store content under the given relative path.
             </summary>
            <param name="remoteLocation">The relative path to file or folder in the image store from its root.</param>
            <param name="isRecursive">flag list subhierarchy.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
             <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListPagedContentWithDetails(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets paged image store content under the given relative path.
            The purpose of paging is to prevent from the oversized message which might be happend when listing a large number of files.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListContentWithDetailsAsync(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Gets the image store content information.
            Returns the information about the image store content under the given relative path.
            </summary>
            <param name="storeSource">The relative path to file or folder in the image store from its root.</param>
            <param name="isRecursive">flag list subhierarchy.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.ListPagedContentWithDetailsAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets paged image store content under the given relative path.
            The purpose of paging is to prevent from the oversized message which might be happend when listing a large number of files.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.DoesContentExist(System.String,System.TimeSpan)">
            <summary>
            Check if content is present in the store.
            </summary>
            <param name="remoteLocation">Location (relative to image store root) where to check the presence of the content.</param>
            <param name="timeout">The timeout for performing the checking existence operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.DoesContentExistAsync(System.String,System.TimeSpan)">
            <summary>
            Check if content is present in the store.
            </summary>
            <param name="tag">Location (relative to image store root) where to check the presence of the content.</param>
            <param name="timeout">The timeout for performing the checking existence operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.DeleteContent(System.String,System.TimeSpan)">
            <summary>
            Remove tag from store, clear data assosciate with tag.
            </summary>
            <param name="remoteLocation">Location (relative to RootUri) from where to delete the content.</param>
            <param name="timeout">The timeout for performing the deleting operation.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.NativeImageStoreClient.DeleteContentAsync(System.String,System.TimeSpan)">
            <summary>
            Remove tag from store, clear data assosciate with tag.
            </summary>
            <param name="tag">Location (relative to RootUri) from where to delete the content.</param>
            <param name="timeout">The timeout for performing the deleting operation.</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.ImageStore.XStoreProxy">
            <summary>
            XStore image store provider. This class implements the IImageStoreProvider
            interface for xstore.
            </summary>
        </member>
        <member name="P:System.Fabric.ImageStore.XStoreProxy.RootUri">
            <summary>
            Gets the Root uri for image store
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.Initialize(System.String,System.String)">
            <summary>
            Initializes xstore type and xstore object members.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.UploadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Uploads content of the local source to the image store at the remote destination.
            </summary>
            <param name="remoteDestination">Location relative to RootUri where the content needs to be uploaded.</param>
            <param name="localSource">Physical location of the source.</param>
            <param name="timeout">The timeout for performing the uploading operation.</param>
            <param name="copyFlag">The copying flag specifying copy type </param>
            <param name="acquireSourceReaderLock">Indicates whether to acquire reader lock.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.CopyContent(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Copies content from a path in the XStore to the destination path in the XStore
            </summary>
            <param name="remoteSource"> Location relative to RootUri where the content to be copied will be found. </param>
            <param name="remoteDestination"> Location relative to RootUri where the content needs to be copied. </param>
            <param name="timeout">The timeout for performing the copying operation.</param>
            <param name="skipFiles">The list of the blobs to be skipped for copying </param>
            <param name="copyFlag">The copying control information to specify how blob can be overwritten.</param>
            <param name="checkMarkFile">Indicats whether to check mark file during copying.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.CopyContentAsync(System.String,System.String,System.TimeSpan,System.String[],System.Fabric.CopyFlag,System.Boolean)">
            <summary>
            Copies content from a path in the XStore to the destination path in the XStore
            </summary>
            <param name="storeSource">The relative path of source XStore content to be copied from.</param>
            <param name="storeDestination">The relative path of destination XStore content to be copied to.</param>
            <param name="timeout">The timeout for performing the copying operation.</param>
            <param name="skipFiles">The list of the files names to be skipped for copying.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
            <param name="checkMakeFile">Indicats whether to check mark file during copying.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.DownloadContent(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the XStore to local destination.
            </summary>
            <param name="remoteSource">Location (relative to RootUri) from where to download the content.</param>
            <param name="localDestination">Physical location where to download the content.</param>
            <param name="timeout"> Download timeout in milliseconds.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.DownloadContent(System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the XStore to local destination.
            </summary>
            <param name="remoteSource">Location (relative to RootUri) from where to download the content.</param>
            <param name="localDestination">Physical location where to download the content.</param>
            <param name="handler">Defines the behavior to process progress information from the downloading operation.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.DownloadContentAsync(System.String,System.String,System.TimeSpan,System.Fabric.CopyFlag)">
            <summary>
            Downloads content from the XStore to local destination.
            </summary>
            <param name="storeSource">Location (relative to RootUri) from where to download the content.</param>
            <param name="localDestination">Physical location where to download the content.</param>
            <param name="timeout">The timeout for performing the downloading operation.</param>
            <param name="copyFlag">The copying control information to specify how file can be overwritten.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListContent(System.String,System.TimeSpan)">
            <summary>
            Lists all blobs under the the given relative blob path
            </summary>
            <param name="remoteLocation">Location (relative to RootUri)</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns>All blobs within the input blob path</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListPagedContent(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets the paged XStore blob relative paths.
            Currently no implementation and has not been supported at the XStore.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListContentAsync(System.String,System.TimeSpan)">
            <summary>
            Lists all blobs under the the given relative blob path
            </summary>
            <param name="storeSource">Location (relative to RootUri)</param>
            <param name="timeout">he timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListPagedContentAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Gets the paged XStore blob relative paths.
            Currently no implementation and has not been supported at the XStore.
            </summary>
            <param name="listDescription">The information on how to get image store content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListContentWithDetails(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            List all blobs under the the given relative blob path/sub blob path
            </summary>
            <param name="remoteLocation">Location (relative to RootUri)</param>
            <param name="isRecursive">flag list subhierarchy</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns>All blobs within the input blob path/sub blob path</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListPagedContentWithDetails(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Get the paged XStore content information.
            Currently no implementation and has not been supported at the XStore.
            </summary>
            <param name="listDescription">The information on how to get XStore content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListContentWithDetailsAsync(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            List all blobs under the the given relative blob path/sub blob path
            </summary>
            <param name="storeSource">Location (relative to RootUri)</param>
            <param name="isRecursive">flag list subhierarchy</param>
            <param name="timeout">The timeout for performing the listing operation</param>
            <returns>All blobs within the input blob path/sub blob path</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.ListPagedContentWithDetailsAsync(System.Fabric.Description.ImageStoreListDescription,System.TimeSpan)">
            <summary>
            Get the paged XStore content information.
            Currently no implementation and has not been supported at the XStore.
            </summary>
            <param name="listDescription">The information on how to get XStore content.</param>
            <param name="timeout">The timeout for performing the listing operation.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.DoesContentExist(System.String,System.TimeSpan)">
            <summary>
            Check if content is present in the store.
            </summary>
            <param name="remoteLocation"> Location (relative to RootUri) where to check the presence of the content. </param>
            <param name="timeout">The timeout for performing the checking existence operation</param>
            <returns> True if the content exists, false otherwise. </returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.DoesContentExistAsync(System.String,System.TimeSpan)">
            <summary>
             Check if content is present in the XStore.
            </summary>
            <param name="remoteLocation">Location (relative to RootUri) where to check the presence of the content.</param>
            <param name="timeout">The timeout for performing the checking existence operation</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.DeleteContent(System.String,System.TimeSpan)">
             <summary>
             Remove tag from store, clear data assosciate with tag.
             </summary>
             <param name="remoteLocation">Location (relative to RootUri) from where to delete the content.</param>
            <param name="timeout">The timeout for performing the deleting operation</param>
        </member>
        <member name="M:System.Fabric.ImageStore.XStoreProxy.DeleteContentAsync(System.String,System.TimeSpan)">
             <summary>
             Remove tag from store, clear data assosciate with tag.
             </summary>
             <param name="remoteLocation">Location (relative to RootUri) from where to delete the content.</param>
            <param name="timeout">The timeout for performing the deleting operation</param>
        </member>
        <member name="T:System.Fabric.ImageStore.DsmsXStoreProxy">
            <summary>
            Dsms image store provider. This class implements the IImageStore
            interface for xstore.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.DsmsXStoreProxy.#ctor">
            <summary>
            Creates an instance of DsmsProxy.
            </summary>
        </member>
        <member name="M:System.Fabric.ImageStore.DsmsXStoreProxy.IsDsmsXStoreUri(System.String)">
            <summary>
            Checks if the given uri is of dsms type.
            </summary>
            <param name="imageStoreUri">Image store uri.</param>
            <returns>True if uri is of dsms type, false otherwise.</returns>
        </member>
        <member name="M:System.Fabric.ImageStore.DsmsXStoreProxy.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of DsmsProxy.
            </summary>
            <param name="imageStoreUri">Image Store URI.</param>
            <param name="localRoot">Local root.</param>
        </member>
        <member name="M:System.Fabric.ImageStore.DsmsXStoreProxy.Initialize(System.String,System.String)">
            <summary>
            Initializes dsms xstore type and dsms xstore object members.
            </summary>
        </member>
        <member name="T:System.Fabric.IAtomicGroupStateProvider">
            <summary>
            <para>Describes additional methods of the <see cref="T:System.Fabric.IAtomicGroupStateProvider" /> interface that a user service must implement to take advantage of the atomic group functionality of a service group. </para>
            </summary>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Commits a particular atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the group to be committed.</para>
            </param>
            <param name="commitSequenceNumber">
            <para>The sequence number for the commit operation.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. 
            It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Rolls back a particular atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the group to roll back.</para>
            </param>
            <param name="rollbackSequenceNumber">
            <para>The sequence number for the rollback operation.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that progress beyond a particular commit sequence number that is provided via <see cref="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)" /> should be undone. </para>
            </summary>
            <param name="fromCommitSequenceNumber">
            <para>The LSN of a commit operation. All progress past this point should be undone.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IAtomicGroupStateReplicator">
            <summary>
            <para>Exposes replication-related functions for atomic groups. </para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.IAtomicGroupStateReplicator" /> is available if the service is a member of a service group. The service must implement <see cref="T:System.Fabric.IAtomicGroupStateProvider" /> and be stateful. When creating a <see cref="T:System.Fabric.FabricReplicator" /> via <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)" />, instead of passing in a regular <see cref="T:System.Fabric.IStateProvider" />, the service can pass in the <see cref="T:System.Fabric.IAtomicGroupStateProvider" /> that it implements instead. As a result, it receives a <see cref="T:System.Fabric.IAtomicGroupStateReplicator" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup">
            <summary>
            <para>Creates a new atomic group and obtains the ID of the atomic group.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Int64" /> the ID of the created atomic group.</para>
            </returns>
            <remarks>
            <para>Atomic groups are used to coordinate a set of changes across the members of a service group.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(System.Int64,System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Replicates some <see cref="T:System.Fabric.OperationData" /> as a part of an atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the atomic group that is obtained from <see cref="M:System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup" /> and includes the <see cref="T:System.Fabric.OperationData" />.</para>
            </param>
            <param name="operationData">
            <para>An <see cref="T:System.Fabric.OperationData" /> to be replicated.</para>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="sequenceNumber">
            <para>The LSN of the operation, as an out parameter.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type long, the LSN of the replicated atomic group operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Asynchronously commits state replication for the atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the group to be committed.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="commitSequenceNumber">
            <para>The LSN of the commit operation, as an out parameter.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type long, the LSN of the commit operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Asynchronously rolls-back state replication for the atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the atomic group to roll back.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="rollbackSequenceNumber">
            <para>The LSN of the rollback operation, as an out parameter.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type long, the LSN of the rollback operation.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IImageStoreProgressHandler">
            <summary>
            <para>Defines the behavior that a progress handler must implement to process progress information from Image Store operations</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IImageStoreProgressHandler.GetUpdateInterval">
            <summary>
            <para>Retrieves the interval at which progress information is published for some details that use polling (such as application package upload and download progress). Returning zero will use the system default of 2 seconds.</para>
            </summary>
            <returns>
            <para>The <see cref="T:System.TimeSpan"/> representing the progress update interval.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IImageStoreProgressHandler.UpdateProgress(System.Int64,System.Int64,System.Fabric.ProgressUnitType)">
            <summary>
            <para>Reports the progress of the current operation</para>
            </summary>
            <param name="completedItems">The number of completed work items.</param>
            <param name="totalItems">The total number of work items.</param>
            <param name="itemType">The unit of measurement for each work item.</param> 
            <remarks>The total number of items is not always guaranteed to be known at the beginning of the operation. In some cases, this value can increase if more work is discovered during processing.</remarks>
        </member>
        <member name="T:System.Fabric.IMemoryManagedOperationData">
            <summary>
            Similar to <see cref="T:System.Fabric.IOperationData"/>, but backed by <see cref="T:System.Fabric.MemoryOwner"/>
            </summary>
        </member>
        <member name="M:System.Fabric.FaultAnalysisServiceBroker.System#Fabric#Interop#NativeFaultAnalysisService#IFabricFaultAnalysisService#BeginStartPartitionQuorumLoss(System.IntPtr,System.UInt32,System.Fabric.Interop.NativeCommon.IFabricAsyncOperationCallback)">
            InvokeQuorumLoss
        </member>
        <member name="T:System.Fabric.Int64RangePartitionInformation">
            <summary>
            <para>Describes the partition information for the integer range that is based on partition schemes. Services observe this type of <see cref="T:System.Fabric.ServicePartitionInformation" /> when the service is created with the <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription" /> class. <see cref="T:System.Fabric.Int64RangePartitionInformation" /> derives from <see cref="T:System.Fabric.IServicePartition" /> and is provided to services as part of the <see cref="T:System.Fabric.IStatefulServicePartition" /> or <see cref="T:System.Fabric.IStatelessServicePartition" />, which is passed in via the stateful <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)" /> or the stateless <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)" /> methods.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Int64RangePartitionInformation.LowKey">
            <summary>
            <para>Specifies the minimum key value for this partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Int64RangePartitionInformation.HighKey">
            <summary>
            <para>Specifies the maximum key value for this partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.IOperation">
            <summary>
            <para>Describes the data that is obtained from the state replicator. </para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.IOperation" /> is the base interface that describes state changes that are delivered to a Secondary replica. </para>
            <para>
                They contain the <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)" /> and the sequence number and other identifying information.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IOperation.OperationType">
            <summary>
            <para>Gets the type of this operation. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.OperationType" />.</para>
            </value>
            <remarks>
            <para>The <see cref="T:System.Fabric.OperationType" /> indicates the type of operation. "Normal" operations are those operations that are sent by non-service grouped services as part of either the copy or replication streams. Other types of operations represent control operations that are specific to service groups.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IOperation.SequenceNumber">
            <summary>
            <para>Gets the sequence number of this operation. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
            <remarks>
            <para>
                The sequence number is provided as a part of the <see cref="P:System.Fabric.IOperation.SequenceNumber" /></para>
            <para>
                For operations received from the replication stream (<see cref="M:System.Fabric.IStateReplicator.GetReplicationStream"/>) the sequence number is the same that the Primary replica that are receives from <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)" /> method.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IOperation.AtomicGroupId">
            <summary>
            <para>Identifies the atomic group, if this object that implements <see cref="T:System.Fabric.IOperation" />
            is a part of an atomic group. Atomic groups are only available when a service is a part of service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.IOperation.Data">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.OperationData" /> that are provided by the Primary replica.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.OperationData" />.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="M:System.Fabric.IOperation.Acknowledge">
            <summary>
            <para>Acknowledges that this operation has been successfully applied at the Secondary replica.  </para>
            </summary>
            <remarks>
            <para>Services should call this method when they have obtained an <see cref="T:System.Fabric.IOperation" />
            from the replicator and successfully applied it to their local store.
            For persisted services, calling this method is mandatory because the <see cref="T:System.Fabric.FabricReplicator" />
            does not release additional objects that implement <see cref="T:System.Fabric.IOperation" />. For volatile services, the replicator
            implicitly acknowledges operations when they are received unless they are configured otherwise by setting the value
            <see cref="P:System.Fabric.ReplicatorSettings.RequireServiceAck" /> to true.
            An operation must be acknowledged by a quorum of replicas before the Primary replica receives the
            <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)" /> operation complete responses.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IOperationData">
            <summary>
            <para>Interface for the data being transferred.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IOperationDataStream">
            <summary>
            <para> An <see cref="T:System.Fabric.IOperationDataStream" /> 
            encapsulates a stream of <see cref="T:System.Fabric.OperationData" /> objects that are exchanged between Primary replica and Secondary replica.
            Objects that implement <see cref="T:System.Fabric.IOperationDataStream" /> are used during the copy process.
            Both the copy context <see cref="M:System.Fabric.IStateProvider.GetCopyContext" /> method that is sent from the Secondary replica to the Primary replica 
            and the copy state <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)" /> method implement the <see cref="T:System.Fabric.IOperationDataStream" /> 
            interface.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Gets the next <see cref="T:System.Fabric.OperationData" /> object from the <see cref="T:System.Fabric.IOperationDataStream" />.</para>
            </summary>
            <param name="cancellationToken">
            <para>Provides a mechanism to cancel the asynchronous operation.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type <see cref="T:System.Fabric.OperationData" />.</para>
            </returns>
            <remarks>
            <para>
                Returning null indicates to the system that the transfer is complete.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IOperationStream">
            <summary>
            <para>Represents a stream of replication or copy operations that are sent from the Primary to the Secondary replica.  </para>
            </summary>
            <exception cref="T:System.TimeoutException">
            <para>The exception that is thrown when the time allotted for a process or operation has expired.</para>
            </exception>
            <remarks>
            <para>The streams returned from <see cref="M:System.Fabric.IStateReplicator.GetCopyStream" /> and <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream" /> 
            are objects that implement <see cref="T:System.Fabric.IOperationStream" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Gets the next object that implements <see cref="T:System.Fabric.IOperation" /> from the underlying <see cref="T:System.Fabric.IOperationStream" />.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that 
            the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type <see cref="T:System.Fabric.IOperation" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IOperationStream2">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="M:System.Fabric.IOperationStream2.ReportFault(System.Fabric.FaultType)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="T:System.Fabric.IOperationStream3">
            <summary>
            <see cref="T:System.Fabric.IOperationStream2"/> with <see cref="T:System.Fabric.MemoryManagedOperationData"/> support. The 
            <see cref="T:System.Fabric.OperationData"/> instance returned by <see cref="P:System.Fabric.IOperation.Data"/> must not be used directly.
            Instead, call <see cref="M:System.Fabric.OperationData.AsMemoryManagedOperationData"/> on that instance to get the 
            <see cref="T:System.Fabric.MemoryManagedOperationData"/> instance to use.
            </summary>
        </member>
        <member name="M:System.Fabric.IOperationStream3.GetMemoryManagedOperationAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Similar to <see cref="M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IPrimaryReplicator">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="currentConfiguration">
            <para>For Internal Use Only.</para>
            </param>
            <param name="previousConfiguration">
            <para>For Internal Use Only.</para>
            </param>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="quorumMode">
            <para>For Internal Use Only.</para>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>For Internal Use Only.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="currentConfiguration">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <remarks>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="replicaInfo">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" />  object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="replicaId">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <remarks>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IReplicator">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="M:System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="epoch">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="role">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.Abort">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:System.Fabric.IReplicator.GetCurrentProgress">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <returns>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.GetCatchUpCapability">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <returns>
            <para>For Internal Use Only.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <param name="epoch">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IReplicatorCatchupSpecificQuorum">
            <summary>
            <para>Allows an IReplicator to indicate that it supports catching up specific quorums with the use of the MustCatchup flag in ReplicaInformation.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IServiceGroupPartition">
            <summary>
            <para>Service group members inside a service group can cast the provided <see cref="T:System.Fabric.IStatefulServicePartition" /> or 
            <see cref="T:System.Fabric.IStatelessServicePartition" /> to a <see cref="T:System.Fabric.IServiceGroupPartition" /> to access the methods that are specific to members within service groups.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IServiceGroupPartition.ResolveMember``1(System.Uri)">
            <summary>
            <para>Enables the member to get direct access to the other members of the service group.</para>
            </summary>
            <param name="name">
            <para>The <c>fabric:/</c> name of the member to resolve.</para>
            </param>
            <typeparam name="T">
            <para>The type of the service member that should be resolved.</para>
            </typeparam>
            <returns>
            <para>Returns the member that is specified by name as an object of the specified type.</para>
            </returns>
            <remarks>
            <para>The <see cref="M:System.Fabric.IServiceGroupPartition.ResolveMember``1(System.Uri)" /> method enables a service group member to obtain a direct reference to the other members in the group. The direct object-object communication with the other members does not require communication outside of the machine or virtual machine, either for communication with the Naming service to resolve the member or via some external transport to send the actual commands to the member.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IServicePartition">
            <summary>
            <para>Provides information to the service about the partition to which it belongs and provides methods for the service to interact with the system during runtime.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})">
            <summary>
            <para>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})" /> method and provides one or more properties of the <see cref="T:System.Fabric.LoadMetric" /> method.</para>
            </summary>
            <param name="metrics">
            <para>A collection of <see cref="T:System.Fabric.LoadMetric" /> to report the load for. </para>
            </param>
            <remarks>
            <para>The reported metrics should correspond to those that are provided in the <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription" /> as a part of the <see cref="T:System.Fabric.Description.ServiceDescription" /> that is used to create the service. Load metrics that are not present in the description are ignored. Reporting custom metrics allows Service Fabric to balance services that are based on additional custom information.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)">
            <summary>
            <para>Enables the replica to report a fault to the runtime and 
            indicates that it has encountered an error from which it cannot 
            recover and must either be restarted or removed.</para>
            </summary>
            <param name="faultType">
            <para>The <see cref="T:System.Fabric.FaultType" /> that the service has encountered.</para>
            </param>
            <remarks>
            <para>A fault is typically reported when the service code encounters an issue from which it cannot recover.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.IServicePartition.PartitionInfo">
            <summary>
            <para>Provides access to the <see cref="T:System.Fabric.ServicePartitionInformation" /> of the service, which contains the partition type and ID.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ServicePartitionInformation" />.</para>
            </value>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportMoveCost(System.Fabric.MoveCost)">
            <summary>
            <para>Reports the move cost for a replica.</para>
            </summary>
            <param name="moveCost">
            <para>The reported <see cref="T:System.Fabric.MoveCost" />.</para>
            </param>
            <remarks>
            <para>Services can report move cost of a replica using this method. While the Service Fabric Resource Balances searches 
            for the best balance in the cluster, it examines both load information and move cost of each replica. 
            Resource balances will prefer to move replicas with lower cost in order to achieve balance. </para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports current partition health. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.IServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports current partition health. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the partition report is sent.</para>
            </param>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IStatefulServicePartition">
            <summary>
            <para>Represents a partition that is associated with a stateful service replica. </para>
            </summary>
            <remarks>
            <para>Derived from <see cref="T:System.Fabric.IServicePartition" />.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IStatefulServicePartition.ReadStatus">
            <summary>
            <para>Used to check the readiness of the replica in regard to read operations. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PartitionAccessStatus" />.</para>
            </value>
            <remarks>
            <para>The <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" /> should be checked before the replica is servicing a customer request that is a read operation.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.IStatefulServicePartition.WriteStatus">
            <summary>
            <para>Used to check the readiness of the partition in regard to write operations. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PartitionAccessStatus" />.</para>
            </value>
            <remarks>
            <para>The <see cref="P:System.Fabric.IStatefulServicePartition.WriteStatus" /> should be checked before the replica
            services a customer request that is a write operation.</para>
            </remarks>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Creates a <see cref="T:System.Fabric.FabricReplicator" /> with the specified settings and returns it to the replica. </para>
            </summary>
            <param name="stateProvider">
            <para>The <see cref="T:System.Fabric.IStateProvider" /> with which the returned <see cref="T:System.Fabric.FabricReplicator" /> should be associated. 
            This is often the same object that implements <see cref="T:System.Fabric.IStatefulServiceReplica" />, but certain services might be factored differently. </para>
            </param>
            <param name="replicatorSettings">
            <para>The <see cref="T:System.Fabric.ReplicatorSettings" /> with which the returned <see cref="T:System.Fabric.FabricReplicator" /> should be configured. </para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.FabricReplicator" />.</para>
            </returns>
            <remarks>
            <para>This method should be used to create a <see cref="T:System.Fabric.FabricReplicator" /> to service as the <see cref="T:System.Fabric.IStateReplicator" /> for a stateful service that implements <see cref="T:System.Fabric.IStateProvider" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health on the current stateful service replica of the partition.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.IStatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health on the current stateful service replica of the partition.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            Internally, the partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IStatefulServiceReplica">
            <summary>
            <para>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </para>
            </summary>
            <remarks>
            <para>
                Stateful service types must implement this interface. The <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservice">Reliable Stateful service</see> implements this interface and handles replica lifecycle internally. </para> 
            <para>
                The logic of a stateful service type includes behavior that is invoked on primary replicas and behavior that is invoked on secondary replicas.</para>
            <para>
                If the service author wants to make use of the provided <see cref="T:System.Fabric.FabricReplicator" />, then the service must also implement <see cref="T:System.Fabric.IStateProvider" /> to use the implementation of <see cref="T:System.Fabric.IStateReplicator" /> that is provided by <see cref="T:System.Fabric.FabricReplicator" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            <para>Initializes a newly created service replica.</para>
            </summary>
            <param name="initializationParameters">
            <para>The <see cref="T:System.Fabric.StatefulServiceInitializationParameters" /> for this replica.</para>
            </param>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Opens an initialized service replica so that additional actions can be taken.</para>
            </summary>
            <param name="openMode">
            <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
            </param>
            <param name="partition">
            <para>The <see cref="T:System.Fabric.IStatefulServicePartition" /> information for this replica.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" />&lt;<see cref="T:System.Fabric.IReplicator" />&gt;, 
            the <see cref="T:System.Fabric.IReplicator" /> that is used by the stateful service. To use the Service Fabric implementation, 
            in <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)" />, 
            the replica should return a <see cref="T:System.Fabric.FabricReplicator" /> that is obtained 
            from  <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            <para>Changes the role of the service replica to one of the <see cref="T:System.Fabric.ReplicaRole"/>. </para>
            </summary>
            <param name="newRole">
            <para>The updated <see cref="T:System.Fabric.ReplicaRole" /> that this replica should transition to.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type <see cref="T:System.String" />, the service’s new connection address that is to be associated
            with the replica via Service Fabric Naming.</para>
            </returns>
            <remarks>
            <para>The new role is indicated as a parameter. When the service transitions to the new role, the service has a chance to update its current listening address.
            The listening address is the address where clients connect to it and the one returned via the 
            <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.client.servicepartitionresolver#Microsoft_ServiceFabric_Services_Client_ServicePartitionResolver_ResolveAsync_System_Fabric_ResolvedServicePartition_System_Threading_CancellationToken_">ResolveAsync</see> API. 
            This enables the service when it is a primary replica to only claim some resources such as ports when communication from clients is expected.</para>
            <seealso href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-communication"/>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the service replica gracefully when it is being shut down.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.Abort">
            <summary>
            <para>Ungracefully terminates the service replica.</para>
            </summary>
            <remarks>
            <para>Network issues resulting in Service Fabric process shutdown and the use of <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)" /> 
            to report a <see cref="F:System.Fabric.FaultType.Permanent" /> fault are examples of ungraceful termination. When this method is invoked, 
            the service replica should immediately release and clean up all references and return.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IStatelessServiceInstance">
            <summary>
            <para>Defines behavior that governs the lifecycle of a stateless service instance, such as startup, initialization, and shutdown. </para>
            <remarks>
            Stateless service types must implement this interface. The <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statelessservice">Reliable Stateless service</see> implements this interface and handles instance lifecycle internally.
            </remarks>
            </summary>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)">
            <summary>
            <para> Initializes a newly created service instance.</para>
            </summary>
            <param name="initializationParameters">
            <para>The <see cref="T:System.Fabric.StatelessServiceInitializationParameters" /> for this service.</para>
            </param>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Opens an initialized service instance so that it can be contacted by clients.</para>
            </summary>
            <param name="partition">
            <para>
                The <see cref="T:System.Fabric.IStatelessServicePartition" /> that this instance is associated with</para>        
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation
            should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type <see cref="T:System.String" />.</para>
            </returns>
            <remarks>
            <para>Opening an instance stateless service indicates that the service is now resolvable and discoverable by service clients. The string that is returned
            is the address of this service instance. The address is associated with the service name via Service Fabric naming and returned to clients 
            that resolve the service via <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Closes this service instance gracefully when the service instance is being shut down.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification
            that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.Abort">
            <summary>
            <para> Terminates this instance ungracefully with this synchronous method call. </para>
            </summary>
            <remarks>
            <para>Examples of ungraceful termination are network issues resulting in Service Fabric process shutdown and the use of 
            <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)" /> to report a <see cref="F:System.Fabric.FaultType.Permanent" /> fault. 
            When the service instance receives this method, it should immediately release and clean up all references and return.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IStatelessServicePartition">
            <summary>
            <para>Represents a partition that is associated with a stateless service instance.</para>
            </summary>
            <remarks>
            <para>Provided to a stateless service as a parameter to the <see cref="T:System.Fabric.IServicePartition" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health information on the current stateless service instance of the partition. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.IStatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health information on the current stateless service instance of the partition. 
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property and health state.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServicePartition.ReportCompletion">
            <summary>
            Reports completion of the current stateless service instance of the partition. As part of the completion, service instance will be closed and no replacement 
            for this service instance will be created in the Service Fabric cluster.
            </summary>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The instance has either been closed or is about to be closed.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.IStateProvider">
            <summary>
            <para>Defines the behavior that a service must implement to interact with the <see cref="T:System.Fabric.FabricReplicator" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber">
            <summary>
            <para>Obtains the last sequence number that the service has committed, also known as Logical Sequence Number (LSN). </para>
            </summary>
            <returns>
            <para>Returns the last committed sequence number.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the primary replica. 
            The change occurs due to failure or load balancing of the previous primary replica. Epoch changes act as a barrier by segmenting operations 
            into the exact configuration periods in which they were sent by a specific primary replica.</para>
            </summary>
            <param name="epoch">
            <para>The new <see cref="T:System.Fabric.Epoch" />.</para>
            </param>
            <param name="previousEpochLastSequenceNumber">
            <para> The maximum sequence number (LSN) in the previous epoch.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification 
            that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
            </returns>
            <remarks>
            <para>The information in the <see cref="M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)" /> 
            method enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. </para>
            <para>
                The progress vector data along with the current applied maximum LSN is useful for a secondary replica to send during the copy operation to describe the state of the replica.</para> 
            <para>
                Comparing progress vectors that are received from secondary replicas during the copy operation enables primary replicas to determine whether the secondary replica is up-to-date, 
                what state must be sent to the secondary replica, and whether the secondary replica has made false progress. </para>
            <para>False progress means that a secondary replica reports an LSN in a previous epoch was greater than the LSN that the primary replica has in its progress vector. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that a write quorum of replicas in this replica set has been lost, and that therefore data loss might have occurred. 
            The replica set consists of a majority of replicas, which includes the primary replica. </para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. 
            It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type <see cref="T:System.Boolean" />, that indicates whether the state provider as part of processing this notification has changed its state</para>
            </returns>
            <remarks>
            <para>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the primary replica, 
            it elects a new primary replica and immediately calls this method on the new primary replica. A primary replica that is informed of possible data loss
            can choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state,
            it should return false from this method, which indicates that no state change has been made. If it has restored or altered its state,
            such as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect.
            Therefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateProvider.GetCopyContext">
            <summary>
            <para>Obtains context on a secondary replica after it is created and opened to send context to the primary replica.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IOperationDataStream" />.</para>
            </returns>
            <remarks>
            <para>The primary replica analyzes the context and sends back state via <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)" />.</para>
            <para>
                <see cref="M:System.Fabric.IStateProvider.GetCopyContext" /> is called on newly created, idle secondary replicas and provides
                a mechanism to asynchronously establish a bidirectional conversation with the primary replica. The secondary replica sends <see cref="T:System.Fabric.OperationData" />
                objects with which the primary replica can determine the progress of collecting context on the secondary replica. The primary replica responds by sending the required state back.
                See <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)" /> at the primary replica for the other half of the exchange. </para>
            <para>For in-memory services, the <see cref="M:System.Fabric.IStateProvider.GetCopyContext" /> method is not called, 
            as the state of the secondary replicas is known (they are empty and will require all of the state).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)">
            <summary>
            <para>Obtains state on a primary replica that is required to build a secondary replica.</para>
            </summary>
            <param name="upToSequenceNumber">
            <para>The maximum last sequence number that should be placed in the copy stream via the <see cref="M:System.Fabric.IStateReplicator.GetCopyStream" /> method.
            LSNs greater than this number are delivered to the secondary replica as a part of the replication stream via the <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream" /> method.</para>
            </param>
            <param name="copyContext">
            <para>An <see cref="T:System.Fabric.IOperationDataStream" /> that contains the <see cref="T:System.Fabric.OperationData" /> objects that are created by the secondary replica. </para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IOperationDataStream" />.</para>
            </returns>
            <remarks>
            <para>Just as <see cref="M:System.Fabric.IStateProvider.GetCopyContext" /> enables the secondary replica to send context to the primary replica via
            an <see cref="T:System.Fabric.IOperationDataStream" />, <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)" /> enables the primary replica to respond with an <see cref="T:System.Fabric.IOperationDataStream" />. The stream contains objects that are delivered to the secondary replica via the <see cref="M:System.Fabric.IStateReplicator.GetCopyStream" /> method of the <see cref="T:System.Fabric.FabricReplicator" /> class. The objects implement <see cref="T:System.Fabric.IOperation" /> and contain the specified data. </para>
            <para> When the primary replica receives this call, it should create and return another <see cref="T:System.Fabric.IOperationDataStream" /> 
            that contains <see cref="T:System.Fabric.OperationData" />. <see cref="T:System.Fabric.OperationData" /> represents the data/state that the secondary replica
            requires to catch up to the provided <paramref name="upToSequenceNumber" /> maximum LSN. 
            How much and which state has to be sent can be determined via the context information that the secondary replica provides via 
            <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> method.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IStateReplicator">
            <summary>
            <para>Exposes replication-related functions of the <see cref="T:System.Fabric.FabricReplicator" /> class that are used by <see cref="T:System.Fabric.IStateProvider" /> to replicate state to ensure high availability. </para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied.</para>
            </summary>
            <param name="operationData">
            <para>The <see cref="T:System.Fabric.OperationData" /> that represents the state change that the Primary replica wants to replicate.</para>
            </param>
            <param name="cancellationToken">
            <para> A write quorum of replicas that have been lost. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="sequenceNumber">
            <para>Long, the LSN of the operation. Note that this is the same value which is returned by the task. Providing it as an out parameter is useful for services which want to prepare the local write to commit when the task finishes.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type long, the LSN of the operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="T:System.Fabric.FabricTransientException" /> is a retriable exception. It is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NoWriteQuorum" /> is returned when the replicator does not currently have write quorum..</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReconfigurationPending" /> is returned when the replicator has a pending reconfiguration.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull" /> is returned when the replicator queue is full.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            <para>
                <see cref="T:System.Fabric.FabricNotPrimaryException" /> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NotPrimary" /> is returned when the replicator has a pending reconfiguration.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                <see cref="T:System.Fabric.FabricObjectClosedException" /> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ObjectClosed" /> is returned when the replicator has been closed.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>
                <see cref="T:System.OperationCanceledException" /> is caused by one of the following;</para>
            <para>E_ABORT when replicator cancels an inflight replication operation.</para>
            </exception>
            <remarks>
            <para>Replication at the Primary replica produces the objects that implement <see cref="T:System.Fabric.IOperation" /> that the Secondary replica obtains from the Replication Stream via <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream" />, which is followed by <see cref="M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)" />. </para>
            <para>The Primary replica has many duties that are related to process state updates. The following steps show the general sequence of events that a Primary replica must handle to replicate and acknowledge a change. </para>
            <para>Part 1: Handling incoming requests: Receive request: Write(x) – Service receives a write request, x. CheckArguments – The service checks the arguments of the request. This check helps ensure the consistency of the service’s state.</para>
            <para>Check current state – The service examines its current state to ensure that the operation is valid and can or should be performed. This check also helps ensure data consistency. It is performed by the service code.</para>
            <para>Acquire Locks – The service should acquire the necessary locks to prevent additional operations from occurring at the same time. This operation helps ensure isolation and consistency.</para>
            <para>Attempt Operation (optional) – The service can attempt the operation locally. This step reserves and allocates space and performs all the necessary computations. This step includes everything but the actual commit of the result. This operation improves the durability of the operation and makes later failures very unlikely.</para>
            <para>Manufacture the OperationData – An <see cref="T:System.Fabric.OperationData" /> object is the representation of the
            Write(x) that was presented to the service. The <see cref="T:System.Fabric.OperationData" /> object contains the state change to be transferred with acknowledgement from the Primary replica to the Secondary replicas. The data that the service places in the OperationData defines the atomic update that the <see cref="T:System.Fabric.FabricReplicator" /> transfers to the Secondary replicas. Note that creating of the 
            <see cref="T:System.Fabric.OperationData" /> object requires one or more byte arrays. The service must itself determine and serialize the change in state, and then provide this set of bytes to the FabricReplicator via <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)" />. The service sends the operation to the FabricReplicator and receives a logical sequence number (LSN) in return. The LSN is the identity for the operation and helps both the service and Service Fabric ensure that operations are always applied in the same order everywhere.The service should record the OperationData along with its LSN in an ordered list of in-flight operations. This ensures that when the operations are completed, they can be consistently applied in the correct order.</para>
            <para>Release Locks - Continue processing or waiting for further requests.</para>
            <para>Part 2: Completing requests and responding: The Primary replica receives a callback that indicates that the operation has been applied. ReplicateAsync is completed. This callback indicates that the operation has been acknowledged by a quorum of the replicas in the replica set. When the Primary replica receives this callback, it should perform the following actions: </para>
            <para>Find the corresponding operation that is indicated by the long LSN that is returned from ReplicateAsync in the service’s in-flight list and mark it as "QuorumAck’d". </para>
            <para>Now, starting at the first operation in the in-flight list, go through the list and locally commit all of the QuorumAck’d operations, finish any changes to the local state and mark the state changes with their corresponding LSN, until the first incomplete operation is encountered. This ensures that ordering is preserved (consistency) and that the operations are actually applied. This takes advantage of the previous durability and isolation preparations. Note: Most services should cache the last committed LSN value so that responses to the <see cref="M:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber" /> do not require querying the actual store for the greatest LSN. </para>
            <para>When an operation is successfully committed at the Primary replica, the Primary replica can now reply to the client that initiated the call and remove the operation from the in-flight list. Continue to wait for the next quorum-acknowledgment callback.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateReplicator.GetCopyStream">
            <summary>
              <para>Gets copy stream.</para>
            </summary>
            <returns>
            <para>Returns the copy <see cref="T:System.Fabric.IOperationStream" />. </para>
            </returns>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="T:System.Fabric.FabricTransientException" /> is a retriable exception. It is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReconfigurationPending" /> is returned when the replicator has a pending reconfiguration.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                <see cref="T:System.Fabric.FabricObjectClosedException" /> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ObjectClosed" /> is returned when the replicator has been closed.</para>
            </exception>
            <remarks>
            <para>The returned CopyStream is an <see cref="T:System.Fabric.IOperationStream" /> that contains <see cref="T:System.Fabric.OperationData" /> objects that implement <see cref="T:System.Fabric.IOperation" />. The <see cref="T:System.Fabric.OperationData" /> objects are obtained from the CopyState <see cref="T:System.Fabric.IOperationDataStream" /> that the Primary replica returns from <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)" />. When a replica is created and has to catch up, it should obtain the CopyStream and begin to send, apply, and acknowledge the Copy objects that implement <see cref="T:System.Fabric.IOperation" />. In parallel, the replica responds to the corresponding <see cref="M:System.Fabric.IStateProvider.GetCopyContext" /> and <see cref="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)" /> calls. The stream is empty when the returned <see cref="T:System.Fabric.IOperation" /> method is null.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateReplicator.GetReplicationStream">
            <summary>
              <para>Gets replication stream.</para>
            </summary>
            <returns>
            <para>Returns the replication <see cref="T:System.Fabric.IOperationStream" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="T:System.Fabric.FabricTransientException" /> is a retriable exception. It is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReconfigurationPending" /> is returned when the replicator has a pending reconfiguration.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                <see cref="T:System.Fabric.FabricObjectClosedException" /> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ObjectClosed" /> is returned when the replicator has been closed.</para>
            </exception>
            <remarks>
            <para>The ReplicationStream implements <see cref="T:System.Fabric.IOperationStream" />. The ReplicationStream contains <see cref="T:System.Fabric.OperationData" /> objects that implement <see cref="T:System.Fabric.IOperation" />. The objects are provided by the Primary replica via <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)" />. Generally a Secondary replica should send <see cref="M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)" />. Although Service Fabric does not require services to do so, generally services should transfer all <see cref="T:System.Fabric.OperationData" /> objects out of the copy stream first, and then transfer operations out of the replication stream. The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services. The stream is empty when the returned <see cref="T:System.Fabric.IOperation" /> method is null.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateReplicator.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Enables modification of replicator settings during runtime. The only setting which can be modified is the security credentials. </para>
            </summary>
            <param name="settings">
            <para>The new <see cref="T:System.Fabric.ReplicatorSettings" /> with the updated credentials.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.IStateReplicator2">
            <summary>
            <para>Exposes replication-related functions of the <see cref="T:System.Fabric.FabricReplicator" /> class that are used by <see cref="T:System.Fabric.IStateProvider" /> to replicate state to ensure high availability.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStateReplicator2.GetReplicatorSettings">
            <summary>
            <para>Retrieves the replicator settings during runtime.</para>
            </summary>
            <returns>
            <para>The current <see cref="T:System.Fabric.ReplicatorSettings" /> from the Service Fabric runtime.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.KeyValueStoreEnumerator">
            <summary>
            <para>Reads the local store contents of a secondary replica within the context of a copy completion callback.</para>
            <seealso cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" />.
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreEnumerator.Enumerate(System.String)">
            <summary>
            <para>Enumerates the local store contents and includes the data value for all enumerated key-value pairs.</para>
            </summary>
            <param name="keyPrefix">
            <para>Specifies an optional key-prefix filter to apply during enumeration.</para>
            </param>
            <returns>
            <para>An enumerator over the local store contents.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreEnumerator.Enumerate(System.String,System.Boolean)">
            <summary>
            <para>Enumerates the local store contents and includes the data value for all enumerated key-value pairs.</para>
            </summary>
            <param name="keyPrefix">
            <para>Specifies an optional key-prefix filter to apply during enumeration.</para>
            </param>
            <param name="strictPrefix">
            <para>When true, only keys prefixed by the value specified for <b>keyPrefix</b> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <b>keyPrefix</b> and continues until there are no more keys. The default is <b>true</b>.</para>
            </param>
            <returns>
            <para>An enumerator over the local store contents.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreEnumerator.EnumerateMetadata(System.String)">
            <summary>
            <para>Enumerates the local store contents but excludes the data value for all enumerated key-value pairs.</para>
            </summary>
            <param name="keyPrefix">
            <para>Specifies an optional prefix filter to apply during enumeration.</para>
            </param>
            <returns>
            <para>An enumerator over the local store contents.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreEnumerator.EnumerateMetadata(System.String,System.Boolean)">
            <summary>
            <para>Enumerates the local store contents but excludes the data value for all enumerated key-value pairs.</para>
            </summary>
            <param name="keyPrefix">
            <para>Specifies an optional key-prefix filter to apply during enumeration.</para>
            </param>
            <param name="strictPrefix">
            <para>When true, only keys prefixed by the value specified for <b>keyPrefix</b> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <b>keyPrefix</b> and continues until there are no more keys. The default is <b>true</b>.</para>
            </param>
            <returns>
            <para>An enumerator over the local store contents.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.KeyValueStoreItem">
            <summary>
            <para>Represents an item in the key/value store.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItem.Metadata">
            <summary>
            <para>Gets a <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object that represents the metadata for an item in the key/value store. </para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object that represents the metadata for an item in the key/value store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItem.Value">
            <summary>
            <para>Gets a <see cref="T:System.Byte" /> that represents the value of an item in the key/value store.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Byte" /> that represents the value of an item in the key/value store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreItemMetadata">
            <summary>
            <para>Represents the metadata that are associated with a <see cref="T:System.Fabric.KeyValueStoreItem" /> object in the Key/Value store.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.Key">
            <summary>
            <para>Gets the key of the associated <see cref="T:System.Fabric.KeyValueStoreItem" /> object.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String" /> that represents the key of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.ValueSizeInBytes">
            <summary>
            <para>Gets the size in bytes of the sequence number of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object.</para>
            </summary>
            <value>
            <para>The size in bytes of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object, as a <see cref="T:System.Int32" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.SequenceNumber">
            <summary>
            <para>Gets the sequence number of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object.</para>
            </summary>
            <value>
            <para>The sequence number of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object, as a <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.LastModifiedUtc">
            <summary>
            <para>Gets the last modified time (UTC) of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.DateTime" /> that represents the last modified time of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.LastModifiedOnPrimaryUtc">
            <summary>
            <para>
            Gets the last modified time (UTC) of the <see cref="T:System.Fabric.KeyValueStoreItem" /> object
            by the primary replica of the service.
            </para>
            </summary>
            <value>
            <para>
            A <see cref="T:System.DateTime" /> that represents the last modified time of the 
            <see cref="T:System.Fabric.KeyValueStoreItem" /> object on primary replica of the service.
            </para>
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreNotification">
            <summary>
            <para>Contains all the information for a replicated operation received by a secondary replica.</para>
            </summary>
            <remarks>
            <para>See <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" />.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.KeyValueStoreNotification.Metadata">
            <summary>
            <para>Gets or sets the metadata describing this replicated operation.</para>
            </summary>
            <value>
            <para>The metadata describing this replicated operation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreNotification.Value">
            <summary>
            <para>Gets or sets the data (if any) for this replicated operation. Null if this is a delete operation.</para>
            </summary>
            <value>
            <para>The data (if any) for this replicated operation. Null if this is a delete operation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreNotification.IsDelete">
            <summary>
            <para>Indicates that this is a replicated delete operation.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if this is a replicated delete operation; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreReplica">
            <summary>
            <para>Provides a transactional, replicated, associative data storage component to service writers - ready for integration into any Service Fabric service.</para>
            This is used by legacy Service Fabric services. All new services should use the <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">Reliable Collections</see>.
            </summary>
        </member>
        <member name="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode">
            <summary>
            <para>Specifies the behavior of <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" /> and <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" /> for replicas in the secondary role.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.Invalid">
            <summary>
            <para>An invalid secondary notification mode. Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.None">
            <summary>
            <para>Secondary notifications are disabled. Neither <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" /> nor <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" /> will be invoked.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.NonBlockingQuorumAcked">
            <summary>
            <para>The secondary replica may have already applied and acknowledged replication operations when the <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" /> callback method is invoked. Operations are guaranteed to have been acked by a quorum of replicas by the time the callback is invoked.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.BlockSecondaryAck">
            <summary>
            <para>The secondary replica will not apply or acknowledge replication operations until the <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" /> callback method returns. Operations are not guaranteed to have been acked by a quorum of replicas at the time the callback is invoked.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.KeyValueStoreReplica.FullCopyMode">
            <summary>
            <para>Specifies the behavior to use when building new secondary replicas (full copy).</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.FullCopyMode.Default">
            <summary>
            <para>The full copy mode specified in the cluster manifest will be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.FullCopyMode.Physical">
            <summary>
            <para>Full copies will be performed by taking a backup of the primary replica database and sending the physical database files to secondary replicas for restoration. This is the recommended and default mode.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.FullCopyMode.Logical">
            <summary>
            <para>Full copies will be performed by reading all database contents and sending them to secondary replicas for replay against their own databases. Since this mode requires opening a long-running transaction on the primary for the duration of the build, it's only recommended for small databases or services with low write activity. This mode enables changing database parameters that are normally fixed after initialization such as <see cref="P:System.Fabric.LocalEseStoreSettings.DatabasePageSizeInKB" /> and <see cref="P:System.Fabric.LocalEseStoreSettings.LogFileSizeInKB" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.FullCopyMode.Rebuild">
            <summary>
            <para>Full copies will be performed as a physical copy, but with an additional step of replaying all database contents in primary index order to a new database on the secondary. This mode also enables changing database parameters that are normally fixed after initialization, but will take longer than either physical or logical build due to the extra replay step. After replay, the final data layout is optimal since insertion occurred in primary index order. Currently not supported in Linux.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.KeyValueStoreReplica.IgnoreSequenceNumberCheck">
             <summary>
             <para>Indicates that sequence number checking should not occur.</para>
             </summary>
             <remarks>
             <para>
             Can be used in APIs accepting a check sequence number parameter to indicate that sequence number checking
             should not occur:
             <list type="bullet">
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
             </list>
            
             This is equivalent to calling API overloads that do not have a check sequence number parameter:
             <list type="bullet">
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)" /></description></item>
             </list>
             </para>
             </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <remarks>
            <para>The store name should conform to valid filename characters.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name and local store settings.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="localStoreSettings">
            <para>The optional settings for the local store.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name and store replicator settings.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="replicatorSettings">
            <para>The option settings for the key/value store replicator.</para>
            </param>
            <remarks>
            <para>The store name should conform to valid filename characters.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name, local store settings, and replicator settings.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="localStoreSettings">
            <para>The optional settings for the local store.</para>
            </param>
            <param name="replicatorSettings">
            <para>The option settings for the key/value store replicator.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name, local store settings, and replicator settings. Secondary replica notifications are enabled via the notification mode.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="localStoreSettings">
            <para>The optional settings for the local store.</para>
            </param>
            <param name="replicatorSettings">
            <para>The option settings for the key/value store replicator.</para>
            </param>
            <param name="notificationMode">
            <para>The secondary notification mode to enable <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" /> 
            and <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" /> 
            callbacks on this replica.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplicaSettings)">
            <summary>
            Initializes a new instance of the KeyValueStoreReplica class with the specified key/value store name, local store settings, replicator settings, and replica settings.
            </summary>
            <param name="storeName">The name of the key/value store.</param>
            <param name="localStoreSettings">The optional settings for the local store.</param>
            <param name="replicatorSettings">The optional settings for the key/value store replicator.</param>
            <param name="kvsSettings">The optional settings for the key/value store replica.</param>
        </member>
        <member name="E:System.Fabric.KeyValueStoreReplica.DataLossReported">
            <summary>
            Handler for data loss events.
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnDatalossReported(System.EventArgs)">
            <summary>
            <para>Signals that the replica set may have experienced data loss. The application can either override this method or listen for the
            <see cref="E:System.Fabric.KeyValueStoreReplica.DataLossReported" /> Event. Both represent the same event</para>
            </summary>
            <param name="args">
            <para>Currently contains no data. Reserved for future use.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            Signals that the replica set may have experienced data loss. The application can either override this method to process the event asynchronously 
            or use the <see cref="E:System.Fabric.KeyValueStoreReplica.DataLossReported" /> event to process synchronously. Both represent the same event.
            </summary>
            <param name="cancellationToken">The token used to check for cancellation of the operation.</param>
            <returns>True to indicate that data was modified during recovery and the replica set needs to be resynchronized. Otherwise, false to indicate that data has not been modified.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnRestoreCompletedAsync(System.Threading.CancellationToken)">
            <summary>
            Signals that the replica's state was successfully restored by the system.
            This is invoked only when system internally triggers a restore via the Backup Restore service.
            </summary>
            <param name="cancellationToken">The token used to check for cancellation of the operation.</param>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.StoreName">
            <summary>
            <para>Gets or sets the name of the key/value store.</para>
            </summary>
            <value>
            <para>The name of the key/value store.</para>
            </value>
            <remarks>
            <para>The store name should conform to valid filename characters.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.LocalStoreSettings">
            <summary>
            <para>Gets or sets the option settings for the local key/value store.</para>
            </summary>
            <value>
            <para>The local store option settings.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.ReplicatorSettings">
            <summary>
            <para>Gets or sets the option settings for the key/value store replicator.</para>
            </summary>
            <value>
            <para>The store replicator option settings.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings">
            <summary>
            <para>Gets or sets the option settings for the <see cref="T:System.Fabric.KeyValueStoreReplica"/>.</para>
            </summary>
            /// <value>
            <para>The <see cref="T:System.Fabric.KeyValueStoreReplica"/> option settings.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.NotificationMode">
            <summary>
            <para>Gets the secondary notification mode specified during construction of this replica.</para>
            </summary>
            <value>
            <para>The current secondary notification mode</para>
            </value>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            <para>Initializes the replica in preparation for opening.</para>
            </summary>
            <param name="initializationParameters">
            <para>The initialization information for the replica.</para>
            </param>
            <remarks>
            <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />,
            which is the recommended pattern. In this case, the application replica should override
            <see cref="M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)" /> instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Opens the replica and its replicator in preparation for coming online in a replica set.</para>
            </summary>
            <param name="openMode">
            <para>Specifies the context under which this replica is being opened.</para>
            </param>
            <param name="partition">
            <para>Contains information describing the replica set to which this replica belongs.</para>
            </param>
            <param name="cancellationToken">
            <para>Currently unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A Task to indicate completion of the open <see cref="T:System.Threading.Tasks.Task`1" />.</para>
            </returns>
            <remarks>
            <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />, 
            which is the recommended pattern. In this case, the application replica should override OnOpenAsync instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            <para>Changes the replica role of the replica and its replicator.</para>
            </summary>
            <param name="newRole">
            <para>The target replica role.</para>
            </param>
            <param name="cancellationToken">
            <para>Currently unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A task whose result is the address of this replica.</para>
            </returns>
            <remarks>
            <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />, 
            which is the recommended pattern. In this case, the application replica should override <see cref="M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)" /> instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the replica and its replicator in preparation for going offline from a replica set.</para>
            </summary>
            <param name="cancellationToken">
            <para>Currently unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <remarks>
            <para>The replica has not necessarily been removed permanently from the replica set and may be re-opened at a later time. The most common causes for closing a replica is graceful shutdown in preparation for upgrade or load balancing. This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />, which is the recommended pattern. In this case, the application replica should override <see cref="M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)" /> instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Abort">
            <summary>
            <para>Aborts this instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetCurrentEpoch">
            <summary>
            <para>Gets the current epoch for the key/value store.</para>
            </summary>
            <returns>
            <para>The current epoch for the key/value store.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Updates the key/value store replicator with the settings in the specified <see cref="T:System.Fabric.ReplicatorSettings" /> object.</para>
            </summary>
            <param name="settings">
            <para>The settings used to update the key/value store replicator.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.CreateTransaction">
            <summary>
            <para>Creates a unique <see cref="T:System.Fabric.Transaction" /> instance, which is used to commit or rollback groups of key/value store operations.</para>
            </summary>
            <returns>
            <para>A <see cref="T:System.Fabric.Transaction" /> object representing a transaction.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)">
            <summary>
            <para>Creates a unique <see cref="T:System.Fabric.Transaction" /> instance, which is used to commit or rollback groups of key/value store operations.</para>
            </summary>
            <param name="settings">
            <para>The transaction settings.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.Transaction" /> object representing a transaction.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase,System.String,System.Byte[])">
            <summary>
            <para>Adds a value indexed by the specified key to the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be added (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="value">
            <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryAdd(System.Fabric.TransactionBase,System.String,System.Byte[])">
            <summary>
            Attempts to add a value indexed by the specified key to the key/value store.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be added (as a string). Limited to 800 characters in length.</param>
            <param name="value">The value (as a byte array) to be stored, limited to 2GB in length.</param>
            <returns>True if the specified key was not already found and added. False if the specified key already exists.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Removes the value indexed by the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)">
            <summary>
            <para>Removes the value indexed by the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="checkSequenceNumber">
              <para>The expected sequence number of the key to be removed.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)">
            <summary>
            Attempts to remove the value indexed by the specified key.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</param>
            <returns>True if the specified key was found and removed. False if the specified key does not exist.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)">
            <summary>
            Attempts to remove the value indexed by the specified key.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</param>
            <param name="checkSequenceNumber">The expected sequence number of the key to be removed.</param>
            <returns>True if the specified key was found and removed. False if the specified key does not exist.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])">
            <summary>
            <para>Updates the stored value associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="value">
            <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)">
            <summary>
            <para>Updates the value indexed by the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="value">
            <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
            </param>
            <param name="checkSequenceNumber">
              <para>The expected sequence number of the key to be updated.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])">
            <summary>
            Attempts to update the value indexed by the specified key.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be updated (as a string). Limited to 800 characters in length.</param>
            <param name="value">The value (as a byte array) to be stored, limited to 2GB in length.</param>
            <returns>True if the specified key was found and updated. False if the specified key does not exist.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)">
            <summary>
            Attempts to update the value indexed by the specified key.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be updated (as a string). Limited to 800 characters in length.</param>
            <param name="value">The value (as a byte array) to be stored, limited to 2GB in length.</param>
            <param name="checkSequenceNumber">The expected sequence number of the key to be updated.</param>
            <returns>True if the specified key was found and updated. False if the specified key does not exist.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Contains(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Determines whether a value is contained in the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to look up (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value is contained in the key/value store; <languageKeyword>false</languageKeyword>, otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Get(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Gets the stored value, as a <see cref="T:System.Fabric.KeyValueStoreItem" /> object, associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItem" /> object representing the stored value.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryGet(System.Fabric.TransactionBase,System.String)">
            <summary>
            Attempts to get the stored value, as a <see cref="T:System.Fabric.KeyValueStoreItem" /> object, associated with the specified key.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.</param>
            <returns>A <see cref="T:System.Fabric.KeyValueStoreItem" /> object representing the stored value or null if the specified key does not exist.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetValue(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Gets the stored value as a byte array, associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A byte array representing the stored value.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryGetValue(System.Fabric.TransactionBase,System.String)">
            <summary>
            Attempts to get the stored value as a byte array, associated with the specified key.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.</param>
            <returns>A byte array representing the stored value or null if the specified key does not exist.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetMetadata(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Gets the metadata, as a <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object, for the value associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object representing the metadata associated with the specified value.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryGetMetadata(System.Fabric.TransactionBase,System.String)">
            <summary>
            Attempts to get the metadata as a <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object, for the value associated with the specified key.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="key">The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.</param>
            <returns>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object representing the metadata associated with the specified value or null if the specified key does not exist.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem" /> values in the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <remarks>
            <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
            </remarks>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItem" /> enumerator.</para>
            </returns>
            <remarks>
            <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem" /> values in the key/value store, where the value keys match the specified key prefix.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="keyPrefix">
            <para>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</para>
            </param>
            <remarks>
            <para>
            Equivalent to calling <see cref="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)" /> with <b>strictPrefix</b> set to <languageKeyword>true</languageKeyword>.
            </para>
            <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
            </remarks>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItem" /> enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem" /> values in the key/value store.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="keyPrefix">The key, or index, prefix to match (as a string). Limited to 800 characters in length.</param>
            <param name="strictPrefix">When true, only keys prefixed by the value specified for <b>keyPrefix</b> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <b>keyPrefix</b> and continues until there are no more keys. The default is <b>true</b>.</param>
            <remarks>
            <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
            </remarks>
            <returns>A <see cref="T:System.Fabric.KeyValueStoreItem" /> enumerator.</returns>
            <remarks>
            <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.EnumerateBySequenceNumber(System.Fabric.TransactionBase,System.Int64)">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem"/> values in the key/value store in order of sequence number.
            </summary>
            <param name="transactionBase">The transaction instance</param>
            <param name="fromSequenceNumber">The sequence number to start at</param>
            <returns>A <see cref="T:System.Fabric.KeyValueStoreItem"/> enumerator. The item are enumerated in increasing sequence number order</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.EnumerateKeysAndTombstonesBySequenceNumber(System.Fabric.TransactionBase,System.Int64)">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem"/> values and tombstones in the key/value store in order of sequence number.
            </summary>
            <param name="transactionBase">The transaction instance</param>
            <param name="fromSequenceNumber">The sequence number to start at</param>
            <returns>A <see cref="T:System.Fabric.KeyValueStoreItem"/> enumerator. The item are enumerated in increasing sequence number order</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> values in the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> values in the key/value store, where the value keys match the specified key prefix.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="keyPrefix">
            <para>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</para>
            </param>
            <remarks>
            Equivalent to calling <see cref="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)" /> with <b>strictPrefix</b> set to <languageKeyword>true</languageKeyword>.
            </remarks>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> values in the key/value store.
            </summary>
            <param name="transactionBase">The transaction instance.</param>
            <param name="keyPrefix">The key, or index, prefix to match (as a string). Limited to 800 characters in length.</param>
            <param name="strictPrefix">When true, only keys prefixed by the value specified for <b>keyPrefix</b> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <b>keyPrefix</b> and continues until there are no more keys. The default is <b>true</b>.</param>
            <returns>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> enumerator.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetLastCommittedSequenceNumber">
            <summary>
            Gets the last committed sequence number
            </summary>
            <returns>The last committed sequence number</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.TryAbortExistingTransactionsAndRejectWrites">
            <summary>
            Intended for use for migrating data from KVS to another data store.
            After calling, writes will remain blocked until replica restart.
            Checks whether KVS is ready for the final migration to another store.
            If this is called but KVS has not begun migration preparation (which would happen in the case of a KVS failover)
            this will begin preparation again.
            </summary>
            <returns>Boolean representing whether KVS is ready for final migration or not</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetLSNSplitPercentile(System.Int32)">
            <summary>
            Gets an LSN approximately percentile% of the way through the KVS store.
            </summary>
            <returns>The sequence number approximately at the percentile provided</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Backup(System.String)">
            <summary>
            <para>DEPRECATED. Performs a full backup of the replica's local store to the specified destination directory. </para>
            </summary>
            <param name="backupDirectory">
            <para>The full path of the backup destination directory.</para>
            </param>
            <remarks>
            <para>
            This method is obsolete. Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> instead.</para>
            <para>
            Incremental backups are not supported after creating a full backup using this method. 
            Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> to create
            a full backup if subsequent incremental backups are to be created.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            <para>Asynchronously creates a backup of the key/value store.</para>
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be <b>null</b>.
            Otherwise, this parameter cannot be <b>null</b>, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">
            <para>The options for the backup.</para>
            </param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Service Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <b>null</b> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <b>backupDirectory</b> is <b>null</b> when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <b>backupDirectory</b> is empty or contains just whitespaces when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            <b>backupDirectory</b> is not <b>null</b> when <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a backup of the key/value store.
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be <b>null</b>.
            Otherwise, this parameter cannot be <b>null</b>, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">
            <para>The options for the backup.</para>
            </param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Service Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <b>null</b> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <b>backupDirectory</b> is <b>null</b> when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <b>backupDirectory</b> is empty or contains just whitespaces when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            <b>backupDirectory</b> is not <b>null</b> when <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Restore(System.String)">
            <summary>
            <para>Restores this replica's local store database from a backup that was previously created by calling <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/>.</para>
            </summary>
            <param name="backupDirectory">
            <para>The full path to a directory containing a backup.</para>
            </param>
            <remarks>
            <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
            <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)">
            <summary>
            <para>Restores this replica's local store database from a backup that was previously created by calling <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/>.</para>
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <b>backupDirectory</b> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <b>backupDirectory</b> is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <b>backupDirectory</b> does not exist.
            </exception>
            <remarks>
            <para>It is recommended to not perform any write operations to the key/value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in <b>backupDirectory</b>. </para>
            <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
            <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Restores this replica's local store database from a backup that was previously created by calling <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/>.</para>
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="cancellationToken">
            <para>The cancellation token</para>
            </param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <b>backupDirectory</b> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <b>backupDirectory</b> is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <b>backupDirectory</b> does not exist.
            </exception>
            <remarks>
            <para>It is recommended to not perform any write operations to the key/value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in <b>backupDirectory</b>. </para>
            <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
            <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously restores the key/value store replica.
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="settings">
            Settings to modify restore behavior.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <b>backupDirectory</b> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <b>backupDirectory</b> is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <b>backupDirectory</b> does not exist.
            </exception>
            <remarks>
            <para>It is recommended to not perform any write operations to the key/value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in <b>backupDirectory</b>. </para>
            <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
            <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            <para>Initializes a newly created service replica.</para>
            </summary>
            <param name="initializationParameters">
            <para>The initialization parameters for the service replica, represented as a <see cref="T:System.Fabric.StatefulServiceInitializationParameters" /> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Called on an initialized service replica to open it so that additional actions can be taken.</para>
            </summary>
            <param name="openMode">
            <para>A <see cref="T:System.Fabric.ReplicaOpenMode" /> object specifying for this replica whether it is new or recovered.</para>
            </param>
            <param name="partition">
            <para>A <see cref="T:System.Fabric.IStatefulServicePartition" /> object representing the stateful service partition information for this replica. </para>
            </param>
            <param name="cancellationToken">
            <para>A <see cref="T:System.Threading.CancellationToken" /> object that the operation is monitoring, which can be used to notify the task of cancellation.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task" /> object representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that this replica is changing roles.</para>
            </summary>
            <param name="newRole">
            <para>The target role.</para>
            </param>
            <param name="cancellationToken">
            <para>Currently unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A task whose result is the resolvable address of this replica.</para>
            </returns>
            <remarks>
            <para>The application replica should override this method if deriving from <see cref="T:System.Fabric.KeyValueStoreReplica" />, which is the recommended pattern. The application replica should return a <see cref="T:System.Threading.Tasks.Task" /> whose result is the address of this replica. This replica address is stored by the system as is and can be retrieved (unmodified) using <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />. The application must take care to complete the role change in a timely manner since reconfiguration of the replica set will be blocked behind the completion of all outstanding change role calls.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Called when this service replica is being shut down and needs to close.</para>
            </summary>
            <param name="cancellationToken">
            <para>A <see cref="T:System.Threading.CancellationToken" /> object that the operation is monitoring, which can be used to notify the task of cancellation.</para>
            </param>
            <returns>
            <para>The asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnAbort">
            <summary>
            <para>Called to shut down this instance.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)">
            <summary>
            <para>Called by the system on secondary replicas when they have finished building from the primary and are ready to start applying replication operations.</para>
            <para>This method will only be called on secondary replicas if the <see cref="T:System.Fabric.KeyValueStoreReplica" /> object was constructed with a valid <see cref="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode" /> parameter.</para>
            </summary>
            <param name="enumerator">
            <para>The enumerator used to read data on the secondary.</para>
            </param>
            <remarks>
            <para>The <see cref="T:System.Fabric.KeyValueStoreEnumerator" /> object can be used to read data on the secondary within the context of this method before any replication operations are applied. The <see cref="T:System.Fabric.KeyValueStoreEnumerator" /> object is no longer valid after this method returns and cannot be used outside the context of this method. The application must take care to complete this callback in a timely manner since replication operations are being queued on the secondary replica and will not start getting applied until this method returns. The <see cref="T:System.Fabric.KeyValueStoreEnumerator" /> object is backed by a single underlying local transaction and is not thread-safe.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})">
            <summary>
            <para>Called by the system on secondary replicas for incoming replication operations. Each <see cref="T:System.Fabric.KeyValueStoreNotification" /> object contains all the data for a single atomic replication operation.</para>
            </summary>
            <param name="enumerator">
            <para>The enumerator used to read the data in this replication operation.</para>
            </param>
            <remarks>
            <para>This method will only be called on secondary replicas if the <see cref="T:System.Fabric.KeyValueStoreReplica" /> object was constructed with a valid <see cref="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode" />.</para>
            <para>If the <see cref="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.BlockSecondaryAck" /> mode was specified, then the incoming replication operation is not applied locally on the secondary replica and acknowledged to the primary until the method returns. This implies that the application must take care to return from this method in a timely manner to avoiding blocking the replication stream. Since the acknowledgment is not sent to the primary until this method returns, it cannot be assumed that the observed replication operation has already been (or is guaranteed to be in the future) applied by a quorum of replicas in the replica set.</para>
            <para>If the <see cref="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.NonBlockingQuorumAcked" /> mode was specified, then the observed replication operation is guaranteed to have already been applied by a quorum of replicas in the replica set. Furthermore, the observed replication operation may have already been applied locally by this secondary and acknowledged to the primary at the time the method is invoked by the system. The method callback will not block the replication stream in this mode, but it will still block the replication operation notification stream. That is, there will only be one outstanding OnReplicationOperation method callback at any given time.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.KeyValueStoreReplicaSettings">
            <summary>
            Represents the settings for a key/value store replica.
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplicaSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplicaSettings"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.TransactionDrainTimeout">
            <summary>
            Gets or sets a value indicating the amount of time outstanding transactions have to drain during demotion from primary role before the host process is forcefully terminated.
            </summary>
            <value>
            Returns the drain timeout.
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.SecondaryNotificationMode">
            <summary>
            Gets or sets a value indicating the secondary notification mode to enable. <see cref="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode" />
            </summary>
            <value>
            Returns the secondary notification mode.
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.EnableCopyNotificationPrefetch">
            <summary>
            Gets or sets a value indicating whether or not to prefetch the database during open.
            </summary>
            <value>
            Returns true if enabled, false otherwise.
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.FullCopyMode">
            <summary>
            Gets or sets a value indicating the full copy mode to use when building secondary replicas. <see cref="T:System.Fabric.KeyValueStoreReplica.FullCopyMode" />
            </summary>
            <value>
            Returns the full copy mode.
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.LogicalCopyProbabilityInPercent">
            <summary>
            Gets or sets a value indicating the probablity with which logical copy occurs during full build.
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.RunTransactionCommitContinuationsAsynchronously">
            <summary>
            <para>Setting this property to true allows continuations to transaction commit operation run asynchronously.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.LogTruncationIntervalInMinutes">
            <summary>
            Gets or sets the interval after which <see cref="T:System.Fabric.KeyValueStoreReplica"/> tries to truncate local store logs
            if local store has <see cref="P:System.Fabric.LocalEseStoreSettings.EnableIncrementalBackup"/> enabled and no backup has been initiated by user during this interval.
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplicaSettings.DisableTombstoneCleanup">
            <summary>
            Disable or enable tombstone cleanup on <see cref="T:System.Fabric.KeyValueStoreReplica"/> 
            </summary>
            <value>
            Returns true if disabled, false otherwise.
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreTransactionSettings">
            <summary>
            <para>Specifies the optional settings to describe the behavior of transactions supported by <see cref="T:System.Fabric.KeyValueStoreReplica" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreTransactionSettings.#ctor">
            <summary>
            <para>Creates anew instance of the <see cref="T:System.Fabric.KeyValueStoreTransactionSettings" /> class..</para>
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreTransactionSettings.SerializationBlockSize">
            <summary>
            <para>Specifies the block size (in bytes) to use when allocating memory for replication operations.</para>
            </summary>
            <value>
            <para>The block size (in bytes) to use when allocating memory for replication operations.</para>
            </value>
        </member>
        <member name="T:System.Fabric.LoadMetric">
            <summary>
            <para>Represents the name of a metric and a runtime value as a name-value pair that is reported to Service Fabric. The metric loads are used by Service Fabric to ensure that the cluster is evenly used and that nodes do not exceed their capacities for given metrics. <see cref="T:System.Fabric.LoadMetric" /> reports are provided to Service Fabric via <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.LoadMetric.#ctor(System.String,System.Int32)">
            <summary>
            <para>Creates and initializes a <see cref="T:System.Fabric.LoadMetric" /> object with the specified name and load value.</para>
            </summary>
            <param name="name">
            <para>The name of the metric. This string must match the names of the metrics that are specified in the <see cref="P:System.Fabric.Description.ServiceDescription.Metrics" /> collection, or they will be ignored.</para>
            </param>
            <param name="value">
            <para>The current value of the metric as an integer.</para>
            </param>
        </member>
        <member name="P:System.Fabric.LoadMetric.Name">
            <summary>
            <para>Indicates the name of the metric that the service plans to report. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LoadMetric.Value">
            <summary>
            <para>Indicates the current load of the metric.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int32" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.MoveCost">
            <summary>
            <para>Describes the move cost of a replica.</para>
            </summary>
            <remarks>
            When a new replica or service instance is created it will get a default value for move cost. This value will be selected based on the service:
            <list type="bullet">
                <item><description>For replicas or instances of default services default move cost value will be <see cref="F:System.Fabric.MoveCost.Zero"/>,
                meaning that moving these replicas is free.</description></item>
                <item><description>For replicas or instances of other services default move cost will be <see cref="F:System.Fabric.MoveCost.Low"/>.</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:System.Fabric.MoveCost.Zero">
            <summary>
            <para>Specifies the move cost of a replica as Zero.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.Low">
            <summary>
            <para>Specifies the move cost of a replica as Low.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.Medium">
            <summary>
            <para>Specifies the move cost of a replica as Medium.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.High">
            <summary>
            <para>Specifies the move cost of a replica as High.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.VeryHigh">
            <summary>
            <para>Specifies the move cost of a replica as VeryHigh.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.LocalEseStoreSettings">
            <summary>
            <para>Represents the optional settings for a local ESE store.</para>
            </summary>
            <remarks>
            <para>Please see  HYPERLINK "http://msdn.microsoft.com/library/gg294139(v=exchg.10).aspx" http://msdn.microsoft.com/library/gg294139(v=exchg.10).aspx for documentation on ESE parameters.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.#ctor">
            <summary>
            <para>Creates and initializes a new instance of the <see cref="T:System.Fabric.LocalEseStoreSettings" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.DbFolderPath">
            <summary>
            <para>Gets or sets the file path that contains the local store files.</para>
            </summary>
            <value>
            <para>The file path that contains the local store files.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.LogFileSizeInKB">
            <summary>
            <para>Maps directly to JET_paramLogFileSize on the local ESE store.
            </para>
            </summary>
            <remarks>
            The specified log file size is only applied to newly created databases. Existing databases will continue to use the log file sizes they were created with if different from this setting.
            </remarks>
            <value>
            <para>The log file size in KB.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.LogBufferSizeInKB">
            <summary>
            <para>Maps to JET_paramLogBuffers on the local ESE store. There is a conversion from KB to 512 bytes (volume sector size) in the mapping.</para>
            </summary>
            <value>
            <para>The log buffer size in KB.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxCursors">
            <summary>
            <para>Maps directly to JET_paramMaxCursors on the local ESE store.
            </para>
            </summary>
            <value>
            <para>The maximum number of allowed database cursors.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxVerPages">
            <summary>
            <para>Maps directly to JET_paramMaxVerPages on the local ESE store.
            </para>
            </summary>
            <value>
            <para>The maximum number of allowed version pages.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxCacheSizeInMB">
            <summary>
            Maps directly to JET_paramCacheSizeMax on the local ESE store.
            </summary>
            <value>
            Returns the maximum database cache size in MB.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxDefragFrequencyInMinutes">
            <summary>
            Gets or sets a value indicating the frequency of periodic online defragmentation.
            </summary>
            <value>
            Returns the frequency in minutes.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.DefragThresholdInMB">
            <summary>
            Gets or sets a value indicating the minimum logical size of a database for online defragmentation to occur the background.
            </summary>
            <value>
            Returns the threshold in MB.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.CompactionThresholdInMB">
            <summary>
            Gets or sets a value indicating the minimum file size of a database for offline compaction to occur during open.
            </summary>
            <value>
            Returns the threshold in MB.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.FreePageSizeThresholdInMB">
            <summary>
            Gets or sets a value indicating the minimum unoccupied database size for offline compaction to occur during open.
            </summary>
            <value>
            Returns the threshold in MB.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.CompactionProbabilityInPercent">
            <summary>
            Gets or sets a value indicating the probablity with which offline compaction should occur during open.
            </summary>
            <value>
            Returns the threshold in percent.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.IntrinsicValueThresholdInBytes">
            <summary>
            Gets or sets a value indicating the maximum value size at which updates will occur with the JET_bitSetIntrinsicLV flag. Setting this to a non-positive value will use the ESE default of 1024 bytes.
            </summary>
            <value>
            Returns the threshold in bytes.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.DatabasePageSizeInKB">
            <summary>
            Maps directly to JET_paramDatabasePageSize on the local ESE store.
            </summary>
            <remarks>
            The specified database page size is only applied to newly created databases. Existing databases will continue to use the database page sizes they were created with if different from this setting.
            </remarks>
            <value>
            Returns the database page size in KB.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxAsyncCommitDelay">
            <summary>
            <para>Maps directly to the cmsecDurableCommit parameter on the JetCommitTransaction2() ESE API calls when local commits are performed.
            </para>
            </summary>
            <value>
            <para>The durable lazy commit duration.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.EnableIncrementalBackup">
            <summary>
            <para>Gets or sets a value indicating whether the incremental backup feature is enabled for use.</para>
            </summary>
            <value>
            Returns <languageKeyword>true</languageKeyword> if incremental backup is enabled; otherwise, <languageKeywork>false</languageKeywork>.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.EnableOverwriteOnUpdate">
            <summary>
            Enables in-place replace of value (versus insert/delete) during update operation. Maps to JET_bitSetOverwriteLV on the local ESE store.
            </summary>
            <remarks>
            Enabling this setting is useful in cases where certain access patterns can cause the ESE database file to grow on disk even though the
            logical data size remains same. For example, a large number of transactions getting rolled back or a series of updates made by some
            transactions while other transactions remain open as updates are happening. 
            
            Note that enabling this setting may increase version store usage and the value of <see cref="P:System.Fabric.LocalEseStoreSettings.MaxVerPages"/>
            may need to be increased.
            </remarks>
            <value>
            Returns <languageKeyword>true</languageKeyword> if overwrite on update is enabled; otherwise, <languageKeywork>false</languageKeywork>.
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.PoolMinSize">
            <summary>
            Sets the minimum number of pool items that will be cached and reused in future transactions.
            Pool will not shrink below this value.
            </summary>
            <remarks>
            Pool caches the sessions and cursors of the ESE database.
            </remarks>
            <value>
            <para>Returns minimum size of pool.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.PoolAdjustmentSize">
            <summary>
            When all pool items are in use and a new item is requested, pool size is increased by this value.
            </summary>
            <value>
            <para>Returns adjustment size of the pool.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.PoolCachedReadCursorsPerSessionSize">
            <summary>
            Numbers of read cursors that are cached per pool-item / ESE session that can be reused in future transactions. This should be configured to maximum number of concurrent enumerations that you create in one KVS transaction.
            </summary>
            <remarks>
            This setting is per pool item. Having <see cref="P:System.Fabric.LocalEseStoreSettings.PoolMinSize"/> = 100 with <see cref="P:System.Fabric.LocalEseStoreSettings.PoolCachedReadCursorsPerSessionSize"/> = 5 will create 500 read cursors.
            </remarks>
            <value>
            <para>Returns number of cached read cursors per pool item or ESE sesion.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.PoolEvictionPeriodInSeconds">
            <summary>
            When the pool has items that are not used in eviction period, we shrink the pool.
            The pool is shrunk to the count that has been used within eviction period or <see cref="P:System.Fabric.LocalEseStoreSettings.PoolMinSize"/>.
            </summary>
            <value>
            <para>Returns eviction period of pool in seconds.</para>
            </value>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)">
            <summary>
            Convenience method to create an instance of this class initialized with property values loaded from the application configuration package.
            </summary>
            <param name="codePackageActivationContext">The activation context under which this code is running. Retrieved from <see cref="T:System.Fabric.FabricRuntime"/>.</param>
            <param name="configPackageName">The name of the configuration package (specified in the Service Manifest) containing the settings to load.</param>
            <param name="sectionName">The name of the section in Settings.xml within the specified configuration package containing the settings to load.</param>
            <returns>The initialized settings object.</returns>
        </member>
        <member name="T:System.Fabric.LocalStoreKind">
            <summary>
            <para>Specifies the local store provider type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.LocalStoreKind.Invalid">
            <summary>
            <para>Reserved for future use. Does not indicate a valid database provider.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.LocalStoreKind.Ese">
            <summary>
            <para>Indicates an Extensible Store Engine (ESE) database provider. Please see http://msdn.microsoft.com/library/gg269245(v=exchg.10).aspx for documentation on ESE.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.LocalStoreSettings">
            <summary>
            <para>Represents the option settings for a local store.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.LocalStoreSettings.#ctor(System.Fabric.LocalStoreKind)">
            <summary>
            <para>Initializes a new instance of the class with the specified store provider type.</para>
            </summary>
            <param name="storeKind">
            <para>A <see cref="T:System.Fabric.LocalStoreKind" /> object representing the store provider type.</para>
            </param>
        </member>
        <member name="P:System.Fabric.LocalStoreSettings.StoreKind">
            <summary>
            <para>Gets the store provider type.</para>
            </summary>
            <value>
            <para>The store provider type as a <see cref="T:System.Fabric.LocalStoreKind" /> object.</para>
            </value>
        </member>
        <member name="T:System.Fabric.MemoryManagedOperationData">
            <summary>
            <para>
            Similar to <see cref="T:System.Fabric.OperationData"/>, backed by <see cref="T:System.Memory`1"/> to allow
            management of buffers used for replication/copy, e.g. via <see cref="T:System.Buffers.MemoryPool`1"/>. 
            </para>
            </summary>
            
            <remarks>
            <para>
            When replicating, pass an <see cref="T:System.Fabric.OperationData"/> instance to 
            <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/>
            using <see cref="M:System.Fabric.MemoryManagedOperationData.AsOperationData"/>.
            </para>
            <para>
            When returning a copy context from <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/>, return an
            <see cref="T:System.Fabric.OperationData"/> instance from 
            <see cref="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)"/> using
            <see cref="M:System.Fabric.MemoryManagedOperationData.AsOperationData"/>.
            </para>
            <para>
            Not supported when using the copy context to produce the copy state in your 
            <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/> implementation.
            </para>
            <para>
            When returning the copy state from <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/>, return an
            <see cref="T:System.Fabric.OperationData"/> instance from 
            <see cref="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)"/> using
            <see cref="M:System.Fabric.MemoryManagedOperationData.AsOperationData"/>.
            </para>
            <para>
            When processing the copy stream returned by <see cref="M:System.Fabric.IStateReplicator.GetCopyStream"/> or
            the replication stream returned by <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream"/>, cast the returned
            <see cref="T:System.Fabric.IOperationStream"/> to <see cref="T:System.Fabric.IOperationStream3"/> and call
            <see cref="M:System.Fabric.IOperationStream3.GetMemoryManagedOperationAsync(System.Threading.CancellationToken)" />.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.MemoryManagedOperationData.#ctor(System.Fabric.MemoryOwner)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.MemoryManagedOperationData" /> class from the 
            specified <see cref="T:System.Fabric.MemoryOwner"/>.</para>
            </summary>
            <param name="data">
            <para>The bytes from which to create 
            the <see cref="T:System.Fabric.MemoryManagedOperationData" /> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.MemoryManagedOperationData.#ctor(System.Collections.Generic.IEnumerable{System.Fabric.MemoryOwner})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.MemoryManagedOperationData" /> class from the 
            specified collection of <see cref="T:System.Fabric.MemoryOwner"/>.</para>
            </summary>
            <param name="data">
            <para>The bytes from which to create 
            the <see cref="T:System.Fabric.MemoryManagedOperationData" /> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.MemoryManagedOperationData.Dispose(System.Boolean)">
            <summary>
            If <paramref name="disposing"/> is true, dispose and remove all <see cref="T:System.Fabric.MemoryOwner"/> instances from this collection.
            </summary>
            <param name="disposing">True if this is being invoked via <see cref="M:System.IDisposable.Dispose"/>, false otherwise.</param>
        </member>
        <member name="M:System.Fabric.MemoryManagedOperationData.Dispose">
            <summary>
            Dispose and remove all <see cref="T:System.Fabric.MemoryOwner"/> instances from this collection.
            </summary>
        </member>
        <member name="M:System.Fabric.MemoryManagedOperationData.AsOperationData">
            <summary>
            Wrap this object in an <see cref="T:System.Fabric.OperationData"/> instance. Used when passing to APIs such as
            <see cref="M:System.Fabric.StateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/> or
            when returning an instance from <see cref="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)"/>. Calling
            <see cref="M:System.Fabric.OperationData.AsMemoryManagedOperationData"/> on the returned instance will yield this object.
            </summary>
            <returns>An OperationData instance wrapping this object.</returns>
        </member>
        <member name="T:System.Fabric.MemoryOwner">
            <summary>
            <para>
            <see cref="T:System.Buffers.IMemoryOwner`1"/> wrapper which indicates the number of bytes in <see cref="P:System.Buffers.IMemoryOwner`1.Memory"/>
            which contain valid data. When performing reads, consumers of this class should consider <see cref="F:System.Fabric.MemoryOwner.ValidLength"/>) 
            as the length of <see cref="P:System.Fabric.MemoryOwner.Memory"/> rather than using <see cref="P:System.Memory`1.Length"/> directly.
            </para>
            </summary>
            <remarks>
            <para>
            This class is used in place of <see cref="T:System.Buffers.IMemoryOwner`1"/> directly, as <see cref="M:System.Buffers.MemoryPool`1.Rent(System.Int32)"/> may
            return a <see cref="T:System.Buffers.IMemoryOwner`1"/> with <see cref="P:System.Buffers.IMemoryOwner`1.Memory"/> with a <see cref="P:System.Memory`1.Length" />
            greater than the size requested.
            </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.MemoryOwner.SimpleMemoryOwner">
            <summary>
            <para>
            <see cref="T:System.Buffers.IMemoryOwner`1"/> wrapper for byte arrays and arraysegments.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.MemoryOwner.ValidLength">
            <summary>
            <para>
            The number of bytes containing data in <see cref="P:System.Fabric.MemoryOwner.Memory"/>. When performing reads,
            consumers of this class should consider <see cref="F:System.Fabric.MemoryOwner.ValidLength"/> as the length of
            <see cref="P:System.Fabric.MemoryOwner.Memory"/> rather than using <see cref="P:System.Memory`1.Length"/> directly.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.MemoryOwner.Memory">
            <summary>
            <para>
            See <see cref="P:System.Buffers.IMemoryOwner`1.Memory"/>.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.MemoryOwner.#ctor(System.Buffers.IMemoryOwner{System.Byte},System.Int32)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.MemoryOwner"/> class with the specified <see cref="T:System.Buffers.IMemoryOwner`1"/>
            and valid length.
            </para>
            </summary>
            <param name="owner">The <see cref="T:System.Buffers.IMemoryOwner`1"/> to expose via <see cref="P:System.Fabric.MemoryOwner.Memory"/>. Must not be null.</param>
            <param name="validLength">The initial value for <see cref="F:System.Fabric.MemoryOwner.ValidLength"/>. Must be &gt;= 0 and &lt;= owner.Memory.Length.</param>
        </member>
        <member name="M:System.Fabric.MemoryOwner.#ctor(System.Byte[],System.Int32)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.MemoryOwner"/> class with the specified <see cref="T:byte[]"/>
            and valid length.
            </para>
            </summary>
            <param name="data">The <see cref="T:byte[]"/> to expose via <see cref="P:System.Fabric.MemoryOwner.Memory"/>.  Must not be null.</param>
            <param name="validLength">The initial value for <see cref="F:System.Fabric.MemoryOwner.ValidLength"/>. Must be &gt;= 0 and &lt;= data.Length.</param>
        </member>
        <member name="M:System.Fabric.MemoryOwner.#ctor(System.ArraySegment{System.Byte})">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.MemoryOwner"/> class with the specified <see cref="T:System.ArraySegment`1"/>.
            <see cref="P:System.ArraySegment`1.Count"/> will be used as the initial value for <see cref="F:System.Fabric.MemoryOwner.ValidLength"/>.
            </para>
            </summary>
            <param name="data">The <see cref="T:System.ArraySegment`1"/> to expose via <see cref="P:System.Fabric.MemoryOwner.Memory"/>.</param>
        </member>
        <member name="M:System.Fabric.MemoryOwner.Dispose(System.Boolean)">
            <summary>
            If <paramref name="disposing"/> is true, dispose the wrapped <see cref="T:System.Buffers.IMemoryOwner`1"/> instance.
            </summary>
            <param name="disposing">True if this is being invoked via <see cref="M:System.IDisposable.Dispose"/>, false otherwise.</param>
        </member>
        <member name="M:System.Fabric.MemoryOwner.Dispose">
            <summary>
            Dispose the wrapped <see cref="T:System.Buffers.IMemoryOwner`1"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.NamedPartitionInformation">
            <summary>
            <para>Describes the partition information for the name as a string that is based on partition schemes.
            Services observe this type of <see cref="T:System.Fabric.ServicePartitionInformation" /> when the service is created with the <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription" />. <see cref="T:System.Fabric.NamedPartitionInformation" /> derives from the <see cref="T:System.Fabric.IServicePartition" /> interface and is provided to services as part of the <see cref="T:System.Fabric.IStatefulServicePartition" /> or <see cref="T:System.Fabric.IStatelessServicePartition" /> interface, which is passed in during the stateful <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)" /> or the stateless <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NamedPartitionInformation.Name">
            <summary>
            <para>Indicates the name of this partition of the service.</para>
            </summary>
            <value>
            <para>The name of this partition of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NamedProperty">
            <summary>
            <para>Represents a property that is managed by using the <see cref="T:System.Fabric.FabricClient.PropertyManagementClient" />.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NamedProperty.Metadata">
            <summary>
            <para>Gets the metadata that is associated with the property, which includes its name.</para>
            </summary>
            <value>
            <para>The metadata that is associated with the property, which includes its name.</para>
            </value>
        </member>
        <member name="M:System.Fabric.NamedProperty.GetValue``1">
            <summary>
            <para>Gets the value of the property.</para>
            </summary>
            <typeparam name="T">
            <para>The type of the property value.</para>
            </typeparam>
            <returns>
            <para>The value of the property as type <typeparamref name="T"/>.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.NamedPropertyMetadata">
            <summary>
            <para>The metadata associated with a <see cref="T:System.Fabric.NamedProperty" />, including the property’s name.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.PropertyName">
            <summary>
            <para>Gets the name of the Property. It could be thought of as the key for a key value pair.</para>
            </summary>
            <value>
            <para>The property name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.Parent">
            <summary>
            <para>Gets the name of the parent Service Fabric Name for the Property. It could be thought of as the namespace/table under which the property exists.</para>
            </summary>
            <value>
            <para>The name of the parent Service Fabric Name for the Property.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.TypeId">
            <summary>
            <para>Indicates whether the value of the Property is a Binary, <see cref="T:System.Int64" />, <see cref="T:System.Double" />, <see cref="T:System.String" /> or <see cref="T:System.Guid" />. 
            A common use of this field is to determine the type to use for the <see cref="M:System.Fabric.NamedProperty.GetValue``1" />.</para>
            </summary>
            <value>
            <para>The property type of the property.</para>
            </value>
            <remarks>
            <para>All Service Fabric enumerations have a reserved Invalid value.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.ValueSize">
            <summary>
            <para>Indicates the length of the serialized Property value.</para>
            </summary>
            <value>
            <para>The length of the serialized Property value.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.SequenceNumber">
            <summary>
            <para>Gets the version of the Property. Every time a Property is modified, its sequence number is increased.</para>
            </summary>
            <value>
            <para>The version of the property.</para>
            </value>
            <remarks>
            <para>Sequence numbers will be guaranteed to always increase. However, the increase may not be monotonic.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.LastModifiedUtc">
            <summary>
            <para>Gets when the Property was last modified. Only write operations will cause this field to be updated.</para>
            </summary>
            <value>
            <para>The last time the property was modified, UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.CustomTypeId">
            <summary>
            <para>Gets the custom type id.</para>
            </summary>
            <value>
            <para>The custom type id.</para>
            </value>
            <remarks>
            <para>Using this property, the user is able to tag the type of the value of the property. 
            Common use case for this property is the following. Assume you have property called configuration. 
            The value of this property can be JSON or XML, depending on who last updated the property. 
            In this scenario the updaters can use custom type id property to communicate the type of the property to the consumer of the property.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.NameEnumerationResult">
            <summary>
            <para>A collection of Service Fabric names,
            as returned by <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.HasMoreData">
            <summary>
            <para>Indicates whether there are more remaining pages. 
            If the value is true, then <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean)" /> 
            can be called to acquire the next page.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration has more data;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsFinished">
            <summary>
            <para>Indicates whether there are no more remaining pages.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration is finished;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsBestEffort">
            <summary>
            <para>Indicates whether any name under the given name has been modified during the enumeration. If there was a modification, this property value is true.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration is best effort;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsConsistent">
            <summary>
            <para>Indicates whether any name under the given name has been modified during the enumeration. If there was a modification, this property value  is false.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration is consistent;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsValid">
            <summary>
            <para>Indicates whether the enumeration result is valid. Do not use the result, if it is not valid.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration result is valid;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NetworkType">
            <summary>
            <para>Indicates the type of container network. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkType.Invalid">
            <summary>
            <para>Indicates the network type is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkType.Local">
            <summary>
            <para>Indicates a local container network.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkType.Federated">
            <summary>
            <para>Indicates a federated container network.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NetworkStatus">
            <summary>
            <para>Indicates status of container network. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatus.Invalid">
            <summary>
            <para>Indicates container network status is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatus.Ready">
            <summary>
            <para>Indicates container network is ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatus.Creating">
            <summary>
            <para>Indicates container network is being created.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatus.Deleting">
            <summary>
            <para>Indicates container network is being deleted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatus.Updating">
            <summary>
            <para>Indicates container network is being updated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatus.Failed">
            <summary>
            <para>Indicates container network is in failed state.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NetworkStatusFilter">
            <summary>
            <para>Enumerates the filters used for matching the status of container networks that should be returned by query.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatusFilter.Default">
            <summary>
            <para>Indicates no filter is added on network status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatusFilter.All">
            <summary>
            <para>Indicates no filter is added on network status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatusFilter.Ready">
            <summary>
            <para>Indicates a filter that matches container networks that are ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatusFilter.Creating">
            <summary>
            <para>Indicates a filter that matches container networks that are being created.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatusFilter.Deleting">
            <summary>
            <para>Indicates a filter that matches container networks that are being deleted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatusFilter.Updating">
            <summary>
            <para>Indicates a filter that matches container networks that are being updated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NetworkStatusFilter.Failed">
            <summary>
            <para>Indicates a filter that matches container networks that are in a failed state.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeContext">
            <summary>
            <para>Specifies contextual information about a Service Fabric node such as node name, ID, node type etc.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.NodeContext.#ctor(System.String,System.Fabric.NodeId,System.Numerics.BigInteger,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.NodeContext"/> class.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="nodeId">The node id.</param>
            <param name="nodeInstanceId">The node instance id.</param>
            <param name="nodeType">The node type.</param>
            <param name="ipAddressOrFQDN">The IP address or FQDN of the node.</param>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeId">
            <summary>
            <para>Gets the node ID.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeId" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeInstanceId">
            <summary>
            <para>Gets the node instance ID, which uniquely identifies the node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>Returns the node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeType">
            <summary>
            <para>Gets the node type.</para>
            </summary>
            <value>
            <para>Returns the node type string.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.IPAddressOrFQDN">
            <summary>
            <para>Gets the IP address or the fully qualified domain name of the node.</para>
            </summary>
            <value>
            <para>Returns the IP address or the fully qualified domain name of the node.</para>
            </value>
        </member>
        <member name="M:System.Fabric.NodeContext.GetDirectory(System.String)">
            <summary>
            Retrieves the directory path for the directory at node level.
            </summary>
        </member>
        <member name="T:System.Fabric.NodeDeactivationIntent">
            <summary>
            <para>Describes the reason why the node is being deactivated.</para>
            </summary>
            <remarks>
            <para>
                The <see cref="T:System.Fabric.NodeDeactivationIntent" /> enumeration is provided as a part of the <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)" /> method. </para>
            <para>
                Service Fabric uses this information to take the correct actions at the node to provide a graceful shutdown of the node. The intents have a general progression or severity. </para>
            <para>
                A deactivation that is started with one intent can be increased to subsequent higher levels of intent. The general order of this progression is: Pause, Restart, Stop, ForceStop.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.Invalid">
            <summary>
            <para>Indicates that a deactivation intent is invalid. This value is not used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.Pause">
            <summary>
            <para>Indicates that the node should be paused. </para>
            </summary>
            <remarks>
            <para>
                When this intent is used, Service Fabric prevents changes to the specified node. No new replicas are placed on the node, and existing replicas are not moved or shut down.</para>
            <para>
                The <see cref="F:System.Fabric.NodeDeactivationIntent.Pause" /> intent is useful when one or more replicas on a node encounter issues and that node has to be isolated for further investigation</para>
            <para> 
                This investigation could include accessing the remote machine to investigate such activities as reviewing local logs, taking memory dumps, and observing other information. </para>
            <para>
                The purpose of this mode is to attempt to preserve the node so that additional debugging can be performed under the same conditions that existed when the error occurred.</para>
            <para>
                Note that specifying this mode does not guarantee that all changes to the node can be prevented. </para>
            <para>
                For example, replicas on the node might crash after the intent to pause the node has been received. </para>
            <para>
                As another example, failures in another location in the cluster might cause a Secondary replica on the node to be promoted to the Primary replica.</para>
            <para>
                In this mode, Service Fabric will disable Placement and Resource Balancing on the target node</para>
            <para>
                In addition Safety Checks (see <see cref="T:System.Fabric.SafetyCheckKind" />) will be performed by Service Fabric</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.Restart">
            <summary>
            <para>Indicates that the intent is for the node to be restarted after a short period of time. Service Fabric does not restart the node - this action is done outside of Service Fabric.</para>
            </summary>
            <remarks>
            <para>
                A node might be shut down, for example, to perform an OS update or a Service Fabric code update. </para>
            <para>
                In this mode, Service Fabric prevents new replicas from being placed on the node. Additionally, Service Fabric takes the following actions: </para>
            <para>
                Disable Placement and Resource balancing on the target node</para>
            <para>
                Performs safety checks. The <see cref="F:System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement" /> safety check is not performed for this intent. </para>
            <para>
                Close all replicas and instances running on the node.</para>
            <para>
                NOTE: Once replicas and instances are closed, Service Fabric will reactively create replacements for replicas of stateful volatile services and stateless services. </para>
            <para>
                For Persisted replicas on the node, new replicas are <b>not</b> be built, because the intention is to restart this node and to recover the persistent state after the restart. The replicas are opened once the node is activated.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.RemoveData">
            <summary>
            <para>Indicates that the intent is to reimage the node. Service Fabric does not reimage the node - this action is done outside of Service Fabric.</para>
            </summary>
            <remarks>
            <para>
                When Service Fabric receives this intent, it ensures that: </para>
            <para>
                In this mode, Service Fabric prevents new replicas from being placed on the node. Additionally, Service Fabric takes the following actions: </para>
            <para>
                Disable Placement and Resource balancing on the target node</para>
            <para>
                Move all Up replicas out of the node. </para>
            <para>
                For stateless instances this implies creating another instance on another node</para>
            <para>
                For replicas of stateful services a replacement replica is built on another node (if there is sufficient capacity in the cluster)</para>
            <para>
                If the replica is a primary, some other active secondary of the partition is made the primary prior to creating the replacement</para>
            <para>
                Stateful replicas on the node receive notifications to clean up their state and close.</para>
            <para>
                Performs a subset of safety checks that ensure that as a result of taking this node down no data loss can occur.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.RemoveNode">
            <summary>
            <para>Indicates that the node is being decommissioned and is not expected to return. Service Fabric does not decommission the node - this action is done outside of Service Fabric.</para>
            </summary>
            <remarks>
            <para>
                When Service Fabric receives this intent, it ensures that: </para>
            <para>
                In this mode, Service Fabric prevents new replicas from being placed on the node. Additionally, Service Fabric takes the following actions: </para>
            <para>
                Disable Placement and Resource balancing on the target node</para>
            <para>
                Move all Up replicas out of the node. </para>
            <para>
                For stateless instances this implies creating another instance on another node</para>
            <para>
                For replicas of stateful services a replacement replica is built on another node (if there is sufficient capacity in the cluster)</para>
            <para>
                If the replica is a primary, some other active secondary of the partition is made the primary prior to creating the replacement</para>
            <para>
                Stateful replicas on the node receive notifications to clean up their state and close.</para>
            <para>
                Performs a subset of safety checks that ensure that as a result of taking this node down no data loss can occur.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.NodeDeactivationStatus">
            <summary>
            <para>Specified the status for a node deactivation task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.None">
            <summary>
            <para>No status is associated with the task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.SafetyCheckInProgress">
            <summary>
            <para>Safety checks are in progress for the task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.SafetyCheckComplete">
            <summary>
            <para>All the safety checks have been completed for the task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.Completed">
            <summary>
            <para>The task is completed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeDeactivationTaskType">
            <summary>
            <para>Specifies the different types of node deactivation tasks.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Invalid">
            <summary>
            <para>Invalid task type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Infrastructure">
            <summary>
            <para>Specifies the task created by the Azure MR.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Repair">
            <summary>
            <para>Specifies the task that was created by the Repair Manager service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Client">
            <summary>
            <para>Specifies that the task was created by calling the public API.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeId">
            <summary>
            <para>Class to encapsulate a node ID.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.NodeId.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            <para>Initializes a new <see cref="T:System.Fabric.NodeId" /> object, with the specified high and low order components.</para>
            </summary>
            <param name="high">
            <para>The high order component of the <see cref="T:System.Fabric.NodeId" /> object.</para>
            </param>
            <param name="low">
            <para>The low order component of the <see cref="T:System.Fabric.NodeId" /> object.</para>
            </param>
        </member>
        <member name="P:System.Fabric.NodeId.Low">
            <summary>
            <para>The low order component of the <see cref="T:System.Fabric.NodeId" /> object.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeId.High">
            <summary>
            <para>The high order component of the <see cref="T:System.Fabric.NodeId" /> object.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.NodeId.TryParse(System.String,System.Fabric.NodeId@)">
            <summary>
            <para>Converts the string representation of a node ID to its <see cref="T:System.Fabric.NodeId" /> object equivalent. A return value indicates whether the operation succeeded.</para>
            </summary>
            <param name="from">
            <para>A string containing the node ID to convert.</para>
            </param>
            <param name="parsedNodeId">
            <para>When this method returns, contains a new <see cref="T:System.Fabric.NodeId" /> object equivalent to the node ID contained in <paramref name="from" />, 
            if the conversion succeeded, or <languageKeyword>null</languageKeyword> if the conversion failed. This parameter is passed uninitialized.</para>
            </param>
            <returns>
            <returns>A boolean indicating if the parse was successful</returns>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.op_Equality(System.Fabric.NodeId,System.Fabric.NodeId)">
            <summary>
            <para>Determines whether two <see cref="T:System.Fabric.NodeId" /> objects have the same value.</para>
            </summary>
            <param name="value1">
            <para>A <see cref="T:System.Fabric.NodeId" /> object to compare with <paramref name="value2" />.</para>
            </param>
            <param name="value2">
            <para>A <see cref="T:System.Fabric.NodeId" /> object to compare with <paramref name="value1" />.</para>
            </param>
            <returns>
            <para>Returns a <see cref="T:System.Boolean" /> value that is <languageKeyword>true</languageKeyword> if the objects are equivalent;
            otherwise <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.op_Inequality(System.Fabric.NodeId,System.Fabric.NodeId)">
            <summary>
            <para>Determines whether two <see cref="T:System.Fabric.NodeId" /> objects have different values.</para>
            </summary>
            <param name="value1">
            <para>A <see cref="T:System.Fabric.NodeId" /> object to compare with <paramref name="value2" />.</para>
            </param>
            <param name="value2">
            <para>A <see cref="T:System.Fabric.NodeId" /> object to compare with <paramref name="value1" />.</para>
            </param>
            <returns>
            <para>Returns a <see cref="T:System.Boolean" /> value that is <languageKeyword>true</languageKeyword> if the objects have different values; 
            otherwise <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.GetHashCode">
            <summary>
            <para>Returns the hash code for this <see cref="T:System.Fabric.NodeId" /> object.</para>
            </summary>
            <returns>
            <para>A 32-bit signed integer hash code.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.Equals(System.Object)">
            <summary>
            <para>Indicates whether this <see cref="T:System.Fabric.NodeId" /> object and the specified object are equal.</para>
            </summary>
            <param name="obj">
            <para>The object to compare with the current <see cref="T:System.Fabric.NodeId" />.</para>
            </param>
            <returns>
            <para>Returns a <see cref="T:System.Boolean" /> value that is <languageKeyword>true</languageKeyword> 
            if the objects are the same type and represent the same value; otherwise <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.ToString">
            <summary>
            <para>Creates and returns a string representation of the current node ID.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.ConvertFromHexString(System.String)">
            <summary>
            Creates a new <code>WinfabricNodeId</code> from a hexadecimal string. The string must be of the format from ToString.
            </summary>
            <param name="hexValue">hexadecimal representation of the NodeId</param>
            <returns><code>WinFabricNodeId</code> generated from the string</returns>
            <exception cref="T:System.ArgumentException">thrown when the argument is an invalid hexadecimal representation</exception>
            <exception cref="T:System.FormatException">thrown when the argument is invalid hexadecimal</exception>
        </member>
        <member name="T:System.Fabric.NodeTransitionType">
            <summary>
            <para>Describes the type of node transition</para>
            </summary>    
        </member>
        <member name="F:System.Fabric.NodeTransitionType.Invalid">
            <summary>
            <para>Indicates that the node transition type is invalid. This value is not used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeTransitionType.Start">
            <summary>
            <para>Indicates that the node should be started.</para>
            </summary>        
        </member>
        <member name="F:System.Fabric.NodeTransitionType.Stop">
            <summary>
            <para>Indicates that the node should be stopped.</para>
            </summary>        
        </member>
        <member name="T:System.Fabric.OperationData">
            <summary>
            <para>An <see cref="T:System.Fabric.OperationData" /> is used to transfer copy state changes and copy context between replicas.</para>
            <para>
            If <see cref="M:System.Fabric.OperationData.AsMemoryManagedOperationData"/> returns a non-null value, this value must be interacted
            with instead of the <see cref="T:System.Fabric.OperationData"/> object. Exposed this way to avoid disturbing the API surface.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.OperationData.CreateMemoryManagedOperationData(System.Fabric.MemoryOwner)">
            <summary>
            <para>Creates MemoryManagedOperationData wrapped in a <see cref="T:System.Fabric.OperationData"/> </para>
            </summary>
        </member>
        <member name="M:System.Fabric.OperationData.CreateMemoryManagedOperationData(System.Collections.Generic.IEnumerable{System.Fabric.MemoryOwner})">
            <summary>
            <para>Creates MemoryManagedOperationData wrapped in a <see cref="T:System.Fabric.OperationData"/> </para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationData.memoryManagedOperationData">
            MemoryManagedOperationData is made dynamic in order to prevent the debug fabric unit tests from needing a reference to the System.memory dll.
        </member>
        <member name="M:System.Fabric.OperationData.AsMemoryManagedOperationData">
            <summary>
            Interpret this instance as <see cref="T:System.Fabric.MemoryManagedOperationData"/>.
            </summary>
            <returns>
            A valid <see cref="T:System.Fabric.MemoryManagedOperationData"/> instance, or null if this instance was not
            acquired via <see cref="M:System.Fabric.MemoryManagedOperationData.AsOperationData"/>
            or <see cref="M:System.Fabric.IOperationStream3.GetMemoryManagedOperationAsync(System.Threading.CancellationToken)"/>.
            </returns>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData" /> class from the specified collection of
            <see cref="T:System.ArraySegment`1" /> of bytes.</para>
            </summary>
            <param name="operationData">
            <para>The bytes from which to create
            the <see cref="T:System.Fabric.OperationData" /> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.ArraySegment{System.Byte})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData" /> class from the specified <see cref="T:System.ArraySegment`1" /> of bytes.</para>
            </summary>
            <param name="operationData">
            <para>The <see cref="T:System.ArraySegment`1" /> of bytes from which to create the <see cref="T:System.Fabric.OperationData" /> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData" /> class from the specified collection of byte arrays.</para>
            </summary>
            <param name="operationData">
            <para>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of byte arrays from which to create the <see cref="T:System.Fabric.OperationData" /> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.Byte[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData" /> class from the specified byte array.</para>
            </summary>
            <param name="operationData">
            <para>The byte array from which to create the <see cref="T:System.Fabric.OperationData" /> object.</para>
            </param>
        </member>
        <member name="T:System.Fabric.OperationType">
            <summary>
            <para>Specifies the type of operation that is received via the copy or replication stream.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.Invalid">
            <summary>
            <para>Specifies that the operation is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.Normal">
            <summary>
            <para>Specifies that the operation is not part of an atomic group and should be processed as a standalone copy or replication operation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.EndOfStream">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.OperationType.CreateAtomicGroup">
            <summary>
            <para>Specifies that a particular atomic group to be created.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.AtomicGroupOperation">
            <summary>
            <para>Specifies that the operation is a part of an atomic group.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.CommitAtomicGroup">
            <summary>
            <para>Specifies that a particular atomic group to be committed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.RollbackAtomicGroup">
            <summary>
            <para>Specifies that a particular atomic group should be rolled back.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.HasAtomicGroupMask">
            <summary>
            <para>Specifies that the operation has an atomic group mask.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.PartitionAccessStatus">
            <summary>
            <para>Enumerates the access status of the partition. </para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.PartitionAccessStatus" /> is used to check that a read or write operation is allowed. When service 
            replicas handle a client request, they should verify that the system is in a state that allows processing. By checking the 
            <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" /> or <see cref="P:System.Fabric.IStatefulServicePartition.WriteStatus" /> as 
            appropriate, the replica can be notified of conditions that prevent correct operation. Note that write operations might still see an 
            exception from the replicator for one of these conditions, because the condition might change between the 
            <see cref="P:System.Fabric.IStatefulServicePartition.WriteStatus" /> check and the call 
            to <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)" />. </para>
            </remarks>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.Invalid">
            <summary>
            <para>Indicates that the read or write operation access status is not valid. This value is not returned to the caller.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.Granted">
            <summary>
            <para>Indicates that the read or write operation access is granted and the operation is allowed. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.ReconfigurationPending">
            <summary>
            <para>Indicates that the client should try again later, because a reconfiguration is in progress. After the reconfiguration is completed, a 
            new status is returned that gives further instructions. The client should retry the operation at this replica</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.NotPrimary">
            <summary>
            <para>Indicates that this client request was received by a replica that is not a Primary replica. The read or write operation cannot be 
            performed at this replica. The client should attempt to use the naming service to identify the correct primary replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.NoWriteQuorum">
            <summary>
            <para>Indicates that no write quorum is available and, therefore, no write operation can be accepted. The client should retry the operation at this replica.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.PropertyBatchOperation">
            <summary>
            <para>Represents the base class for property operations that can be put into a batch and be submitted through the 
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)" /> method.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> object fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.PropertyBatchOperation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PropertyBatchOperation" /> object.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PropertyBatchOperation.#ctor(System.String,System.Fabric.PropertyBatchOperationKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PropertyBatchOperation" /> object with the specified property name and kind.</para>
            </summary>
            <param name="propertyName">
            <para>String name of the Property.</para>
            </param>
            <param name="kind">
            <para>
                <see cref="T:System.Fabric.PropertyBatchOperationKind" /> defines the kind of the <see cref="T:System.Fabric.PropertyBatchOperation" />.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PropertyBatchOperation.PropertyName">
            <summary>
            <para>Indicates the name of the property that this <see cref="T:System.Fabric.PropertyBatchOperation" /> accesses.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PropertyBatchOperation.Kind">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.PropertyBatchOperationKind" /> that indicates the kind of the <see cref="T:System.Fabric.PropertyBatchOperation" />.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PropertyBatchOperationKind" />.</para>
            </value>
            <remarks>
            <para>All Service Fabric enumerations have a reserved "Invalid" field.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.PropertyBatchOperationKind">
            <summary>
            <para>Specifies the kind of the BatchPropertyOperation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Invalid">
            <summary>
            <para>All Service Fabric enumerations have a reserved “Invalid” flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Put">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation" /> is of type <see cref="T:System.Fabric.PutPropertyOperation" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Get">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation" /> is of type <see cref="T:System.Fabric.GetPropertyOperation" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.CheckExists">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation" /> is of type <see cref="T:System.Fabric.CheckExistsPropertyOperation" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.CheckSequence">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation" /> is of type <see cref="T:System.Fabric.CheckSequencePropertyOperation" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Delete">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation" /> is of type <see cref="T:System.Fabric.DeletePropertyOperation" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.PutCustom">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation" /> is of type <see cref="T:System.Fabric.PutCustomPropertyOperation" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.CheckValue">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation" /> is of type <see cref="T:System.Fabric.CheckValuePropertyOperation" />.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.PropertyBatchResult">
            <summary>
            <para>Specifies the batch that contains the results from the <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)" /> method call.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.PropertyBatchResult.FailedOperationIndex">
            <summary>
            <para>Gets the failed operation index. This parameter contains the index of the 
            unsuccessful <see cref="T:System.Fabric.PropertyBatchOperation" /> in the batch.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int32" />.</para>
            </value>
            <remarks>
            <para>Note that if none of the operations in the batch fail, this property will be set to -1.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PropertyBatchResult.FailedOperationException">
            <summary>
            <para>Gets the failed operation exception. This parameter contains the exception thrown due to the first 
            unsuccessful <see cref="T:System.Fabric.PropertyBatchOperation" /> object in the batch.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Exception" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.PropertyBatchResult.GetProperty(System.Int32)">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.NamedProperty" /> object that is returned by the <see cref="T:System.Fabric.PropertyBatchOperation" /> in the specified index.</para>
            </summary>
            <param name="index">
            <para>An <see cref="T:System.Int32" /> that indicates the index in the batch that was submitted.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.NamedProperty" />.</para>
            </returns>
            <remarks>
            <para>Note that whether <see cref="T:System.Fabric.NamedPropertyMetadata" /> is returned is dependent on the <languagekeyword>includeValues</languagekeyword> 
            argument to the <see cref="T:System.Fabric.GetPropertyOperation" />. Returns an error when the operation has a different type than specified.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.PropertyEnumerationResult">
            <summary>
            <para>Represents an enumeration of properties that is returned from an operation by the property manager.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.HasMoreData">
            <summary>
            <para>Indicates that there are more remaining pages. 
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult,System.TimeSpan,System.Threading.CancellationToken)" /> should be called to get the next page.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsFinished">
            <summary>
            <para>Indicates that there are no more remaining pages.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsBestEffort">
            <summary>
            <para>Indicates whether the name under the given name has been modified during the enumeration. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
            <remarks>
            <para>If there was a modification, this property is true.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsConsistent">
            <summary>
            <para>Indicates whether the any name under the given name has been modified during the enumeration. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
            <remarks>
            <para>If there was a modification, this property is false.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsValid">
            <summary>
            <para>Indicates whether the enumeration result is valid. Do not use the result if it is not valid.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PropertyTypeId">
            <summary>
            <para>Enumerates the possible property types.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Invalid">
            <summary>
            <para>Indicates that the type of the property is Invalid. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Binary">
            <summary>
            <para>Indicates that the type of the property is Binary.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Int64">
            <summary>
            <para>Indicates that the type of the property is Int64. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Double">
            <summary>
            <para>Indicates that the type of the property is Double. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.String">
            <summary>
            <para>Indicates that the type of the property is String. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Guid">
            <summary>
            <para>Indicates that the type of the property is GUID. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.PutCustomPropertyOperation">
            <summary>
            <para>Represents the specified property under the specified name and sets the custom type information for custom interpretation of the property value.</para>
            </summary>
            <remarks>
            The custom type is information that is not processed by Service Fabric, 
            but can be used by user to serialize/deserialize custom type objects.</remarks>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation" /> class with the specified property name 
            and byte[] value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Int64,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation" /> class with the specified property name 
            and Int64 value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Guid,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation" /> class with the specified property name and GUID 
            value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation" /> class with the specified property name and 
            string value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Double,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation" /> class with the specified property name and 
            double value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PutCustomPropertyOperation.PropertyValue">
            <summary>
            <para>Gets the property value.</para>
            </summary>
            <value>
            <para>The property value.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PutCustomPropertyOperation.PropertyType">
            <summary>
            <para>Gets the property type.</para>
            </summary>
            <value>
            <para>The property type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PutCustomPropertyOperation.CustomTypeId">
            <summary>
            <para>Gets the custom type information. This information can be used by users to serialize/de-serialize custom type objects.</para>
            </summary>
            <value>
            <para>The custom type information.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PutPropertyOperation">
            <summary>
            <para>Puts the specified property under the specified name.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation" /> fails, the entire batch fails and is not committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation" /> class with the specified property name and byte[] value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String" /> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.Byte" /> array that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Int64)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation" /> class with the specified property name and Int64 value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String" /> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>An <see cref="T:System.Int64" /> that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Guid)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation" /> class with the specified property name and GUID value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String" /> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.Guid" /> that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation" /> class with the specified property name and string value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String" /> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.String" /> that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Double)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation" /> class with the specified property name and double value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String" /> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.Double" /> that defines the value for the property.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PutPropertyOperation.PropertyValue">
            <summary>
            <para>Gets the property value.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Object" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PutPropertyOperation.PropertyType">
            <summary>
            <para>Gets the property type.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PropertyTypeId" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.ClusterRepairTask">
            <summary>
            <para>Represents a repair task that has Cluster scope.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.ClusterRepairTask.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.ClusterRepairTask" /> class.</para>
            </summary>
            <param name="taskId">
            <para>The ID of the repair task.</para>
            </param>
            <param name="action">
            <para>The repair action being requested.</para>
            </param>
        </member>
        <member name="T:System.Fabric.Repair.NodeImpact">
            <summary>
            <para>Describes the expected impact of a repair to a particular node.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeImpact.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeImpact" /> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeImpact.#ctor(System.String,System.Fabric.Repair.NodeImpactLevel)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeImpact" /> class.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the impacted node.</para>
            </param>
            <param name="impactLevel">
            <para>The level of impact expected.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Repair.NodeImpact.NodeName">
            <summary>
            <para>Gets or sets the name of the impacted node.</para>
            </summary>
            <value>
            <para>The name of the impacted node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.NodeImpact.ImpactLevel">
            <summary>
            <para>Gets or sets the level of impact expected.</para>
            </summary>
            <value>
            <para>The level of impact expected.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Repair.NodeImpact.ToString">
            <summary>
            <para>Converts the value of the current object to a string representation.</para>
            </summary>
            <returns>
            <para>A string representation of the node name and impact level.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Repair.NodeImpactLevel">
            <summary>
            <para>Enumerates the effective impact that a repair is expected to have on a particular node.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.Invalid">
            <summary>
            <para>Indicates that the node impact level is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.None">
            <summary>
            <para>Indicates that no impact is expected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.Restart">
            <summary>
            <para>Indicates that the node is expected to stop and eventually restart.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.RemoveData">
            <summary>
            <para>Indicates that the node is expected to stop, and may lose all of its persisted state prior to restarting.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.RemoveNode">
            <summary>
            <para>Indicates that the node is to be removed from the cluster.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.NodeRepairImpactDescription">
            <summary>
            <para>Represents the expected impact of a repair on a set of nodes.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairImpactDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairImpactDescription" /> class with 
            an empty impact list.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.NodeRepairImpactDescription.ImpactedNodes">
            <summary>
            <para>Gets the list of impacted nodes.</para>
            </summary>
            <value>
            <para>A list of <see cref="T:System.Fabric.Repair.NodeImpact" /> objects describing the impact of the repair.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairImpactDescription.ToString">
            <summary>
            <para>Converts the value of the current object to a string representation.</para>
            </summary>
            <returns>
            <para>A string representation of the value of <see cref="P:System.Fabric.Repair.NodeRepairImpactDescription.ImpactedNodes" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Repair.NodeRepairTargetDescription">
            <summary>
            <para>Describes the list of nodes targeted by a repair action.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairTargetDescription" /> class with 
            an empty list of node names.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairTargetDescription" /> class that 
            contains the given node name as the only element in its node list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to be added to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairTargetDescription" /> class that 
            contains elements copied from the specified collection.</para>
            </summary>
            <param name="nodeNames">
            <para>The collection whose elements are copied to the new list.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Repair.NodeRepairTargetDescription.Nodes">
            <summary>
            <para>Gets the list of node names.</para>
            </summary>
            <value>
            <para>A list of node names.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.ToString">
            <summary>
            <para>Converts the value of the current object to a string representation.</para>
            </summary>
            <returns>
            <para>A string representation of the value of <see cref="P:System.Fabric.Repair.NodeRepairTargetDescription.Nodes" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Repair.RepairImpactDescription">
            <summary>
            <para>Describes the expected impact of executing a repair task.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairImpactDescription.Kind">
            <summary>
            <para>Gets the kind of the <see cref="T:System.Fabric.Repair.RepairImpactDescription" /> represented by the current object.</para>
            </summary>
            <value>
            <para>The kind of the <see cref="T:System.Fabric.Repair.RepairImpactDescription" /> represented by the current object.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.RepairImpactKind">
            <summary>
            <para>Specifies the kind of the <see cref="T:System.Fabric.Repair.RepairImpactDescription" />.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairImpactKind.Invalid">
            <summary>
            <para>The repair impact is not valid or is of an unknown type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairImpactKind.Node">
            <summary>
            <para>The repair impact affects a set of Service Fabric nodes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairScopeIdentifier">
            <summary>
            <para>Describes the scope of a repair task.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairScopeIdentifier.Kind">
            <summary>
            <para>Gets the kind of the <see cref="T:System.Fabric.Repair.RepairScopeIdentifier" /> represented by the current object.</para>
            </summary>
            <value>
            <para>The kind of the <see cref="T:System.Fabric.Repair.RepairScopeIdentifier" /> represented by the current object.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.RepairScopeIdentifierKind">
            <summary>
            <para>Specifies the kind of the <see cref="T:System.Fabric.Repair.RepairScopeIdentifier" />.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairScopeIdentifierKind.Invalid">
            <summary>
            <para>The repair scope identifier is not valid or is of an unknown type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairScopeIdentifierKind.Cluster">
            <summary>
            <para>The repair scope identifier represents the entire cluster.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTargetDescription">
            <summary>
            <para>Describes the entities targeted by a repair action.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairTargetDescription.Kind">
            <summary>
            <para>Gets the kind of the <see cref="T:System.Fabric.Repair.RepairTargetDescription" /> represented by the current object.</para>
            </summary>
            <value>
            <para>The kind of the <see cref="T:System.Fabric.Repair.RepairTargetDescription" /> represented by the current object.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.RepairTargetKind">
            <summary>
            <para>Specifies the kind of the <see cref="T:System.Fabric.Repair.RepairTargetDescription" />.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTargetKind.Invalid">
            <summary>
            <para>The repair target is not valid or is of an unknown type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTargetKind.Node">
            <summary>
            <para>The repair target is a set of Service Fabric nodes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTask">
            <summary>
            <para>Represents a repair task, which includes information about what kind of repair was requested, what its progress 
            is, and what its final result was.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Scope">
            <summary>
            <para>Gets an object describing the scope of the repair task.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Repair.RepairScopeIdentifier" /> object describing the scope of the repair task.</para>
            </value>
            <remarks>
            <para>The repair task scope determines the resource against which access checks are performed when the repair task 
            is created, modified, deleted, or retrieved.  Entities impacted by a repair must be contained within the scope of 
            the repair task.  For example, repairs which impact nodes require that the repair task be created under the Cluster scope.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.TaskId">
            <summary>
            <para>Gets the identifier of the repair task.</para>
            </summary>
            <value>
            <para>The identifier of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Version">
            <summary>
            <para>Gets or sets the version of the repair task.</para>
            </summary>
            <value>
            <para>The version of the repair task.</para>
            </value>
            <remarks>
            <para>When creating a new repair task, the version must be set to zero.  When updating a repair task via the 
            UpdateRepairExecutionStateAsync method, the version is used for optimistic concurrency checks.  If the version is 
            set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the 
            update will only succeed if the actual current version of the repair task matches this value.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Description">
            <summary>
            <para>Gets or sets a description of the purpose or other informational details of the repair task.</para>
            </summary>
            <value>
            <para>A description of the purpose or other informational details of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.State">
            <summary>
            <para>Gets or sets the workflow state of the repair task.</para>
            </summary>
            <value>
            <para>The workflow state of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Flags">
            <summary>
            <para>Gets the flags that give additional details about the status of the repair task.</para>
            </summary>
            <value>
            <para>The flags that give additional details about the status of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Action">
            <summary>
            <para>Gets the requested repair action.</para>
            </summary>
            <value>
            <para>The requested repair action.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Target">
            <summary>
            <para>Gets or sets an object describing which entities the requested repair action is targeting.</para>
            </summary>
            <value>
            <para>An object describing which entities the requested repair action is targeting.</para>
            </value>
            <remarks>
            <para>Target may be null if the repair action does not require information about specific targets.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Executor">
            <summary>
            <para>Gets or sets the name of the repair executor.</para>
            </summary>
            <value>
            <para>The name of the repair executor.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ExecutorData">
            <summary>
            <para>Gets or sets a data string that the repair executor can use to store its internal state.</para>
            </summary>
            <value>
            <para>A data string that the repair executor can use to store its internal state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Impact">
            <summary>
            <para>Gets an object that describes the impact of the repair.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Repair.RepairImpactDescription" /> object that describes the impact of the repair.</para>
            </value>
            <remarks>
            <para>Impact must be specified by the repair executor upon transitioning to the Preparing state. The impact object 
            determines what actions the system will take to prepare for the impact of the repair, prior to approving execution 
            of the repair.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ResultStatus">
            <summary>
            <para>Gets or sets a value describing the overall result of the repair task execution.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Repair.RepairTaskResult" /> value describing the overall result of the repair 
            task execution.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ResultCode">
            <summary>
            <para>Gets or sets a value providing additional details about the result of the repair task execution.</para>
            </summary>
            <value>
            <para>A value providing additional details about the result of the repair task execution.</para>
            </value>
            <remarks>
            <para>This value should be an HRESULT.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ResultDetails">
            <summary>
            <para>Gets or sets a string providing additional details about the result of the repair task execution.</para>
            </summary>
            <value>
            <para>A string providing additional details about the result of the repair task execution.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.CreatedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Created state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Created state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ClaimedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Claimed state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Claimed state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.PreparingTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Preparing state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Preparing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ApprovedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Approved state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Approved state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ExecutingTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Executing state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Executing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.RestoringTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Restoring state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Restoring state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.CompletedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Completed state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Completed state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.PreparingHealthCheckStartTimestamp">
            <summary>
            <para>Gets the time when the repair task started the health check in the Preparing state.</para>
            </summary>
            <value>
            <para>The time when the repair task started the health check in the Preparing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.PreparingHealthCheckEndTimestamp">
            <summary>
            <para>Gets the time when the repair task completed the health check in the Preparing state.</para>
            </summary>
            <value>
            <para>The time when the repair task completed the health check in the Preparing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.RestoringHealthCheckStartTimestamp">
            <summary>
            <para>Gets the time when the repair task started the health check in the Restoring state.</para>
            </summary>
            <value>
            <para>The time when the repair task started the health check in the Restoring state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.RestoringHealthCheckEndTimestamp">
            <summary>
            <para>Gets the time when the repair task completed the health check in the Restoring state.</para>
            </summary>
            <value>
            <para>The time when the repair task completed the health check in the Restoring state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.PreparingHealthCheckState">
            <summary>
            <para>Gets the workflow state of the health check when the repair task is in the Preparing state.</para>
            </summary>
            <value>
            <para>The workflow state of the health check when the repair task is in the Preparing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.RestoringHealthCheckState">
            <summary>
            <para>Gets the workflow state of the health check when the repair task is in the Restoring state.</para>
            </summary>
            <value>
            <para>The workflow state of the health check when the repair task is in the Restoring state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.PerformPreparingHealthCheck">
            <summary>
            <para>Gets or sets a value to determine if health checks have to be performed when the repair task enters the Preparing state.</para>
            </summary>
            <value>
            <para>A value to determine if health checks have to be performed when the repair task enters the Preparing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.PerformRestoringHealthCheck">
            <summary>
            <para>Gets or sets a value to determine if health checks have to be performed when the repair task enters the Restoring state.</para>
            </summary>
            <value>
            <para>A value to determine if health checks have to be performed when the repair task enters the Restoring state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskFlags">
            <summary>
            <para>Defines flags that provide extended status information about a repair task.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.None">
            <summary>
            <para>No flags are specified.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.CancelRequested">
            <summary>
            <para>A user has requested cancellation of the repair task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.AbortRequested">
            <summary>
            <para>A user has requested an abort of the repair task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.ForcedApproval">
            <summary>
            <para>A user has forced the approval of the repair task, so it may have executed without normal safety guarantees.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.ValidMask">
            <summary>
            <para>A mask that includes all valid repair task flags.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskList">
            <summary>
            <para>Represents a list of <see cref="T:System.Fabric.Repair.RepairTask" /> objects.</para>
            <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.IndexOf(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Determines the index of a specific item in the <see cref="T:System.Fabric.Repair.RepairTaskList" />.</para>
            </summary>
            <param name="item">
            <para>The object to locate in the list.</para>
            </param>
            <returns>
            <para>The index of item if found in the list; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Insert(System.Int32,System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Inserts an item to the <see cref="T:System.Fabric.Repair.RepairTaskList" /> at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Repair.RepairTaskList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The element at the specified index.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Add(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Adds an item to the <see cref="T:System.Fabric.Repair.RepairTaskList" />.</para>
            </summary>
            <param name="item">
            <para>The object to add to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Clear">
            <summary>
            <para>Removes all items from the <see cref="T:System.Fabric.Repair.RepairTaskList" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Contains(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Determines whether the <see cref="T:System.Fabric.Repair.RepairTaskList" /> contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The object to locate in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the <see cref="T:System.Fabric.Repair.RepairTaskList" /> contains a 
            specific value; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.CopyTo(System.Fabric.Repair.RepairTask[],System.Int32)">
            <summary>
            <para>Copies the elements of the <see cref="T:System.Fabric.Repair.RepairTaskList" /> to an Array, starting at a 
            particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of elements copied from 
            <see cref="T:System.Fabric.Repair.RepairTaskList" />. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Repair.RepairTaskList.Count">
            <summary>
            <para>Gets the number of elements contained in the <see cref="T:System.Fabric.Repair.RepairTaskList" />.</para>
            </summary>
            <value>
            <para>The number of elements contained in the <see cref="T:System.Fabric.Repair.RepairTaskList" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTaskList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the <see cref="T:System.Fabric.Repair.RepairTaskList" /> is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the <see cref="T:System.Fabric.Repair.RepairTaskList" /> is read-only; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Remove(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Removes the first occurrence of a specific object from the <see cref="T:System.Fabric.Repair.RepairTaskList" />.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, 
            <languageKeyword>false</languageKeyword>. This method also returns false if item is not found in the original list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the collection.</para>
            </summary>
            <returns>
            <para>An enumerator that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the collection.</para>
            </summary>
            <returns>
            <para>An enumerator that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskHealthPolicyUpdateDescription">
            <summary>
            Class used for simplifying passing in parameters from clients. 
            Currently this exists just for testability client (test harness) to invoke via REST
            and hence is marked as internal
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskResult">
            <summary>
            <para>Specifies the result of the repair task.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Invalid">
            <summary>
            <para>Indicates that the repair task result is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Succeeded">
            <summary>
            <para>Indicates that the repair task completed execution successfully.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Cancelled">
            <summary>
            <para>Indicates that the repair task was cancelled prior to execution.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Interrupted">
            <summary>
            <para>Indicates that execution of the repair task was interrupted by a cancellation request after some work had 
            already been performed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Failed">
            <summary>
            <para>Indicates that there was a failure during execution of the repair task. Some work may have been performed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Pending">
            <summary>
            <para>Indicates that the repair task result is not yet available, because the repair task has not finished executing.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskState">
            <summary>
            <para>Specifies the workflow state of a repair task.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Invalid">
            <summary>
            <para>Indicates that the repair task state is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Created">
            <summary>
            <para>Indicates that the repair task has been created.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Claimed">
            <summary>
            <para>Indicates that the repair task has been claimed by a repair executor.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Preparing">
            <summary>
            <para>Indicates that the Repair Manager is preparing the system to handle the impact of the repair task, usually by 
            taking resources offline gracefully.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Approved">
            <summary>
            <para>Indicates that the repair task has been approved by the Repair Manager and is safe to execute.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Executing">
            <summary>
            <para>Indicates that execution of the repair task is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Restoring">
            <summary>
            <para>Indicates that the Repair Manager is restoring the system to its pre-repair state, usually by bringing 
            resources back online.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Completed">
            <summary>
            <para>Indicates that the repair task has completed, and no further state changes will occur.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskStateFilter">
            <summary>
            <para>Specifies values that can be combined as a bitmask to retrieve repair tasks filtered by their current workflow state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Default">
            <summary>
            <para>Includes all repair tasks, regardless of state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Created">
            <summary>
            <para>Includes repair tasks in the Created state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Claimed">
            <summary>
            <para>Includes repair tasks in the Claimed state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Preparing">
            <summary>
            <para>Includes repair tasks in the Preparing state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Approved">
            <summary>
            <para>Includes repair tasks in the Approved state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Executing">
            <summary>
            <para>Includes repair tasks in the Executing state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Restoring">
            <summary>
            <para>Includes repair tasks in the Restoring state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Completed">
            <summary>
            <para>Includes repair tasks in the Completed state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.ReadyToExecute">
            <summary>
            <para>Includes repair tasks in the Approved or Executing state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Active">
            <summary>
            <para>Includes repair tasks that are not completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.All">
            <summary>
            <para>Includes all repair tasks, regardless of state.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskHealthCheckState">
            <summary>
            <para>Specifies the workflow state of a repair task's health check when the repair 
            task enters either the Preparing or Restoring state.</para>
            </summary>
            <remarks>Separate health checks are done when a repair task enters the Preparing and Restoring states.</remarks>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskHealthCheckState.NotStarted">
            <summary>
            Indicates that the health check hasn't started.
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskHealthCheckState.InProgress">
            <summary>
            Indicates that the health check is in progress
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskHealthCheckState.Succeeded">
            <summary>
            Indicates that the health check succeeded.
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskHealthCheckState.Skipped">
            <summary>
            Indicates that the health check was skipped.
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskHealthCheckState.TimedOut">
            <summary>
            Indicates that the health check timed out.
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.SystemNodeRepairAction">
            <summary>
            <para>Specifies node repair actions for which the system has a built-in executor.</para>
            <para>This type supports the Service Fabric platform; it is not meant to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.SystemNodeRepairAction.Reboot">
            <summary>
            <para>Reboots the OS of the target nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.SystemNodeRepairAction.ReimageOS">
            <summary>
            <para>Reimages the OS volume of the target nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.SystemNodeRepairAction.FullReimage">
            <summary>
            <para>Reimages all disk volumes of the target nodes, destroying all data stored on the nodes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ReconfigurationInformation">
            <summary>
            Represents information about the replica reconfiguration.
            </summary>
        </member>
        <member name="M:System.Fabric.ReconfigurationInformation.#ctor(System.Fabric.ReplicaRole,System.Fabric.ReconfigurationPhase,System.Fabric.ReconfigurationType,System.DateTime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.ReconfigurationInformation" /> class.</para>
            </summary>
            <param name="previousConfigurationRole"></param>
            <param name="reconfigurationPhase"></param>
            <param name="reconfigurationType"></param>
            <param name="reconfigurationStartTimeUtc"></param>
        </member>
        <member name="M:System.Fabric.ReconfigurationInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.ReconfigurationInformation" /> class with default values.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ReconfigurationInformation.PreviousConfigurationRole">
            <summary>
            <para>The replica role prior to the reconfiguration. The value would be <see cref="F:System.Fabric.ReplicaRole.Unknown" />if there was no previous reconfiguration.</para>
            <value>The previous replica role.</value>
            </summary>
        </member>
        <member name="P:System.Fabric.ReconfigurationInformation.ReconfigurationPhase">
            <summary>
            <para>The current phase of the reconfiguration. The value would be <see cref="F:System.Fabric.ReconfigurationPhase.None" /> if no reconfiguration is taking place.</para>
            <value>The phase of current ongoing reconfiguration.</value>
            </summary>
        </member>
        <member name="P:System.Fabric.ReconfigurationInformation.ReconfigurationType">
            <summary>
            <param>The type of the reconfiguration. The value would be <see cref="F:System.Fabric.ReconfigurationType.None" /> if no reconfiguration is taking place.</param>
            <value>The type of reconfiguration.</value>
            </summary>
        </member>
        <member name="P:System.Fabric.ReconfigurationInformation.ReconfigurationStartTimeUtc">
            <summary>
            <param>The date time when reconfiguration started. The value is represented as DateTime in UTC. 
            The vlaue would be <see cref="F:System.DateTime.MinValue"/> if no reconfiguration is taking place.</param>
            <value>The start date time of reconfiguration in UTC format.</value>
            </summary>
        </member>
        <member name="T:System.Fabric.ReconfigurationPhase">
            <summary>
            Represents replica reconfiguration phase.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.Unknown">
            <summary>
            Invalid reconfiguration phase.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.None">
            <summary>
            There is no reconfiguration currently in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.Phase0">
            <summary>
            The reconfiguration is transferring data from the previous primary to the new primary.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.Phase1">
            <summary>
            The reconfiguration is querying the replica set for the progress.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.Phase2">
            <summary>
            The reconfiguration is ensuring that data from the current primary is present in a majority of the replica set.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.Phase3">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.Phase4">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationPhase.AbortPhaseZero">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:System.Fabric.ReconfigurationType">
            <summary>
            Represents replica reconfiguration type.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationType.Unknown">
            <summary>
            Invalid reconfiguration type.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationType.SwapPrimary">
            <summary>
            Reconfiguration triggered to promote an active secondary replica to the primary role and demote existing primary replica to secondary role.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationType.Failover">
            <summary>
            Reconfiguration triggered in response to a primary going down. This could be due to many reasons such as primary replica crashing etc
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationType.Other">
            <summary>
            Reconfigurations where no change is happening to the primary.
            </summary>
        </member>
        <member name="F:System.Fabric.ReconfigurationType.None">
            <summary>
            No reconfiguration is taking place currently.
            </summary>
        </member>
        <member name="T:System.Fabric.ReplicaInformation">
            <summary>
            This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:System.Fabric.ReplicaInformation.#ctor">
            <summary>
            This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.Id">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.Role">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.Status">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.ReplicatorAddress">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.CatchUpCapability">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.CurrentProgress">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
            <value>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.MustCatchup">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets a value indicating whether the replica must be caught up as part of a WaitForQuorumCatchup.
            </summary>
            <value>Whether the replica must be caught up as part of a WaitForQuorumCatchup.</value>
        </member>
        <member name="T:System.Fabric.ReplicaOpenMode">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaOpenMode.Invalid">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaOpenMode.New">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaOpenMode.Existing">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="T:System.Fabric.ReplicaRole">
            <summary>
            <para>Indicates the role of a stateful service replica. </para>
            </summary>
            <remarks>
            <para>Service Fabric requires different behaviors from a service replica depending on what role it currently performs.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.ReplicaRole.Unknown">
            <summary>
            <para>Indicates the initial role that a replica is created in.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaRole.None">
            <summary>
            <para>Specifies that the replica has no responsibility in regard to the replica set.</para>
            </summary>
            <remarks>
            <para>When 
            <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)" /> indicates 
            this role, it is safe to delete any persistent state that is associated with this replica.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.ReplicaRole.Primary">
            <summary>
            <para>Refers to the replica in the set on which all read and write operations are complete in order to enforce strong consistency semantics. 
            Read operations are handled directly by the Primary replica, while write operations must be acknowledged by a quorum of the replicas in the 
            replica set. There can only be one Primary replica in a replica set at a time. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaRole.IdleSecondary">
            <summary>
            <para>Refers to a replica in the set that receives a state transfer from the Primary replica to prepare for becoming an active Secondary replica. 
            There can be multiple Idle Secondary replicas in a replica set at a time. Idle Secondary replicas do not count as a part of a write quorum. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaRole.ActiveSecondary">
            <summary>
            <para>Refers to a replica in the set that receives state updates from the Primary replica, applies them, and sends acknowledgements back. 
            Secondary replicas must participate in the write quorum for a replica set. There can be multiple active Secondary replicas in a replica set 
            at a time. The number of active Secondary replicas is configurable that the reliability subsystem should maintain.  </para>
            </summary>
        </member>
        <member name="T:System.Fabric.ReplicaSetQuorumMode">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaSetQuorumMode.Invalid">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaSetQuorumMode.WriteQuorum">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaSetQuorumMode.QuorumAll">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="T:System.Fabric.ReplicaStatus">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaStatus.Invalid">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaStatus.Down">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="F:System.Fabric.ReplicaStatus.Up">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="T:System.Fabric.ReplicatorSettings">
            <summary>
            <para>Allows a stateful replica to configure the <see cref="T:System.Fabric.FabricReplicator" /> when creating it
            via <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)" />.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ReplicatorSettings.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.ReplicatorSettings" /> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.RetryInterval">
            <summary>
            <para>Defines how long the <see cref="T:System.Fabric.FabricReplicator" /> waits after it transmits a message from the primary to the
            secondary for the secondary to acknowledge that it has received the message.</para>
            </summary>
            <value>
            <para>The time needed the <see cref="T:System.Fabric.FabricReplicator" /> waits after it transmits a message from the primary to the
            secondary for the secondary to acknowledge that it has received the message.</para>
            </value>
            <remarks>
            <para>Receiving a message does not necessarily that the message has been processed.</para>
            <para>If this timer is exceeded, then the message is retransmitted.</para>
            <para>The default value is 5 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval">
            <summary>
            <para>Gets or sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. </para>
            </summary>
            <value>
            <para>The amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.</para>
            </value>
            <remarks>
            <para>Other operations received and acknowledged during this time period will have their acknowledgments sent back in a single message.</para>
            <para>Increasing the <see cref="P:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval" /> value decreases latency of individual replication
            operations but increases throughput of the replicator.</para>
            <para>Default value is 0.05 Seconds (50 milliseconds)</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.ReplicatorAddress">
            <summary>
            <para>Configures the address that this replicator will use when communicating with other Replicators.</para>
            </summary>
            <value>
            <para>The address that this replicator will use when communicating with other Replicators.</para>
            </value>
            <remarks>
            <para>String is formatted as “hostname:port”, where hostname can be FQDN or IP address. The default value is localhost:0. If replicator is running inside a container, you should try setting up <see cref="P:System.Fabric.ReplicatorSettings.ReplicatorListenAddress" /> and <see cref="P:System.Fabric.ReplicatorSettings.ReplicatorPublishAddress" />.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.SecurityCredentials">
            <summary>
            <para>Allows the service to define security credentials for securing the traffic between replicators.</para>
            </summary>
            <value>
            <para>The service to define security credentials for securing the traffic between replicators.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialReplicationQueueSize">
            <summary>
            <para>Gets or sets the initial size of the replication queue size.</para>
            </summary>
            <value>
            <para>The initial size of the replication queue size.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxReplicationQueueSize">
            <summary>
            <para>Gets or sets the maximum size for the replication queue.</para>
            </summary>
            <value>
            <para>the maximum size for the replication queue.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialCopyQueueSize">
            <summary>
            <para>Gets or sets the initial size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            copy <see cref="T:System.Fabric.IOperation" />s not yet pumped and processed by the service.</para>
            </summary>
            <value>
            <para>The initial size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains copy
            <see cref="T:System.Fabric.IOperation" />s not yet pumped and processed by the service.</para>
            </value>
            <remarks>
            <para>The default value is 64. Note that values for this parameter must be a power of 2.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxCopyQueueSize">
            <summary>
            <para>Gets or sets the maximum size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            copy <see cref="T:System.Fabric.IOperation" />s not yet pumped and processed by the service.</para>
            </summary>
            <value>
            <para>The maximum size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains copy
            <see cref="T:System.Fabric.IOperation" />s not yet pumped and processed by the service.</para>
            </value>
            <remarks>
            <para>If this queue size is reached at the secondary, operations will be buffered in the Primary’s copy queue. If that queue also fills,
            then the Primary will begin seeing <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull" /> exceptions.</para>
            <para>The default value is 1024</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.RequireServiceAck">
            <summary>
            <para>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls
            <see cref="M:System.Fabric.IOperation.Acknowledge" /> before it pumps the next operation.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the optimistic acknowledgment of operations in non-persistent services;otherwise,
            <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks>
            <para>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment
            of the operations by the Replicator. This setting has no effect for persistent services. </para>
            <para>The default value is false.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize">
            <summary>
            <para>Gets or sets the maximum size for the replication queue memory.</para>
            </summary>
            <value>
            <para>The maximum size for the replication queue memory.</para>
            </value>
            <remarks>
            <para>The default value is 0. This implies there is no memory limit</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations">
            <summary>
            <para>Typically, operations in the secondary replicator are kept in the queue to be able to catchup replicas if it is promoted to a primary. With
            this flag enabled, the secondary replicator releases the operation as soon as it is acknowledged by the user service.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the secondary replicator releases the operation as soon as it is acknowledged by the user service;
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks>
            <para>The default value is false</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxReplicationMessageSize">
            <summary>
            <para>Gets or sets the maximum size of a message that can be transmitted via the replicator. These include replication messages, copy messages
            and copy context messages. The unit of representation is bytes.</para>
            </summary>
            <value>
            <para>The maximum size of a message that can be transmitted via the replicator.</para>
            </value>
            <remarks>
            <para>The default value is 50MB</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck">
            <summary>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</summary>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize">
            <summary>
            <para>Defines the initial size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s.The unit here is the number of operations in the queue.</para>
            </summary>
            <value>
            <para>The initial size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" /></para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Primary</para>
            <para>The default value is 64.  Note that values for this parameter must be a power of 2.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize">
            <summary>
            <para>Defines the maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s</para>
            </summary>
            <value>
            <para>The maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s. The unit here is the number of operations in the queue.</para>
            </value>
            <remarks>
            <para>If this queue size is reached, then the Primary will begin seeing <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull" /> exceptions.</para>
            <para>The default value is 1024 Note that values for this parameter must be a power of 2.</para>
            <para>This setting is specific to the Replicator when the role of the service is Primary</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize">
            <summary>
            <para>Defines the maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s</para>
            </summary>
            <value>
            <para>. Returns the maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s The unit here is the virtual memory consumption of the queue .Returns <see cref="T:System.Int64" />.</para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Primary. The default value is 0. This implies there is no memory limit</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize">
            <summary>
            <para>Defines the initial size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s </para>
            </summary>
            <value>
            <para>The initial size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s not yet pumped and processed by the service. The unit here is the number of operations in the queue </para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Secondary/Idle</para>
            <para>The default value is 64.  Note that values for this parameter must be a power of 2.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize">
            <summary>
            <para>Defines the maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s </para>
            </summary>
            <value>
            <para>The maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s not yet pumped and processed by the service. The unit here is the number of operations in the queue</para>
            </value>
            <remarks>
            <para>If this queue size is reached, operations will be buffered in the Primary’s replication queue.  If that queue also fills, then the Primary
            will begin seeing <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull" /> exceptions.</para>
            <para>The default value is 2048.Note that values for this parameter must be a power of 2.</para>
            <para>This setting is specific to the Replicator when the role of the service is Secondary/Idle</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize">
            <summary>
            <para>Defines the maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s.</para>
            </summary>
            <value>
            <para>Returns the maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator" />, which contains
            replication <see cref="T:System.Fabric.IOperation" />s. The unit here is the virtual memory consumption of the queue.</para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Secondary/Idle. The default value is 0. This implies there is no memory limit</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout">
            <summary>
            <para>Defines how long the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations before
            processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operations.</para>
            </summary>
            <value>
            <para>Amount of time the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations when there is
            a request for the primary replicator to process a reconfiguration <see cref="T:System.TimeSpan" />.</para>
            </value>
            <remarks>
            <para>The default value is 0. This implies that reconfigurations aren’t waited upon for receiving quorum on the pending replication operations.
            This helps in completing reconfigurations sooner. Note that larger values for this parameter could potentially result in slower reconfigurations,
            implying longer durations to fail-over a primary. </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.ReplicatorListenAddress">
            <summary>
            <para>Configures the listen address that this replicator will use to receieve information from other Replicators.</para>
            </summary>
            <value>
            <para>The listen address that this replicator will use to receive information from other Replicators.</para>
            </value>
            <remarks>
            <para>String is formatted as “hostname:port”, where hostname can be FQDN or IP address. The default value is localhost:0. hostname for listen address can be obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ServiceListenAddress" /></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.ReplicatorPublishAddress">
            <summary>
            <para>Configures the publish address that this replicator will use to send information to other Replicators.</para>
            </summary>
            <value>
            <para>The publish address that this replicator will use to send information to other Replicators.</para>
            </value>
            <remarks>
            <para>String is formatted as “hostname:port”, where hostname can be FQDN or IP address. The default value is localhost:0. hostname for publish address can be obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ServicePublishAddress" /></para>
            </remarks>
        </member>
        <member name="M:System.Fabric.ReplicatorSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)">
            <summary>
            <para>Loads the <see cref="T:System.Fabric.ReplicatorSettings" /> object from the service configuration settings file.</para>
            </summary>
            <param name="codePackageActivationContext">
            <para>The current code package activation context <see cref="T:System.Fabric.CodePackageActivationContext" /></para>
            </param>
            <param name="configPackageName">
            <para>The current configuration package name</para>
            </param>
            <param name="sectionName">
            <para>The section within the configuration file that defines all the replicator settings</para>
            </param>
            <returns>
            <para>The loaded <see cref="T:System.Fabric.ReplicatorSettings" /> object from the service configuration settings file</para>
            </returns>
            <remarks>
            <para> The configuration settings file (settings.xml) within the service configuration folder generally contains all the replicator settings that is needed to pass in the <see cref="T:System.Fabric.ReplicatorSettings" /> object to the <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)" /> method. Typically, the onus is on the service author to read the settings.xml file, parse the values and appropriately construct the <see cref="T:System.Fabric.ReplicatorSettings" /> object.</para>
            <para>With the current helper method, the service author can bypass the above process.</para>
            <para>The following are the parameter names that should be provided in the service configuration “settings.xml”, to be recognizable by windows fabric to perform the above parsing automatically:</para>
            <list type="number">
            <item>
            <description>
            <para>BatchAcknowledgementInterval –<see cref="P:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval" /> value in seconds</para>
            </description>
            </item>
            <item>
            <description>
            <para>InitialCopyQueueSize -<see cref="P:System.Fabric.ReplicatorSettings.InitialCopyQueueSize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>MaxCopyQueueSize -<see cref="P:System.Fabric.ReplicatorSettings.MaxCopyQueueSize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>MaxReplicationMessageSize -<see cref="P:System.Fabric.ReplicatorSettings.MaxReplicationMessageSize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>RetryInterval -<see cref="P:System.Fabric.ReplicatorSettings.RetryInterval" /> value in seconds</para>
            </description>
            </item>
            <item>
            <description>
            <para>RequireServiceAck -<see cref="P:System.Fabric.ReplicatorSettings.RequireServiceAck" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>ReplicatorAddress or ReplicatorEndpoint – ReplicatorAddress should be of the form IPort. ReplicatorEndpoint must reference
            a valid service endpoint resource from the service manifest -<see cref="P:System.Fabric.ReplicatorSettings.ReplicatorAddress" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>ReplicatorListenAddress or ReplicatorEndpoint – ReplicatorListenAddress should be of the form IPort. ReplicatorEndpoint must reference
            a valid service endpoint resource from the service manifest -<see cref="P:System.Fabric.ReplicatorSettings.ReplicatorListenAddress" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>ReplicatorPublishAddress or ReplicatorEndpoint – ReplicatorPublishAddress should be of the form IPort. ReplicatorEndpoint must reference
            a valid service endpoint resource from the service manifest -<see cref="P:System.Fabric.ReplicatorSettings.ReplicatorPublishAddress" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>SecondaryClearAcknowledgedOperations -<see cref="P:System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>PrimaryWaitForPendingQuorumsTimeout - <see cref="P:System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout" /> value in seconds</para>
            </description>
            </item>
            <item>
            <description>
            <para>UseStreamFaultsAndEndOfStreamOperationAck -<see cref="P:System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>InitialPrimaryReplicationQueueSize -<see cref="P:System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>InitialSecondaryReplicationQueueSize -<see cref="P:System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>MaxPrimaryReplicationQueueSize -<see cref="P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>MaxSecondaryReplicationQueueSize -<see cref="P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>MaxPrimaryReplicationQueueMemorySize -<see cref="P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize" /></para>
            </description>
            </item>
            <item>
            <description>
            <para>MaxSecondaryReplicationQueueMemorySize -<see cref="P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize" /></para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:System.Fabric.ResolvedServiceEndpoint">
            <summary>
            <para>Represents a resolved service endpoint, which contains information
            about service partition replica role and the address it listens to.</para>
            </summary>
            <remarks>
            <para>
            The resolved service endpoints are returned from
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)"/>,
            as part of <see cref="T:System.Fabric.ResolvedServicePartition"/>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServiceEndpoint.Role">
            <summary>
            <para>Gets the role of a service endpoint.</para>
            </summary>
            <value>
            <para>The role of a service endpoint.</para>
            </value>
            <remarks>
            <para>The <see cref="T:System.Fabric.ServiceEndpointRole"/> is used by a client to determine which service instance
            or replica to select and connect to.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServiceEndpoint.Address">
            <summary>
            <para>Gets the address for the endpoint.
            The service replica gives this string to Service Fabric to let users know where it can be reached.</para>
            </summary>
            <value>
            <para>The address for the endpoint where the service replica or instance can be reached.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ResolvedServicePartition">
            <summary>
            <para>
            Contains information about the partition of the service that was resolved
            and the set of endpoints that can be used to access the partition.</para>
            </summary>
            <remarks>
            <para>
            The resolved service partition is obtained as a result of calling
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)"/> and the other overloads.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServicePartition.Endpoints">
            <summary>
            <para>Gets the endpoints of the service partition.</para>
            </summary>
            <value>
            <para>A collection of <see cref="T:System.Fabric.ResolvedServiceEndpoint" />
            for the specified service partition.</para>
            </value>
            <remarks>
            <para>A resolved service endpoint contains the role of the
            stateful service replica or stateless service instance
            and the address where this replica can be reached.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServicePartition.Info">
            <summary>
            <para>Gets information about the partition of the service that was resolved.</para>
            </summary>
            <value>The information about the partition of the service that was resolved.</value>
            <remarks>
            <para>
            The service partition can be of different <see cref="T:System.Fabric.ServicePartitionKind"/>.
            You can cast the service partition information to the correct derived type
            to get detailed information about the partition.
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServicePartition.ServiceName">
            <summary>
            <para>Gets the name of the service instance.</para>
            </summary>
            <value>
            <para>The name of the service instance.</para>
            </value>
        </member>
        <member name="M:System.Fabric.ResolvedServicePartition.GetEndpoint">
            <summary>
            <para>Returns a single endpoint, instead of a collection of all endpoints. </para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Fabric.ResolvedServiceEndpoint" />.</para>
            </returns>
            <remarks>
            <para>Many times, you only need a single endpoint instead of all the endpoints. If the service is stateless, it returns a random endpoint. 
            If the service is a stateful service, than it returns the endpoint to which the Primary replica of the service partition listens. Note that if 
            the Primary replica currently does not exist, it throws <see cref="T:System.Fabric.FabricException" />.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Compares two resolved service partitions and identifies which is newer. </para>
            </summary>
            <param name="other">
            <para>The other resolved service partition to compare.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32" />.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            <para>The two <see cref="T:System.Fabric.ResolvedServicePartition" /> objects are from different service partitions. This can happen if the 
            service is deleted and re-created with the same name and partitioning between two resolve calls.</para>
            </exception>
            <remarks>
            <para>The <see cref="M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)" /> method takes in a 
            resolved service partition (RSP) argument with the parameter <paramref name="other" /> to enable the user to identify which RSP is more 
            up-to-date. A returned value of 0 indicates that the two RSPs have the same version. 1 indicates that the other RSP has an older version. 
            -1 indicates that the other RSP has a newer version. </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.RollingUpgradeMode">
            <summary>
            <para>Specifies the type of rolling upgrade when upgrading an application instance or cluster.</para>
            </summary>
            <remarks>
            <para>For more information, see Upgrade and Scale a Service Fabric Cluster and Upgrade an Application.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.Invalid">
            <summary>
            <para>All Service Fabric enumerations have reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.UnmonitoredAuto">
            <summary>
            <para>Specifies that the upgrade should be unmonitored automatic.</para>
            </summary>
            <remarks>
            <para>Using this mode,  automatically proceeds to upgrading the next upgrade domain until all upgrade domains are upgraded.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.UnmonitoredManual">
            <summary>
            <para>Specifies that the upgrade should be unmonitored manual.</para>
            </summary>
            <remarks>
            <para>Using this mode, the administrator needs to instruct  to move to the next upgrade domain (using the 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)" /> or 
            <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)" /> methods) and continue 
            the upgrade.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.Monitored">
            <summary>
            <para>Specifies that the upgrade should be monitored automatic.</para>
            </summary>
            <remarks>
            <para>After an upgrade domain (UD) is upgraded, Service Fabric will proceed to upgrade the next UD if the health of the UD and the cluster meets the 
            defined health policies for that upgrade. Otherwise, the entire upgrade is marked as failed and the upgrade failure action is taken. The default failure 
            action is to roll-back the entire upgrade.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Security.AzureActiveDirectoryMetadata">
            <summary>
            Represents the metadata used to acquire authentication tokens from Azure Active Directory.
            </summary>
        </member>
        <member name="P:System.Fabric.Security.AzureActiveDirectoryMetadata.LoginEndpoint">
            <summary>
            Gets a value indicating the Azure Active Directory login instance endpoint (for ADAL initialization).
            </summary>
            <value>
            Returns the login instance endpoint.
            </value>
        </member>
        <member name="P:System.Fabric.Security.AzureActiveDirectoryMetadata.Authority">
            <summary>
            Gets a value indicating the authority location to acquire a token from.
            </summary>
            <value>
            Returns the authority.
            </value>
        </member>
        <member name="P:System.Fabric.Security.AzureActiveDirectoryMetadata.TenantId">
            <summary>
            Gets a value indicating the tenant ID of the relevant Azure Active Directory tenant.
            </summary>
            <value>
            Returns the tenant ID.
            </value>
        </member>
        <member name="P:System.Fabric.Security.AzureActiveDirectoryMetadata.ClusterApplication">
            <summary>
            Gets a value indicating the cluster application resource.
            </summary>
            <value>
            Returns the cluster application resource.
            </value>
        </member>
        <member name="P:System.Fabric.Security.AzureActiveDirectoryMetadata.ClientApplication">
            <summary>
            Gets a value indicating the client ID to use when acquiring tokens for the cluster application resource.
            </summary>
            <value>
            Returns the client ID.
            </value>
        </member>
        <member name="P:System.Fabric.Security.AzureActiveDirectoryMetadata.ClientRedirect">
            <summary>
            Gets a value indicating the client redirect URI.
            </summary>
            <value>
            Returns the client redirect URI.
            </value>
        </member>
        <member name="T:System.Fabric.Security.EncryptionUtility">
            <summary>
            <para>Represents the encryption utility.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.#ctor">
            <summary>
            <para>Instantiates a new <see cref="T:System.Fabric.Security.EncryptionUtility"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptText(System.String,System.String,System.String)">
            <summary>
            <para>Encrypt text string with an installed X509 certificate. Certificate store location is LocalMachine and the encryption algorithm is AES256 CBC.</para>
            </summary>
            <param name="textToEncrypt">
            <para>The text string to encrypt.</para>
            </param>
            <param name="thumbprint">
            <para>The thumbprint of encryption certificate.</para>
            </param>
            <param name="storeName">
            <para>The name of certificate store, from which encryption certificate is retrieved.</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptText(System.String,System.String,System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            <para>Encrypt text string with an installed X509 certificate.</para>
            </summary>
            <param name="textToEncrypt">
            <para>The text to encrypt.</para>
            </param>
            <param name="thumbprint">
            <para>The thumbprint of encryption certificate.</para>
            </param>
            <param name="storeName">
            <para>The name of certificate store, from which encryption certificate is retrieved.</para>
            </param>
            <param name="storeLocation">
            <para>The certificate store location to retrieve encryption certificate.</para>
            </param>
            <param name="algorithmOid">
            <para>The encryption algorithm object identifier (OID).</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptTextByCertFile(System.String,System.String,System.String)">
            <summary>
            <para>Encrypt text string with an X509 certificate in a file.</para>
            </summary>
            <param name="textToEncrypt">
            <para>The text to encrypt.</para>
            </param>
            <param name="certFileName">
            <para>The encryption certificate file path.</para>
            </param>
            <param name="algorithmOid">
            <para>The encryption algorithm object identifier (OID).</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.DecryptText(System.String)">
            <summary>
            <para>Decrypt a text string encrypted by EncryptText methods of <see cref="T:System.Fabric.Security.EncryptionUtility" />, it is assumed that the store location of decryption certificate is LocalMachine.</para>
            </summary>
            <param name="textToDecrypt">
            <para>The encrypted text to decrypt.</para>
            </param>
            <returns>
            <para>The decrypted text as <see cref="T:System.Security.SecureString" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.DecryptText(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            <para>Decrypt a text string encrypted by EncryptText methods of <see cref="T:System.Fabric.Security.EncryptionUtility" />.</para>
            </summary>
            <param name="textToDecrypt">
            <para>The encrypted text to decrypt.</para>
            </param>
            <param name="storeLocation">
            <para>The certificate store location to retrieve decryption certificate.</para>
            </param>
            <returns>
            <para>The decrypted text as <see cref="T:System.Security.SecureString" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptValue(System.String,System.String,System.String)">
            <summary>
            <para>Encrypts string value using specified certificate. This method is deprecated; EncryptText method should be used instead.</para>
            </summary>
            <param name="thumbprint">
            <para>The thumbprint of certificate used to encrypt text.</para>
            </param>
            <param name="storeLocation">
            <para>The StoreName for the certificate. Defaults to "My" store.</para>
            </param>
            <param name="textToEncrypt">
            <para>The text value that needs to be encrypted.</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.DecryptValue(System.String)">
            <summary>
            <para>Decrypts string values that were encrypted by calling EncryptValue. This method is deprecated; EncryptText method should be used instead.</para>
            </summary>
            <param name="textToDecrypt">
            <para>The string value to decrypt.</para>
            </param>
            <returns>
            <para>The decrypted value.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.ServiceEndpointsVersion">
            <summary>
            <para>Used to compare two <see cref="T:System.Fabric.ServiceNotification" /> objects and determine which notification event precedes the other.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceEndpointsVersion.Compare(System.Fabric.ServiceEndpointsVersion)">
            <summary>
            <para>Compares this version with the version of <paramref name="other" />.</para>
            </summary>
            <param name="other">
            <para>The other version to compare against.</para>
            </param>
            <returns>
            <para>Zero if this and <paramref name="other" /> are equivalent, a negative value if this is less than <paramref name="other" />, and a positive 
            value if this is greater than <paramref name="other" />.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.ServiceEndpointRole">
            <summary>
            <para>Enumerates the kinds of possible roles of a service endpoint. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.Invalid">
            <summary>
            <para>Indicates that Service Fabric cannot classify the service endpoint role. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.Stateless">
            <summary>
            <para>Indicates that the service endpoint role is stateless. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.StatefulPrimary">
            <summary>
            <para>Indicates that the service endpoint role is a stateful Primary replica. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.StatefulSecondary">
            <summary>
            <para>Indicates that the service endpoint role is a stateful Secondary replica. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="T:System.Fabric.ServiceInitializationParameters">
            <summary>
            <para>Represents the base class for service initialization parameters that are passed to the <see cref="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)" /> method of 
            a service.</para>
            </summary>
            <remarks>
            <para>Derived types define initialization data that are specific to stateless and stateful services.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.CodePackageActivationContext">
            <summary>
            <para>Specifies the activation context that is associated with the code package that contains the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.CodePackageActivationContext" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.ServiceTypeName">
            <summary>
            <para>Indicates the name of the type of the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.ServiceName">
            <summary>
            <para>Indicates the Service Fabric name of the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.InitializationData">
            <summary>
            <para>Specifies custom initialization data that is provided by the creator of the service as part of the <see cref="T:System.Fabric.Description.ServiceDescription" /> class.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Byte" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.PartitionId">
            <summary>
            <para>Specifies the unique identifier of the service partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Guid" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ServiceNotification">
            <summary>
            <para>Represents a service notification containing details about a service whose replica or instance endpoints have changed. Notifications are dispatched by the <see cref="E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched" /> event.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ServiceNotification.ServiceName">
            <summary>
            <para>Gets the name of the service.</para>
            </summary>
            <value>
            <para>The name of the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.PartitionId">
            <summary>
            <para>Gets the partition ID of the service.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.Endpoints">
            <summary>
            <para>Gets the new replica or instance endpoints published by the service. The collection will be empty if the service has been deleted.</para>
            </summary>
            <value>
            <para>A list of endpoints published by the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.Version">
            <summary>
            <para>Gets the version of this notification event. The version can be used to order any two notification events.</para>
            </summary>
            <value>
            <para>The version of this notification event.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.PartitionInfo">
            <summary>
            <para>Gets the detailed partition information for the service. This property can be null in certain cases where detailed partition information is 
            unavailable - such as when the service notification event is for a service deletion event.</para>
            </summary>
            <value>
            <para>The detailed partition information of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ServicePartitionInformation">
            <summary>
            <para>Represents the base class for describing partitions.</para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.Int64RangePartitionInformation" />, <see cref="T:System.Fabric.NamedPartitionInformation" />, and <see cref="T:System.Fabric.SingletonPartitionInformation" /> 
            all derive from this type.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Id">
            <summary>
            <para>Specifies the partition ID for this partition as a GUID.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Guid" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Kind">
            <summary>
            <para>Describes the type of partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ServicePartitionKind" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ServicePartitionKind">
            <summary>
            <para>Indicates the type of partitioning scheme that is used. </para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.ServicePartitionKind" /> defines the value of the <see cref="P:System.Fabric.ServicePartitionInformation.Kind" /> property of the 
            <see cref="T:System.Fabric.ServicePartitionInformation" /> class.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Invalid">
            <summary>
            <para>Indicates the partition kind is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Singleton">
            <summary>
            <para>Indicates that the partition is based on string names, and is a <see cref="T:System.Fabric.SingletonPartitionInformation" /> object, that was originally 
            created via <see cref="T:System.Fabric.Description.SingletonPartitionSchemeDescription" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Int64Range">
            <summary>
            <para>Indicates that the partition is based on Int64 key ranges, and is an <see cref="T:System.Fabric.Int64RangePartitionInformation" /> object that was 
            originally created via <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Named">
            <summary>
            <para>Indicates that the partition is based on string names, and is a <see cref="T:System.Fabric.NamedPartitionInformation" /> object, that was originally 
            created via <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription" />.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ServicePartitionResolutionChange">
            <summary>
            <para>This wrapper contains the updated <see cref="T:System.Fabric.ResolvedServicePartition" />. </para>
            </summary>
            <remarks>
            <para>If there was an exception thrown while the newer <see cref="T:System.Fabric.ResolvedServicePartition" /> is acquired, then the 
            <see cref="T:System.Fabric.ServicePartitionResolutionChange" /> also contains the exception. Note that if the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Exception" /> property 
            is not null, then the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Result" /> property is null.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ServicePartitionResolutionChange.Exception">
            <summary>
            <para>Gets the exception that was thrown while the relevant <see cref="T:System.Fabric.ResolvedServicePartition" /> was being acquired or updated.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Exception" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServicePartitionResolutionChange.Result">
            <summary>
            <para>Contains the new <see cref="T:System.Fabric.ResolvedServicePartition" /> that is relevant for the registered service partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ResolvedServicePartition" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServicePartitionResolutionChange.HasException">
            <summary>
            <para>Indicates whether there was an exception. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean" />.</para>
            </value>
            <remarks>
            <para>If so, the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Result" /> parameter is null and the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Exception" /> 
            parameter is set.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.ServicePartitionResolutionChangeHandler">
            <summary>
            <para>A delegate type for client-side callbacks that are made to user code when the endpoints of a service change or an exception is 
            encountered during the process of updating endpoint information at runtime.</para>
            </summary>
            <param name="source">
            <para>A reference to the <see cref="T:System.Fabric.FabricClient" /> instance receiving the endpoint change event.</para>
            </param>
            <param name="handlerId">
            <para>The ID returned from <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)" /> when the handler was registered.</para>
            </param>
            <param name="args">
            <para>Event arguments containing details for the event. <seealso cref="T:System.Fabric.ServicePartitionResolutionChange" />.</para>
            </param>
        </member>
        <member name="T:System.Fabric.SingletonPartitionInformation">
            <summary>
            <para>Indicates that the service is Singleton-partitioned, effectively non-partitioned or with one partition only, and uses the partition 
            scheme of a Singleton service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.SingletonPartitionInformation.#ctor">
            <summary>
            <para>Creates a new instance of the <see cref="T:System.Fabric.SingletonPartitionInformation" /> class.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.StatefulServiceInitializationParameters">
            <summary>
            <para>Defines service initialization parameters for a stateful service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.StatefulServiceInitializationParameters.ReplicaId">
            <summary>
            <para>Specifies the unique identifier for the stateful service replica.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health on the current stateful service replica of the partition.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information,
            such as source, property, and health state.</param>
            <returns></returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed.</para>
            </exception>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.StatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health on the current replica.
            Specifies send options that control how the report is sent to the health store.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            Internally, the partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health on the current partition.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.StatefulServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health on the current partition.
            Specifies send options that control how the report is sent to the health store.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the partition report is sent.</para>
            </param>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            Internally, the partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.StatelessServiceInitializationParameters">
            <summary>
            <para>Defines service initialization parameters for a stateless service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.StatelessServiceInitializationParameters.InstanceId">
            <summary>
            <para>Specifies the unique identifier for the stateless service instance.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.StatelessServicePartition">
            <summary>
            In Service Fabric we have stateless as well as stateful services which are partitioned. Stateless Services are partitioned for sticky routing.
            In programming model we need to decide if we want to expose StatelessPartition as a concept to end users
            </summary>
        </member>
        <member name="M:System.Fabric.StatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health on the current stateless service instance.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.StatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.StatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health on the current stateless service instance.
            Specifies send options that control how the report is sent to the health store.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the report is sent.</para>
            </param>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            Internally, the partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.StatelessServicePartition.ReportCompletion">
            <summary>
            Reports completion of the current stateless service instance of the partition. As part of the completion, service instance will be closed and no replacement 
            for this service instance will be created in the Service Fabric cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.StatelessServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health on the current partition.
            </summary>
            <param name="healthInfo">The <see cref="T:System.Fabric.Health.HealthInformation"/> that describes the health report information.</param>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            The partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately by using
            <see cref="M:System.Fabric.StatelessServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)"/>.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.StatelessServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation,System.Fabric.Health.HealthReportSendOptions)">
            <summary>
            Reports health on the current partition.
            Specifies send options that control how the report is sent to the health store.
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <param name="sendOptions">
            <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions"/> that controls how the partition report is sent.</para>
            </param>
            <remarks>
            <para>The health information describes the report details, like the source ID, the property, the health state
            and other relevant details.
            Internally, the partition uses an internal health client to send the reports to the health store.
            The client optimizes messages to Health Manager by batching reports per a configured duration (Default: 30 seconds).
            If the report has high priority, you can specify send options to send it immediately.
            </para>
            <para>Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-report-health">health reporting</see>.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.CompletionMode">
            <summary>
            This is an enum used to indicate when the API should complete. 
            </summary>
            <remarks>
            The values indicate whether the API should complete when the request for the operation is done or when the requested operation has completed. 
            For example,  a request to restart a node  could complete as soon the request is accepted or when the API can verify that the node has restarted. 
            The actual verification depends upon the API being used.
            </remarks>
        </member>
        <member name="F:System.Fabric.CompletionMode.Invalid">
            <summary>
            Completion mode does not have a valid value.
            </summary>
        </member>
        <member name="F:System.Fabric.CompletionMode.DoNotVerify">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.CompletionMode.Verify">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.DataLossMode">
            <summary>
            This enum is passed to the DataLoss testability API to indicate what type of data loss to induce.
            </summary>
        </member>
        <member name="F:System.Fabric.DataLossMode.Invalid">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:System.Fabric.DataLossMode.PartialDataLoss">
            <summary>
            PartialDataLoss option will cause a quorum of replicas to go down, triggering an OnDataLoss event in the system for the given partition. 
            </summary>
            <remarks>
            Whether actual data loss happens depends on whether there were committed transactions that were still being replicated at the time the data loss was induced
            </remarks>
        </member>
        <member name="F:System.Fabric.DataLossMode.FullDataLoss">
            <summary>
            FullDataLoss option will drop all the replicas which means that all the data will be lost. 
            </summary>
            <remarks>
            This option is very useful to test out backup and recovery data paths.
            </remarks>
        </member>
        <member name="T:System.Fabric.OutOfDiskSpaceException">
            <summary>
            <para>Exception that indicates the written disk has run out of space.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.OutOfDiskSpaceException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OutOfDiskSpaceException" /> class with appropriate message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for this exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OutOfDiskSpaceException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OutOfDiskSpaceException" /> class with appropriate message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for this exception.</para>
            </param>
            <param name="inner">
            <para>The Inner Exception that provides detailed information.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OutOfDiskSpaceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OutOfDiskSpaceException" /> class from serialized state.</para>
            </summary>
            <param name="info">
            <para>Contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>Contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="T:System.Fabric.QuorumLossMode">
            <summary>
            Type of QuorumLoss that will be invoked.
            </summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.Invalid">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.QuorumReplicas">
            <summary>Partial Quorum loss mode : Minimum number of replicas for a partition will be down that will cause a quorum loss.</summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.AllReplicas">
            <summary>Full Quorum loss mode : All replicas for a partition will be down that will cause a quorum loss. </summary>
        </member>
        <member name="T:System.Fabric.PartitionSelector">
            <summary>
            This is a helper class for selecting partitions. 
            </summary>
            <remarks>
            It allows the user to select partitions to be targeted by the testability APIs. The selection can be a particular partition of a service based on the 
            Id or Key or a random partition of a service.
            </remarks>
        </member>
        <member name="M:System.Fabric.PartitionSelector.RandomOf(System.Uri)">
            <summary>
            Selects a random partition for given service.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.SingletonOf(System.Uri)">
            <summary>
            Selects the singleton partition for a service.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionKeyOf(System.Uri,System.String)">
            <summary>
            Selects a partition for the service with the specified PartitionName.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionName">Name of the partition that needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionKeyOf(System.Uri,System.Int64)">
            <summary>
            Selects a partition for the service to which the specified partition key belongs.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionKey">The partition key which belongs to the partition to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionIdOf(System.Uri,System.Guid)">
            <summary>
            Selects a partition for the service given the PartitionId.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionId">The PartitionId for the partition.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.Equals(System.Object)">
            <summary>
            Compares whether two PartitionSelectors are the same.
            </summary>
            <param name="obj">PartitionSelector to compare t.o</param>
            <returns>true if same false if not.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.GetHashCode">
            <summary>
            Calls the base GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.ToString">
            <summary>
            String representation of the partition selector.
            </summary>
            <returns>A string representation of the selector.</returns>
        </member>
        <member name="T:System.Fabric.ReplicaSelector">
            <summary>
            This is a helper class for selecting replicas. 
            </summary>
            <remarks>
            It allows the user to select replicas to be targeted by the testability APIs. 
            The selection can be a particular replica of a partition based on the ReplicaId or Role or a random replica of the partition.
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicaSelector.PartitionSelector">
            <summary>
            The PartitionSelector specifying the partition for which the replica is being selected by the ReplicaSelector.
            </summary>
            <value>The PartitionSelector object.</value>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.RandomOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects a random replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.PrimaryOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects the primary replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.RandomSecondaryOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects a random secondary replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.ReplicaIdOf(System.Fabric.PartitionSelector,System.Int64)">
            <summary>
            Selects a replica based on the ReplicaId for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <param name="replicaOrInstanceId">ReplicaOrInstanceId for the replica or instance to be selected.</param>
            <returns>A <see cref="T:System.Fabric.ReplicaSelector"/> based on the input passed in. </returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.Equals(System.Object)">
            <summary>
            Compares whether two ReplicaSelectors are the same.
            </summary>
            <param name="obj">ReplicaSelector to compare to.</param>
            <returns>true if same false if not.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.GetHashCode">
            <summary>
            Calls the base GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.ToString">
            <summary>
            String representation of the replica selector.
            </summary>
            <returns>A string representation of the selector.</returns>
        </member>
        <member name="T:System.Fabric.RestartPartitionMode">
            <summary>
            The enum passed into the RestartPartition API to specify what replicas need to be restarted
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.Invalid">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.AllReplicasOrInstances">
            <summary>
            All replicas or instances in the partition are restarted at once
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.OnlyActiveSecondaries">
            <summary>
            Only the secondary replicas are restarted. This option can only be used for stateful services and avoids data loss
            </summary>
        </member>
        <member name="T:System.Fabric.SelectedPartition">
            <summary>
            Returns selected partition using PartitionSelector FaultManagementClient APIs. 
            </summary>
            <remarks> 
            This class returns information about the partition that was selected using PartitionSelector testability API.
            For example if the PartitionSelector was created using the RandomOf overload this class will populate 
            service name and partition id of the for selected partition
            </remarks>
        </member>
        <member name="F:System.Fabric.SelectedPartition.None">
            <summary>
            Returns none partition selector.
            </summary>
            <remarks>
            A SelectedPartition will be none for any testability API with overloads which does not take a partition
            or replica selector as an input. For example if RestartNodeAsync is called with the NodeName overload
            instead of ReplicaSelector then PartitionSelector returned will be None
            </remarks>
        </member>
        <member name="M:System.Fabric.SelectedPartition.#ctor(System.Uri,System.Guid)">
            <summary>
            Selected partition constructor
            </summary>
            <param name="serviceName">Service name URI</param>
            <param name="partitionId">Partition id</param>
        </member>
        <member name="P:System.Fabric.SelectedPartition.ServiceName">
            <summary>
            Gets the service name as URI
            </summary>
            <value>
            A URI
            </value>
        </member>
        <member name="P:System.Fabric.SelectedPartition.PartitionId">
            <summary>
            Gets the partition ID as GUID
            </summary>
            <value>
            A GUID
            </value>
        </member>
        <member name="M:System.Fabric.SelectedPartition.Equals(System.Fabric.SelectedPartition)">
            <summary>
            Compares this SelectedPartition with other SelectedPartition.
            </summary>
            <param name="other">A selected partition with which the current SelectedPartition is to be compared.</param>
            <returns>True, if both service name and partition ID of the two SelectedPartition objects match; else returns false.</returns>
        </member>
        <member name="M:System.Fabric.SelectedPartition.ToString">
            <summary>
            Gets a string representation of the SelectedPartition object
            </summary>
            <returns>A string with the format: Service Name: &lt;service-name&gt;, Partition Id: &lt;partition-id&gt;</returns>
        </member>
        <member name="T:System.Fabric.SelectedReplica">
            <summary>
            Returns selected replica object using ReplicaSelector testability API.
            </summary>
            <remarks> 
            This class returns information about the selected replica selected using replica selector testability API. 
            If the ReplicaSelector was generated using the RandomOf overload this class will be populated with 
            ReplicaOrInstance ID and PartitionSelector for the selected replica
            </remarks>
        </member>
        <member name="F:System.Fabric.SelectedReplica.None">
            <summary>
            Returns None replica selector. 
            </summary>
            <remarks>
            A SelectedReplica will be none for any testability API with overloads which does not take a replica instance id and partition
            selector as an input. For example if RestartNodeAsync is called with the NodeName overload
            instead of ReplicaSelector. Returned ReplicaSelector will be None in that case.
            </remarks>
        </member>
        <member name="M:System.Fabric.SelectedReplica.#ctor(System.Int64,System.Fabric.SelectedPartition)">
            <summary>
            Selected replica constructor 
            </summary>
            <param name="replicaOrInstanceId">Replica or instance id</param>
            <param name="partitionSelectorResult">Partition selector result</param>
        </member>
        <member name="P:System.Fabric.SelectedReplica.ReplicaOrInstanceId">
            <summary>
            Gets replica or instance ID
            </summary>
            <value>
            <para>Returns the replica or instance ID for this SelectedReplica</para>
            </value>
        </member>
        <member name="P:System.Fabric.SelectedReplica.SelectedPartition">
            <summary>
            Gets selected partition 
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.SelectedReplica"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.SelectedReplica.Equals(System.Fabric.SelectedReplica)">
            <summary>
            Compares this SelectedReplica with other SelectedReplica.
            </summary>
            <param name="other">A selected replica with which the current SelectedReplica is to be compared.</param>
            <returns>True, if both replicaOrInstanceId and SelectedPartition, of the two SelectedReplica objects match; else returns false.</returns>
        </member>
        <member name="M:System.Fabric.SelectedReplica.ToString">
            <summary>
            Returns a string representation of SelectedReplica object
            </summary>
            <returns>A string with the format: ReplicaOrInstanceId = &lt;replicaOrInstanceId&gt;, SelectedPartition = &lt;selectedPartition&gt;</returns>
        </member>
        <member name="T:System.Fabric.TokenServiceMetadata">
            <summary>
            <para>
            For internal use only.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.TokenServiceMetadata.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>
            For internal use only.
            </para>
            </summary>
            <param name="metadata">
            <para>The metadata.</para>
            </param>
            <param name="serviceName">
            <para>The service name.</para>
            </param>
            <param name="serviceDnsName">
            <para>The service Dns name.</para>
            </param>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceName">
            <summary>
            <para>
            For internal use only.
            Gets or sets the service name.
            </para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceDnsName">
            <summary>
            <para>
            For internal use only.
            Gets or sets the service Dns name.
            </para>
            </summary>
            <value>
            <para>The service Dns name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.Metadata">
            <summary>
            <para>
            For internal use only.
            Gets or sets the metadata.
            </para>
            </summary>
            <value>
            <para>The metadata.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Transaction">
            <summary>
            <para>Represents a transaction. <see cref="T:System.Fabric.KeyValueStoreReplica"/></para>
            </summary>
        </member>
        <member name="M:System.Fabric.Transaction.Rollback">
            <summary>
            <para>Rolls back the set of operations that are associated with this transaction.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Transaction.CommitAsync">
            <summary>
            <para>Commits the set of operations associated with the transaction. Replication and local disk writes are performed asynchronously</para>
            </summary>
            <returns>
            <para>
            A Task whose result is the Logical Sequence Number of the transaction. 
            The sequence number is associated with all keys written in this transaction 
            and can be passed into APIs accepting a check sequence number parameter to implement optimistic concurrency:
            <list type="bullet">
            <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
            <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
            <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
            <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Transaction.CommitAsync(System.TimeSpan)">
             <summary>
             <para>Commits the set of operations that are associated with the transaction with an optional timeout. Replication and local disk 
             writes are performed asynchronously. Note that the underlying replication operation may not have been cancelled even in the event of a timeout.</para>
             </summary>
             <param name="timeout">
             <para>The amount of time to wait for replication and local disk writes to complete before <see cref="T:System.TimeoutException" /> is thrown.</para>
             </param>
             <returns>
             <para>
             A Task whose result is the Logical Sequence Number of the transaction. 
             The sequence number is associated with all keys written in this transaction 
             and can be passed into APIs accepting a check sequence number parameter to implement optimistic concurrency:
            
             <list type="bullet">
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
             </list>
             </para>
             </returns>
        </member>
        <member name="M:System.Fabric.Transaction.CommitAsync(System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
             <para>Commits the set of operations that are associated with the transaction with an optional timeout. Replication and local disk 
             writes are performed asynchronously. Note that the underlying replication operation may not have been cancelled even in the event of a timeout.</para>
             </summary>
             <param name="timeout">
             <para>The amount of time to wait for replication and local disk writes to complete before <see cref="T:System.TimeoutException" /> is thrown.</para>
             </param>
             <param name="cancellationToken">
             <para>Currently not used. Reserved for future use.</para>
             </param>
             <returns>
             <para>
             A Task whose result is the Logical Sequence Number of the transaction. 
             The sequence number is associated with all keys written in this transaction 
             and can be passed into APIs accepting a check sequence number parameter to implement optimistic concurrency:
            
             <list type="bullet">
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item>
             <item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item>
             </list>
             </para>
             </returns>
        </member>
        <member name="M:System.Fabric.Transaction.OnDispose">
            <summary>
            <para>The dispose event occurs when the transaction is disposed of through the <languageKeyword>Dispose</languageKeyword> method. </para>
            </summary>
            <remarks>
            <para>To override <see cref="M:System.Fabric.Transaction.OnDispose" />, be sure to call <languageKeyword>OnDispose</languageKeyword> on the base class.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Transaction.ThrowIfDisposed">
            <summary>
            <para>Throws an exception if the <see cref="T:System.Fabric.Transaction" /> object is disposed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.TransactionBase">
            <summary>
            <para>Provides an abstract base class for a transaction.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.TransactionBase.Finalize">
            <summary>
            <para>Enables an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.TransactionBase.Id">
            <summary>
            <para>Gets the ID of the transaction as a <see cref="T:System.Guid" />.</para>
            </summary>
            <value>
            <para>The transaction ID as a <see cref="T:System.Guid" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.TransactionBase.IsolationLevel">
            <summary>
            <para>Gets the isolation level of the transaction as a <see cref="T:System.Fabric.TransactionIsolationLevel" />.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.TransactionIsolationLevel" /> object that represents the isolation level of the transaction.</para>
            </value>
            <remarks>
            <para>The isolation level of a transaction determines what level of access to volatile data other transactions have before a transaction finishes. 
            For more information about isolation levels, see the documentation for the <see cref="T:System.Fabric.TransactionIsolationLevel" /> enumeration.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.TransactionBase.Dispose">
            <summary>
            <para>Performs application-defined tasks that are associated with freeing, releasing, or resetting unmanaged resources.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.TransactionBase.OnDispose">
            <summary>
            <para>The dispose event occurs when the transaction is disposed of through the <languageKeyword>OnDispose</languageKeyword> method.</para>
            </summary>
            <remarks>
            <para>When overriding <see cref="M:System.Fabric.Transaction.OnDispose" />, be sure to call the <languageKeyword>OnDispose</languageKeyword> 
            method on the base class.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.TransactionBase.IsDisposed">
            <summary>
            <para>Gets a value that indicates whether the object has been disposed.</para>
            </summary>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the object has been disposed; otherwise, returns <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.TransactionIsolationLevel">
            <summary>
            <para>Enumerates the set of possible isolation levels for a <see cref="T:System.Fabric.Transaction" />.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.Default">
            <summary>
            <para>Indicates the default isolation level of the store.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.ReadUncommitted">
            <summary>
            <para>
            Indicates that volatile data can be read during the transaction. 
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.ReadCommitted">
            <summary>
            <para>Indicates that volatile data cannot be read during the transaction, but can be modified. Shared locks are held while data is being 
            read to avoid dirty reads, but data can be changed before the end of the transaction that results in non-repeatable reads or phantom data.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.RepeatableRead">
            <summary>
            <para>Indicates that volatile data can be read but not modified during the transaction. Locks are placed on all data that is used in a 
            query to prevent other users from updating data. New rows can be inserted into data sets and are included in later reads in the current transaction.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.Snapshot">
            <summary>
            <para>Indicates the snapshot level where volatile data can be read. Any data that is read will be a transaction-consistent version of the 
            data that existed at start of the transaction.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.Serializable">
            <summary>
            <para>Indicates that volatile data are serializable. Volatile data can be read but not modified, and no new data can be added during the 
            transaction. Indicates that range locks will be put on data sets. The locks prevent updates or inserts in data sets until the transaction finishes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeDomainState">
            <summary>
            <para>Enumerates the states of an upgrade domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.Invalid">
            <summary>
            <para>Indicates that this upgrade is not valid. All Service Fabric enumerations have the invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.Pending">
            <summary>
            <para>Indicates that the upgrade is pending and has not started.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.InProgress">
            <summary>
            <para>Indicates that the upgrade is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.Completed">
            <summary>
            <para>Indicates that the upgrade is completed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeDomainStatus">
            <summary>
            <para>Represents the status of an upgrade domain.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.UpgradeDomainStatus.Name">
            <summary>
            <para>Specifies the name of the upgrade domain. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.UpgradeDomainStatus.State">
            <summary>
            <para>Specifies the state of the upgrade domain.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeDomainState" />.</para>
            </value>
        </member>
        <member name="M:System.Fabric.UpgradeDomainStatus.ToString">
            <summary>
            <para>
            Produces a string representation of the upgrade domain status.
            </para>
            </summary>
            <returns>
            <para>String representing the upgrade domain status.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.UpgradeFailureAction">
            <summary>
            <para>Enumerates the actions for Service Fabric to take if the upgrade fails.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureAction.Invalid">
            <summary>
            <para>Indicates that this upgrade is not valid. All Service Fabric enumerations have the invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureAction.Rollback">
            <summary>
            <para>Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureAction.Manual">
            <summary>
            <para>Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will 
            not proceed to the next upgrade domain automatically.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.CodePackage">
            <summary>
            <para>Represents the code package definition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackage.Description">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.CodePackageDescription" /> 
            for the <see cref="T:System.Fabric.CodePackage" />.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.CodePackageDescription" /> for the <see cref="T:System.Fabric.CodePackage" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackage.Path">
            <summary>
            <para>Gets the path to the <see cref="T:System.Fabric.CodePackage" />.</para>
            </summary>
            <value>
            <para>The path to the <see cref="T:System.Fabric.CodePackage" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackage.SetupEntryPointRunAsPolicy">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.RunAsPolicyDescription" /> object 
            associated with Setup EntryPoint in <see cref="T:System.Fabric.CodePackage" />.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.RunAsPolicyDescription" /> object 
            associated with Setup EntryPoint in <see cref="T:System.Fabric.CodePackage" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackage.EntryPointRunAsPolicy">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.RunAsPolicyDescription" /> 
            associated with Main EntryPoint in the <see cref="T:System.Fabric.CodePackage" />.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.RunAsPolicyDescription" /> 
            associated with Main EntryPoint in the <see cref="T:System.Fabric.CodePackage" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ConfigurationPackage">
            <summary>
            <para>Represents a configuration package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ConfigurationPackage.Description">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.ConfigurationPackageDescription" /> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage" />.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.ConfigurationPackageDescription" /> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ConfigurationPackage.Path">
            <summary>
            <para>Gets the local path for the <see cref="T:System.Fabric.ConfigurationPackage" />.</para>
            </summary>
            <value>
            <para>The local path for the <see cref="T:System.Fabric.ConfigurationPackage" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ConfigurationPackage.Settings">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.ConfigurationSettings" /> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage" />.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.ConfigurationSettings" /> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CopyFlag">
            <summary>
            Copy flags
            </summary>
        </member>
        <member name="F:System.Fabric.CopyFlag.CopyIfDifferent">
            <summary>
            Copy if the folder is different.
            </summary>
        </member>
        <member name="F:System.Fabric.CopyFlag.AtomicCopy">
            <summary>
            mirror(atomic) copy.
            </summary>
        </member>
        <member name="F:System.Fabric.CopyFlag.AtomicCopySkipIfExists">
            <summary>
            mirror(atomic) copy but skip if destination already exists.
            </summary>
        </member>
        <member name="T:System.Fabric.DataPackage">
            <summary>
            <para>This class represents a data package in the application. A data package consists of static data (that can be upgraded) that is consumed by the application. For more information see https://docs.microsoft.com/azure/service-fabric/service-fabric-application-model</para>
            </summary>
        </member>
        <member name="P:System.Fabric.DataPackage.Description">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.PackageDescription" /> object 
            associated with the <see cref="T:System.Fabric.DataPackage" />. The package description can be used to access additional information about this package such as the name, version etc. </para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.PackageDescription" /> object 
            associated with the <see cref="T:System.Fabric.DataPackage" />.</para>
            </value>
        </member>
        <member name="P:System.Fabric.DataPackage.Path">
            <summary>
            <para>Gets the local path of <see cref="T:System.Fabric.DataPackage" />. This path contains the contents of the data package.</para>
            </summary>
            <value>
            <para>The local path of <see cref="T:System.Fabric.DataPackage" />.</para>
            </value>
        </member>
        <member name="T:System.Fabric.UpgradeDomainProgress">
            <summary>
            <para>Represents the upgrade progress details of nodes in the upgrade domain.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.UpgradeDomainProgress.UpgradeDomainName">
            <summary>
            <para>Gets or sets the name of the upgrade domain going through upgrade.</para>
            </summary>
            <value>
            <para>The name of the upgrade domain going through upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.UpgradeDomainProgress.NodeProgressList">
            <summary>
            <para>Gets the list of <see cref="T:System.Fabric.NodeUpgradeProgress" /> that indicate upgrade progress details of nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.NodeUpgradeProgress" /> that indicate upgrade progress details of nodes in the current upgrade domain.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NodeUpgradeProgress">
            <summary>
            <para>Provides the outlines for the upgrade progress details of a node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NodeUpgradeProgress.NodeName">
            <summary>
            <para>Gets the name of the node having upgrade progress details.</para>
            </summary>
            <value>
            <para>The name of the node having upgrade progress details.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeUpgradeProgress.UpgradePhase">
            <summary>
            <para>Gets the upgrade phase of the node.</para>
            </summary>
            <value>
            <para>The upgrade phase of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeUpgradeProgress.PendingSafetyChecks">
            <summary>
            <para>Gets the list of safety checks that Service Fabric is currently performing on the corresponding node.</para>
            </summary>
            <value>
            <para>The list of safety checks that is Service Fabric currently performing on the corresponding node.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PartitionUpgradeSafetyCheck">
            <summary>
            <para>Represents the <see cref="T:System.Fabric.UpgradeSafetyCheck" /> for a partition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.PartitionUpgradeSafetyCheck.PartitionId">
            <summary>
            <para>Gets the ID of a partition that is undergoing a upgrade safety check.</para>
            </summary>
            <value>
            <para>The ID of a partition that is undergoing a upgrade safety check.</para>
            </value>
        </member>
        <member name="T:System.Fabric.UpgradeSafetyCheck">
            <summary>
            <para>Represents the safety check that is currently being performed for a node during upgrade.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.UpgradeSafetyCheck.#ctor(System.Fabric.UpgradeSafetyCheckKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.UpgradeSafetyCheck" /> class.</para>
            </summary>
            <param name="kind">
            <para>The kind of the safety check.</para>
            </param>
        </member>
        <member name="P:System.Fabric.UpgradeSafetyCheck.Kind">
            <summary>
            <para>Gets the type of the safety check that is being performed.</para>
            </summary>
            <value>
            <para>The type of the safety check that is being performed.</para>
            </value>
        </member>
        <member name="T:System.Fabric.UpgradeSafetyCheckKind">
            <summary>
            <para>Enumerates the <see cref="T:System.Fabric.UpgradeSafetyCheck" /> that is being performed for a node during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.Invalid">
            <summary>
            <para>Indicates that the upgrade safety check kind is invalid. This value is not used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.EnsureSeedNodeQuorum">
            <summary>
            <para>Indicates that if we bring down the node then this will result in global seed node quorum loss.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.EnsurePartitionQuorum">
            <summary>
            <para>Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForPrimaryPlacement">
            <summary>
            <para>Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary 
            to be moved back to this node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForPrimarySwap">
            <summary>
            <para>Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForReconfiguration">
            <summary>
            <para>Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to 
            be complete before staring upgrade on that node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForInbuildReplica">
            <summary>
            <para>Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying 
            data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.EnsureAvailability">
            <summary>
            <para>Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the 
            node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForResourceAvailability">
            <summary>
            <para>Indicates that there is still not enough capacity for resource governed metrics to proceed with the upgrade. This can happen in case a service 
            package is increasing resource consumption. Service Fabric is making actions to ensure that the node has enough capacity. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeUpgradePhase">
            <summary>
            <para>Describes the upgrade phase of the corresponding node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.Invalid">
            <summary>
            <para>Indicates that the node upgrade phase is invalid. This value is not used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.PreUpgradeSafetyCheck">
            <summary>
            <para>Indicates that upgrade has not started on the node and Service Fabric is performing pre-upgrade safety checks.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.Upgrading">
            <summary>
            <para>Indicates that the node is in the process of getting upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.PostUpgradeSafetyCheck">
            <summary>
            <para>Indicates that upgrade is complete on the node and Service Fabric is performing post-upgrade safety checks.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.SeedNodeUpgradeSafetyCheck">
            <summary>
            <para>The safety check that is currently being performed for seed node.during upgrade </para>
            </summary>
        </member>
        <member name="T:System.Fabric.UnknownUpgradeSafetyCheck">
            <summary>
            <para>The upgrade safety check kind is unknown. This is most likely because the client is running an older version.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.StoreBackupOption">
            <summary>
            <para>
            The backup option for the key-value store.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Full">
            <summary>
            <para>
            A full backup of the key-value store.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Incremental">
            <summary>
            <para>
            Incremental backup of the key-value store. i.e. only the log files created since the last 
            full or incremental backup will be backed up.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.TruncateLogsOnly">
            <summary>
            <para>
            Option to truncate the transaction logs of the key-value store without creating any backup files.        
            </para>
            </summary>
            <remarks>
            This is useful in avoiding creation of backup files in secondary replicas when incremental backup is turned on.
            If incremental backup is turned on, then disk space fills up with transaction logs of the key-value store.
            To prevent this, frequent backups have to be created. However, creating backups on secondary replicas may not
            be useful for some key-value store services. These services also have to deal with discarding the backup
            directory. If this option is used, it cleans up the transaction logs without creating backup files.
            </remarks>
        </member>
        <member name="T:System.Fabric.StoreBackupInfo">
            <summary>
            <para>Provides information about the backup created by calling <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupFolder">
            <summary>
            <para>Gets the folder where the backup was created.</para>
            </summary>
            <value>
            <para>The backup folder</para>
            </value>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupOption">
            <summary>
            <para>Gets the backup option used</para>
            </summary>
            <value>
            <para>The backup option used</para>
            </value>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupChainId">
            <summary>
            <para>
            Gets the ID of backup-chain to which this backup belongs. A backup chain contains
            one full backup and zero or more continuous incremental backup(s) and starts at full backup. 
            </para>
            </summary>
            <value>
            <para>The ID of backup chain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupIndex">
            <summary>
            <para>
            Gets the index of this backup in the backup-chain to which this backup belongs.
            A backup chain contains one full backup and zero or more continuous incremental backup(s).
            and starts at full backup. Since full backup starts the chain, its backup index is always zero.
            </para>
            </summary>
            <value>
            <para>The backup index of current backup.</para>
            </value>
        </member>
        <member name="M:System.Fabric.StoreBackupInfo.ToString">
            <summary>
            <para>Returns a <see cref="T:System.String" /> that represents this instance</para>
            </summary>
            <returns>
            <para>A <see cref="T:System.String" /> that represents this instance</para>
            </returns>
        </member>
        <member name="T:System.Fabric.SafetyCheckKind">
            <summary>
            <para>
            A Service Fabric enumeration that indicates the upgrade safety check performed.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.Invalid">
            <summary>
            <para>
            Indicates that the upgrade safety check kind is invalid. This value is not used.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureSeedNodeQuorum">
            <summary>
            <para>
            Indicates that if we bring down the node then this will result in global seed node quorum loss.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsurePartitionQuorum">
            <summary>
            <para>
            Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement">
            <summary>
            <para>
            Indicates that there is some replica on the node that was moved out of this node. Service Fabric is now waiting for the primary to be moved back to this node.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimarySwap">
            <summary>
            <para>
            Indicates that Service Fabric is waiting for a primary replica to be moved out of the node.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForReconfiguration">
            <summary>
            <para>
            Indicates that there is some replica on the node that is involved in a reconfiguration and Service Fabric is waiting for the reconfiguration to be complete.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForInBuildReplica">
            <summary>
            <para>
            Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some 
            other replica. In both cases, bringing down the replica on the node will abort the copy.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureAvailability">
            <summary>
            <para>
            Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for 
            which the partition is quorum loss. In both cases, bringing down the replica will result in loss of availability.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.SafetyCheck">
            <summary>
            <para>
            Represents a safety check that is currently being performed for a node.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.SafetyCheck.#ctor(System.Fabric.SafetyCheckKind)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.SafetyCheck" /> object with the specified kind. 
            Can only be invoked from derived classes.
            </para>
            </summary>
            <param name="kind">
            <para>The safety check kind.</para>
            </param>
        </member>
        <member name="P:System.Fabric.SafetyCheck.Kind">
            <summary>
            <para>
            Gets the type of the safety check that is being performed.
            </para>
            </summary>
            <value>
            <para>The type of safety check that is being performed.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PartitionSafetyCheck">
            <summary>
            <para>
            Represents the SafetyCheck for a partition.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.PartitionSafetyCheck.PartitionId">
            <summary>
            <para>
            Gets the ID of the partition that is undergoing a safety check.
            </para>
            </summary>
            <value>
            <para>The ID of the partition that is undergoing a safety check.</para>
            </value>
        </member>
        <member name="T:System.Fabric.SeedNodeSafetyCheck">
            <summary>
            <para>
            The safety check that is currently being performed for seed nodes.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.UnknownSafetyCheck">
            <summary>
            <para>
            The safety check that is not known to the current version of Service Fabric.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.XMLHelper.WriteClusterManifest(System.String,System.Fabric.Management.ServiceModel.ClusterManifestType)">
            <summary>
            Writes the cluster Manifest
            </summary>
            <param name="path">Path of the cluster manifest.</param>
            <param name="value">ClusterManifest Type.</param>
        </member>
        <member name="T:System.Fabric.SecretStore.Secret">
            <summary>
            Represent a secret type.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.Secret.Name">
            <summary>
            The fully qualfied name of the secret.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.Secret.Value">
            <summary>
            The value of the secret.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.Secret.Version">
            <summary>
            The version of the secret.
            </summary>
        </member>
        <member name="T:System.Fabric.SecretStore.SecretReference">
            <summary>
            Represent a reference to a secret type.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretReference.Name">
            <summary>
            The full qualified name of the secret referenced.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretReference.Version">
            <summary>
            The version of the secret referenced.
            </summary>
        </member>
        <member name="T:System.Fabric.SecretStore.SecretDescription">
            <summary>
            Represent a secret.
            </summary>
        </member>
        <member name="M:System.Fabric.SecretStore.SecretDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.SecretStore.SecretDescription" /> class.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretDescription.Name">
            <summary>
            The name of the secret.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretDescription.Properties">
            <summary>
            The properties of the secret.
            </summary>
        </member>
        <member name="T:System.Fabric.SecretStore.SecretProperties">
            <summary>
            Represents the properties of the secret.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretProperties.Kind">
            <summary>
            The kind of the secret.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretProperties.ContentType">
            <summary>
            The content type of the secret.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretProperties.Description">
            <summary>
            The description of the secret.
            </summary>
        </member>
        <member name="T:System.Fabric.SecretStore.SecretValueDescription">
            <summary>
            Represent a secret value.
            </summary>
        </member>
        <member name="M:System.Fabric.SecretStore.SecretValueDescription.#ctor">
            <summary>
            /// Initializes a new instance of the <see cref="T:System.Fabric.SecretStore.SecretValueDescription" /> class.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretValueDescription.Name">
            <summary>
            The name of the secret value.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretValueDescription.Properties">
            <summary>
            The properties for the secret value
            </summary>
        </member>
        <member name="T:System.Fabric.SecretStore.SecretValueProperties">
            <summary>
            The properties of the secret value.
            </summary>
        </member>
        <member name="P:System.Fabric.SecretStore.SecretValueProperties.Value">
            <summary>
            The value of the secret.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Data.Interfaces</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1">
            <summary>
            <para>
            Represents a reliable collection of persisted, replicated values with best-effort first-in first-out ordering.
            </para>
            </summary>
            
            <typeparam name="T">
            The type of the values contained in the reliable queue slim.
            </typeparam>
            
            <remarks>
            <para>
            Intended as an alternative to <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1"/> for workloads where strict ordering is not required, as by relaxing
            the ordering constraint, concurrency can be greatly improved.  <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1"/> restricts concurrent consumers
            and producers to a maximum of one each, while <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/> imposes no such restriction.
            </para>
            <para>
            <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/> does not offer the same transaction isolation semantics as the other reliable data structures.  See the 
            individual operations and properties (<see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/>, <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> and <see cref="P:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.Count"/>) for details on what isolation, 
            if any, they provide.
            </para>
            <para>
            It is expected that values will be relatively short-lived in the queue; in other words, that the egress (<see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/>) rate is 
            equal to or greater than the ingress (<see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/>) rate.  Violating this expectation 
            may worsen system performance.  A planned queue capacity constraint which will throttle incoming Enqueues once the capacity is reached
            will help in maintaining this property.
            property.
            </para>
            <para>
            As the ordering of elements is not strictly guaranteed, assumptions about the ordering of any two values in the queue MUST NOT
            be made.  The best-effort first-in first-out ordering is provided for fairness; the time that an value spends in the queue should
            be related to the failure rate (failures may alter the queue's ordering) and the dequeue rate, but not the enqueue rate.
            </para>
            <para>
            <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/> does not offer a Peek operation, however by combining <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> and <see cref="M:Microsoft.ServiceFabric.Data.ITransaction.Abort"/>
            the same semantic can be achieved.  See <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> for additional details and an example.
            </para>
            <para>
            Values stored in this queue MUST NOT be mutated outside the context of an operation on the queue. It is
            highly recommended to make <typeparamref name="T"/> immutable in order to avoid accidental data corruption.
            </para>
            <para>
            Transaction is the unit of concurrency: Users can have multiple transactions in-flight at any given point of time but for a given transaction each API must be called one at a time.
            So all Reliable Collection APIs that take in a transaction and return a Task, must be awaited one at a time.
            <seealso cref="T:Microsoft.ServiceFabric.Data.ITransaction"/>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})">
             <summary>
             <para>
             Stage the enqueue of a value into the queue.
             </para>
             </summary>
             
             <param name="tx">Transaction to associate this operation with.</param>
             <param name="value">The value to add to the end of the queue. The value can be null for reference types.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
             <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. The default is null.  If null is passed, a default timeout will be used.</param>
             
             <returns>Task that represents the asynchronous enqueue operation.</returns>
             
             <remarks>
             A <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> operation cannot return any value for which its <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> has not yet been committed.
             This includes the transaction in which the value was enqueued; as a consequence, <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/> does not support Read-Your-Writes.
             </remarks>
             
             <exception cref="T:System.Fabric.FabricNotPrimaryException">The replica is no longer in <cref name="ReplicaRole.Primary"/>.</exception>
             <exception cref="T:System.Fabric.FabricNotReadableException">The replica is currently not readable.</exception>
             <exception cref="T:System.Fabric.FabricObjectClosedException">The <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/> was closed by the runtime.</exception>
             <exception cref="T:System.Fabric.FabricTransientException">The replica saw a transient failure. Retry the operation on a new transaction</exception>
             <exception cref="T:System.Fabric.FabricException">The replica saw a non retriable failure other than the types defined above. Cleanup and rethrow the exception</exception>
             <exception cref="T:System.TimeoutException">
             The operation was unable to be completed within the given timeout.  The transaction should be aborted and
             a new transaction should be created to retry.
             </exception>
             <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
             <exception cref="T:System.OperationCanceledException">The operation was canceled via <paramref name="cancellationToken"/>.</exception>
             <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown when a method call is invalid for the object's current state.
             Example, transaction used is already terminated: committed or aborted by the user.
             If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
             </exception>
             
             <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> to enqueue a value with retry.
             <code>
             <![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (TransactionFaultedException e)
                     {
                         // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                         // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                         Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
                     catch (FabricTransientException e)
                     {
                         // Retry until the queue is writable or a different exception is thrown.
                         Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})">
            <summary>
            <para>
            Tentatively dequeue a value from the queue. If the queue is empty, the dequeue operation will wait for an item to become available.
            </para>
            </summary>
            
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="timeout">The amount of time to wait for the operation to complete. The default is null.  If null is passed, a default timeout will be used.</param>
            
            <returns>
            A task that represents the asynchronous dequeue operation. The task's result is a ConditionalValue of type T.
            If a value was dequeued within the given time, return a ConditionalValue with HasValue as false, else it returns a ConditionalValue with HasValue as true and the Value as the dequeued item of Type T
            </returns>
            
            <remarks>
            <para>
            While <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> can only return values for which the corresponding <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> was committed, <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> operations are not isolated
            from one another.  Once a transaction has dequeued a value, other transactions cannot dequeue it, but are not blocked from dequeuing other values.
            </para>
            <para>
            When a transaction or transactions including one or more <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> operations aborts, the dequeued values will be added back at
            the head of the queue in an arbitrary order.  This will ensure that these values will be dequeued again soon, improving the fairness of the
            data structure, but without enforcing strict ordering (which would require reducing the allowed concurrency, as in <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1"/>).
            </para>
            </remarks>
            
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The replica is no longer in <cref name="ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">The replica is currently not readable.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">The <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/> was closed by the runtime.</exception>
            <exception cref="T:System.Fabric.FabricTransientException">The replica saw a transient failure. Retry the operation on a new transaction</exception>
            <exception cref="T:System.Fabric.FabricException">The replica saw a non retriable failure other than the types defined above. Cleanup and rethrow the exception</exception>
            <exception cref="T:System.TimeoutException">
            The operation was unable to be completed within the given timeout.  The transaction should be aborted and
            a new transaction should be created to retry.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null. Do not handle this exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled via <paramref name="cancellationToken"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code>
            <![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (TransactionFaultedException e)
                    {
                        // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                        // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                        Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    catch (FabricTransientException e)
                    {
                        // Retry until the queue is writable or a different exception is thrown.
                        Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                    }
            
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.Count">
             <summary>
             <para>
             Gets the number of values in the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/>.
             </para>
             </summary>
              
             <remarks>
             <para>
             This count represents the number of values currently visible to <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/>.  Uncommitted Enqueues will not
             increase the count, however uncommitted Dequeues will decrease the count.
             </para>
             <para>
             Note that this API does not take a transaction parameter.  Since the effects of <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> are not isolated
             from other transactions, the count also cannot be isolated from other transactions.  
             </para>
             </remarks>
             <value>The number of values in  the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/>.</value>
             <exception cref="T:System.Fabric.FabricNotReadableException">The replica is currently not readable.</exception>
             <exception cref="T:System.Fabric.FabricObjectClosedException">The <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1"/> was closed by the runtime.</exception>
              
             <example>
             This example shows how to monitor the queue's count infinitely, until the cancellation token is canceled.
             <code>
             <![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 // Assumption: values are being enqueued/dequeued in another place (e.g. the communication listener).
                 var observer = Task.Run(
                     async () =>
                         {
                             while (true)
                             {
                                 cancellationToken.ThrowIfCancellationRequested();
            
                                 try
                                 {
                                     Console.WriteLine("Count: " + concurrentQueue.Count);
                                 }
                                 catch (FabricNotReadableException e)
                                 {
                                     // Retry until the queue is readable or a different exception is thrown.
                                     Console.WriteLine("Queue is not readable, retrying the observation: " + e);
                                 }
                                 catch (FabricObjectClosedException e)
                                 {
                                     // Gracefully exit as this is happening due to replica close.
                                     Console.WriteLine("Replica is closing, stopping observer: " + e);
                                     return;
                                 }
                                 
                                 await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                             }
                         },
                     cancellationToken);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.QueueFullException">
            <summary>
            Thrown by <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})"/> when the queue capacity has been reached.
            </summary>
            <remarks>
            <para>
            Retriable; when encountering this exception, the caller should wait some time for additional enqueue operations
            before issuing another dequeue.
            </para>
            <para>
            Queue capacity is not currently implemented.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.QueueFullException.#ctor">
            <summary>
            Initializes a new Instance of the <see cref="T:Microsoft.ServiceFabric.Data.Collections.QueueFullException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.QueueFullException.#ctor(System.String)">
            <summary>
            Initializes a new Instance of the <see cref="T:Microsoft.ServiceFabric.Data.Collections.QueueFullException"/> class with a specified error message.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.QueueFullException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Data.Collections.QueueFullException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.EnumerationMode">
            <summary>
            Specifies if items returned during enumeration of reliable collections should be 
            unordered or ordered.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.EnumerationMode.Unordered">
            <summary>
            Results are returned as an unordered enumeration. Fastest enumeration mode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.EnumerationMode.Ordered">
            <summary>
            Results are be returned as an ordered enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1">
            <summary>
            <para>Defines methods for manipulating Reliable Collections.</para>
            </summary>
            <remarks>
            <para>More information on Reliable Collections can be seen
            <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">here</see>.</para>
            </remarks>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            <para>Gets the number of elements contained in the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1"/>.</para>
            </summary>
            <param name="tx">
            The transaction to associate this operation with. See examples of
            transactions <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-work-with-reliable-collections">here</see>.
            </param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            <para>Indicates that the IReliableCollection cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.</para>
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            <para>Thrown when attempting to perform this operation on a <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1"/> 
            that is not in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role.
            In some instances, read operations, such as this one, can be performed from secondary replicas 
            depending on the implementation of the IReliableCollection used.</para>
            </exception>
            <returns>
            <para>A task that represents the asynchronous operation, indicating the number of elements.</para>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync">
            <summary>
            <para>Removes all state from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1"/>, including replicated and persisted state.</para>
            </summary>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            <para>Thrown when attempting to perform this operation
            on a <cref name="IReliableCollection{T}"/> that is not in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Indicates that this operation failed to complete within the given timeout.</para>
            </exception>
            <returns>
            <para>A task that represents the asynchronous clear operation.</para>
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2">
            <summary>
            <para>Represents a Reliable Collection of key/value pairs that are persisted and replicated.</para>
            </summary>
            <typeparam name="TKey">The type of the keys in the Reliable Dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the Reliable Dictionary.</typeparam>
            <remarks>
            <para>Keys or values stored in this dictionary MUST NOT be mutated outside the context of an operation on the 
            dictionary. It is highly recommended to make both <typeparamref name="TKey"/> and <typeparamref name="TValue"/> 
            immutable in order to avoid accidental data corruption.
            See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-work-with-reliable-collections">here</see> for common pitfalls.</para>
            <para>The transaction is the unit of concurrency. Users can have multiple transactions in-flight at any given point of time, but for a given transaction each API must be called one at a time.
            When calling any asynchronous Reliable Collection method that takes an <see cref="T:Microsoft.ServiceFabric.Data.ITransaction"/>, you must wait for completion of the returned Task before calling
            another method using the same transaction. See examples of transactions <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-work-with-reliable-collections">here</see>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback">
            <summary>
            A function that is called when the Reliable Dictionary is being rebuilt during copy, restore or recovery.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2"/> can only be used within this callback.
            Once the asynchronous callback completes, the <see cref="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2"/> becomes invalid. 
            See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-notifications">here</see> for more information. 
            </remarks>
            <value>
            The asynchronous rebuild notification function. 
            Function takes in IReliableDictionary and NotifyDictionaryRebuildEventArgs token and returns a Task that represents the asynchronous processing of the rebuild notification.
            </value>
        </member>
        <member name="E:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.DictionaryChanged">
            <summary>
            Occurs when the Reliable Dictionary changes.
            For example, addition, update or removal of an item.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Adds the specified key/value pair to the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be added. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException">A value with the same key already exists in the Reliable Dictionary.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous add operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds the specified key/value pair to the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be added. The value can be null for reference types.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException">A value with the same key already exists in the Reliable Dictionary, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous add operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            Uses the specified functions to add a key/value pair to the Reliable Dictionary if the key does not already exist,
            or to update a key/value pair in the Reliable Dictionary if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="addValueFactory"/> is null, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair 
            in the Reliable Dictionary by using the specified function if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key. The value can be null for reference types.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Uses the specified functions to add a key/value pair to the Reliable Dictionary if the key does not already exist,
            or to update a key/value pair in the Reliable Dictionary if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="addValueFactory"/> is null, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair 
            in the Reliable Dictionary by using the specified function if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key. The value can be null for reference types.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Removes all keys and values from the Reliable Dictionary.
            </summary>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <returns>Task that represents the asynchronous clear operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the Reliable Dictionary.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)">
            <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the Reliable Dictionary.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the Reliable Dictionary.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the Reliable Dictionary.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/>.
            </summary>
            <param name="txn">The transaction to associate this operation with.</param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
            </exception>
            <remarks>
            <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator"/> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
            </remarks>
            <returns>
            <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)">
            <summary>
            Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/>.
            </summary>
            <param name="txn">The transaction to associate this operation with.</param>
            <param name="enumerationMode">The enumeration mode to use. The default is Unordered. Ordered enumeration is ascending only. </param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
            </exception>
            <remarks>
            <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator"/> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
            </remarks>
            <returns>
            <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},Microsoft.ServiceFabric.Data.Collections.EnumerationMode)">
            <summary>
            Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/>.
            </summary>
            <param name="txn">The transaction to associate this operation with.</param>
            <param name="filter">Predicate that filters the key-value pairs to include in the enumeration based on the key.</param>
            <param name="enumerationMode">The enumeration mode to use. The default is Unordered. Ordered enumeration is ascending only.</param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
            </exception>
            <remarks>
            <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator"/> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
            </remarks>
            <returns>
            <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the Reliable Dictionary by using the specified function, if the key does not already exist.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="valueFactory"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be
            either the existing value for the key if the key is already in the Reliable Dictionary, or the new value for the key
            as returned by valueFactory if the key was not in the Reliable Dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist.
            If the key exists no updates will be made to the value.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be either the
            existing value for the key if the key is already in the Reliable Dictionary, or the new value if the key was not in the Reliable Dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a key/value pair to the Reliable Dictionary by using the specified function, if the key does not already exist.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="valueFactory"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be
            either the existing value for the key if the key is already in the Reliable Dictionary, or the new value for the key
            as returned by valueFactory if the key was not in the Reliable Dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be either the
            existing value for the key if the key is already in the Reliable Dictionary, or the new value if the key was not in the Reliable Dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Attempts to add the specified key and value to the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to add the specified key and value to the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)">
            <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Attempts to remove the value with the specified key from the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the Reliable Dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove the value with the specified key from the Reliable Dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the Reliable Dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1)">
            <summary>
            Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value is compared with <paramref name="comparisonValue"/> and possibly replaced.</param>
            <param name="newValue">The value that replaces the value of the element that has the specified <paramref name="key"/> if the comparison results in equality.</param>
            <param name="comparisonValue">The value that is compared to the value of the element that has the specified <paramref name="key"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value is compared with <paramref name="comparisonValue"/> and possibly replaced.</param>
            <param name="newValue">The value that replaces the value of the element that has the specified <paramref name="key"/> if the comparison results in equality.</param>
            <param name="comparisonValue">The value that is compared to the value of the element that has the specified <paramref name="key"/>.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair
            in the Reliable Dictionary if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value should be updated.</param>
            <param name="value">The value that replaces the value of the element that has the specified <paramref name="key"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous update operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair
            in the Reliable Dictionary if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value should be updated.</param>
            <param name="value">The value that replaces the value of the element that has the specified <paramref name="key"/>.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> is not in <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <returns>A task that represents the asynchronous update operation.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2">
            <summary>
            Represents a reliable collection of key/value pairs that are persisted and replicated.
            </summary>
            <typeparam name="TKey">The type of the keys in the reliable dictionary.</typeparam>
            <typeparam name="TValue">
            The type of the values in the reliable dictionary.</typeparam>
            <remarks>Keys or values stored in this dictionary MUST NOT be mutated outside the context of an operation on the 
            dictionary.  It is highly recommended to make both <typeparamref name="TKey"/> and <typeparamref name="TValue"/> 
            immutable in order to avoid accidental data corruption.
            
            <para>
            The transaction is the unit of concurrency. Users can have multiple transactions in-flight at any given point of time, but for a given transaction each API must be called one at a time.
            When calling any asynchronous Reliable Collection method that takes an <see cref="T:Microsoft.ServiceFabric.Data.ITransaction"/>, you must wait for completion of the returned Task before calling
            another method using the same transaction.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.CreateKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/> to enumerate the keys.
            </summary>
            <param name="txn">Transaction to associate this operation with.</param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException"/> can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <remarks>
            The enumerarable returned from the reliable dictionary is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
            <returns>An enumerable for the reliable dictionary keys.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.CreateKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)">
            <summary>
            Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/> to enumerate the keys.
            </summary>
            <param name="txn">Transaction to associate this operation with.</param>
            <param name="enumerationMode">The enumeration mode to use. The default is Unordered.</param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException"/> can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <remarks>
            The enumerarable returned from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/> is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
            <returns>An enumerable for the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/> keys.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.CreateKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/> to enumerate the keys.
            </summary>
            <param name="txn">Transaction to associate this operation with.</param>
            <param name="enumerationMode">The enumeration mode to use. The default is Unordered.</param>
            <param name="timeout">
            The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException"/> can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary"/> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> is that Reliable Collection's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
            <remarks>
            The enumerarable returned from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/> is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
            <returns>An enumerable for the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/> keys.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.Count">
            <summary>
            Gets the number of key-value pairs contained in the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2"/>.
            </summary>
            <remarks>
            This property does not have transactional semantics. It represents the best effort number of items 
            in the dictionary at the moment when the property was accessed.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1">
            <summary>
            Represents a reliable first-in, first-out collection of objects that are persisted and replicated.
            </summary>
            <typeparam name="T">The type of the elements contained in the reliable queue.</typeparam>
            <remarks>
            <para>
            Values stored in this queue MUST NOT be mutated outside the context of an operation on the queue. It is
            highly recommended to make <typeparamref name="T"/> immutable in order to avoid accidental data corruption.
            </para>
            <para>
            Transaction is the unit of concurrency: Users can have multiple transactions in-flight at any given point of time but for a given transaction each API must be called one at a time.
            So all Reliable Collection APIs that take in a transaction and return a Task, must be awaited one at a time.
            <seealso cref="T:Microsoft.ServiceFabric.Data.ITransaction"/>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Adds an object to the end of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="item">The object to add to the end of the queue. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}"/> is not in <cref name="ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx"/> and try again with a new transaction.</remarks>
            <returns>Task that represents the asynchronous enqueue operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds an object to the end of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="item">The object to add to the end of the queue. The value can be null for reference types.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}"/> is not in <cref name="ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx"/> and try again with a new transaction.</remarks>
            <returns>Task that represents the asynchronous enqueue operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Tries to remove and return the object at the beginning of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}"/> is not in <cref name="ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx"/> and try again with a new transaction.</remarks>
            <returns>
            Task that represents the asynchronous dequeue operation. The task result is a tuple indicating
            whether an object was removed and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Tries to remove and return the object at the beginning of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}"/> is not in <cref name="ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx"/> and try again with a new transaction.</remarks>
            <returns>
            Task that represents the asynchronous dequeue operation. The task result is a tuple indicating
            whether an object was removed and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}"/> cannot serve reads at the moment.
            <cref name="FabricNotReadableException"/> can be thrown in all <cref name="ReplicaRole"/>s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary"/> is loss of <cref name="IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary"/> is that Reliable Queue's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}"/> cannot serve reads at the moment.
            <cref name="FabricNotReadableException"/> can be thrown in all <cref name="ReplicaRole"/>s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary"/> is loss of <cref name="IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary"/> is that Reliable Queue's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}"/> cannot serve reads at the moment.
            <cref name="FabricNotReadableException"/> can be thrown in all <cref name="ReplicaRole"/>s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary"/> is loss of <cref name="IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary"/> is that Reliable Queue's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}"/> cannot serve reads at the moment.
            <cref name="FabricNotReadableException"/> can be thrown in all <cref name="ReplicaRole"/>s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary"/> is loss of <cref name="IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary"/> is that Reliable Queue's state is not yet consistent.
            </exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Creates an async enumerable over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1"/>.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}"/> cannot serve reads at the moment.
            <cref name="FabricNotReadableException"/> can be thrown in all <cref name="ReplicaRole"/>s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary"/> is loss of <cref name="IStatefulServicePartition.ReadStatus"/>.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary"/> is that Reliable Queue's state is not yet consistent.
            </exception>
            <returns>IEnumerable that represents all the values.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.LockMode">
            <summary>
            Specifies how reliable collections will lock resources, which determines
            how the resources can be accessed by concurrent transactions.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.LockMode.Default">
            <summary>
            Use the default lock mode based on the operation and isolation level of the transaction.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.LockMode.Update">
            <summary>
            Used on resources that are intended to be updated. Prevents a common form of deadlock
            that occurs when multiple transactions are reading, locking, and potentially
            updating resources later.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.BackupDescription">
            <summary>
            A BackupDescription contains all of the information necessary to backup a stateful service replica. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupDescription.#ctor(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Initializes a new instance of the <cref name="BackupDescription"/> structure.
            </summary>
            <param name="backupCallback">
            Callback to be called when the backup folder has been created and populated locally by the system. 
            This folder is now ready to be moved out of the node.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupDescription.#ctor(Microsoft.ServiceFabric.Data.BackupOption,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Initializes a new instance of the <cref name="BackupDescription"/> structure.
            </summary>
            <param name="option">
            The <cref name="BackupOption"/> for the backup.
            </param>
            <param name="backupCallback">
            Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupDescription.Option">
            <summary>
            The type of backup to perform.
            </summary>
            <value>
            The type of the backup.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupDescription.BackupCallback">
            <summary>
            Gets the callback to be called when the backup folder has been created locally and is ready to be moved out of the node.
            </summary>
            <value>
            The backup callback function commonly used to copy the backup folder to an external location.
            </value>
            <remarks>
            Backup callback function takes in BackupInfo and Cancellation token and returns a Task that represents the processing of the backup folder.
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.RestoreContext">
            <summary>
            <cref name="RestoreContext"/> contains the <cref name="RestoreContext.RestoreAsync(RestoreDescription)"/> that can be used to restore the state of the replica from a backup. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreContext.#ctor(Microsoft.ServiceFabric.Data.IStateProviderReplica)">
            <summary>
            Initializes a new instance of the <cref name="RestoreContext"/> structure.
            </summary>
            <param name="stateProviderReplica">
            An <see cref="T:Microsoft.ServiceFabric.Data.IStateProviderReplica"/> representing a reliable state provider replica.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreContext.RestoreAsync(Microsoft.ServiceFabric.Data.RestoreDescription)">
            <summary>
            Restores a backup described by <see cref="T:Microsoft.ServiceFabric.Data.RestoreDescription"/>.
            </summary>
            <param name="restoreDescription">Description for the restore request.</param>
            <exception cref="T:System.Fabric.FabricMissingFullBackupException">
            Indicates that the input backup folder does not contain a full backup.
            For a backup folder to be restorable, it must contain exactly one full backup and any number of incremental backups.
            </exception>
            <exception cref="T:System.ArgumentException">
            Indicates that one of the arguments is not valid. For example, when restoring a Reliable Service if RestorePolicy is set to Safe, 
            but the input backup folder contains a version of the state that is older than the state maintained in the current replica.
            
            When restoring an Actor Service this exception is thrown if specified <see cref="P:Microsoft.ServiceFabric.Data.RestoreDescription.BackupFolderPath"/>
            is empty.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            Indicates that the supplied restore directory does not exist.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            Indicates that the replica is closing.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Indicates that current restore operation is not valid. For example, the <see cref="T:System.Fabric.ServicePartitionKind"/> 
            of the partition from where backup was taken is different than that of current partition being restored.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Indicates the expected backup files under the supplied restore directory is not found.
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            Indicates either the restore operation encountered an unexpected error or the backup files in restore directory are not valid.
            The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property indicates the type of error that occurred.
            <list type="bullet">
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.InvalidBackup"/></term>
                    <description>
                    Indicates that the backup files supplied in the restore directory are either missing files or have extra unexpected files.
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.InvalidRestoreData"/></term>
                    <description>
                    Indicates that metadata files (restore.dat) present in restore directory is either corrupt or contains invalid information.
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.InvalidBackupChain"/></term>
                    <description>
                    Indicates that the backup chain (i.e. one full backup and zero or more contiguous incremental backups that were taken after it) 
                    supplied in the restore directory is broken. 
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.DuplicateBackups"/></term>
                    <description>
                    Indicates that the backup chain (i.e. one full backup and zero or more contiguous incremental backups that were taken after it) 
                    supplied in the restore directory contains duplicate backups. 
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.RestoreSafeCheckFailed"/></term>
                    <description>
                    If <see cref="F:Microsoft.ServiceFabric.Data.RestorePolicy.Safe"/> is specified as part of <see cref="T:Microsoft.ServiceFabric.Data.RestoreDescription"/>, it 
                    indicates that the backup provided for restore has older data than currently present in service.
                    </description>
                </item>
            </list>
            </exception>
            <returns>
            Task that represents the asynchronous restore operation.
            </returns>
            <remarks>
            This API must be called from OnDataLossAsync method. Only one RestoreAsync API can be inflight per replica at any given point of time.
            
            Note that exceptions thrown by this API differ depending on of underlying state provider. The exceptions that are currently documented for
            this API applies only to out-of-box state providers provided by Service Fabric for Reliable Services and Reliable Actors.
            <para>
            Following exceptions are thrown by this API when invoked in Reliable Service:
            <list type="bullet">
                <item>
                    <description><see cref="T:System.Fabric.FabricMissingFullBackupException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.ArgumentException"/></description>
                </item>
            </list>
            </para>
            <para>
            Following exceptions are thrown by this API when invoked in Actor Service with KvsActorStateProvider as its state provider (which is the
            default state provider for Reliable Actors):
            <list type="bullet">
                <item>
                    <description><see cref="T:System.ArgumentException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.IO.DirectoryNotFoundException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.Fabric.FabricObjectClosedException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.InvalidOperationException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.IO.FileNotFoundException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.Fabric.FabricException"/></description>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreContext.RestoreAsync(Microsoft.ServiceFabric.Data.RestoreDescription,System.Threading.CancellationToken)">
            <summary>
            Restore a backup described by <see cref="T:Microsoft.ServiceFabric.Data.RestoreDescription"/>.
            </summary>
            <param name="restoreDescription">Description for the restore request.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.Fabric.FabricMissingFullBackupException">
            Indicates that the input backup folder does not contain a full backup.
            For a backup folder to be restorable, it must contain exactly one full backup and any number of incremental backups.
            </exception>
            <exception cref="T:System.ArgumentException">
            Indicates that one of the arguments is not valid. For example, when restoring a Reliable Service if RestorePolicy is set to Safe, 
            but the input backup folder contains a version of the state that is older than the state maintained in the current replica.
            
            When restoring an Actor Service this exception is thrown if specified <see cref="P:Microsoft.ServiceFabric.Data.RestoreDescription.BackupFolderPath"/>
            is empty.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            Indicates that the supplied restore directory does not exist.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            Indicates that the replica is closing.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Indicates that current restore operation is not valid. For example, the <see cref="T:System.Fabric.ServicePartitionKind"/> 
            of the partition from where backup was taken is different than that of current partition being restored.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Indicates the expected backup files under the supplied restore directory is not found.
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            Indicates either the restore operation encountered an unexpected error or the backup files in restore directory are not valid.
            The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property indicates the type of error that occurred.
            <list type="bullet">
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.InvalidBackup"/></term>
                    <description>
                    Indicates that the backup files supplied in the restore directory are either missing files or have extra unexpected files.
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.InvalidRestoreData"/></term>
                    <description>
                    Indicates that metadata files (restore.dat) present in restore directory is either corrupt or contains invalid information.
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.InvalidBackupChain"/></term>
                    <description>
                    Indicates that the backup chain (i.e. one full backup and zero or more contiguous incremental backups that were taken after it) 
                    supplied in the restore directory is broken. 
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.DuplicateBackups"/></term>
                    <description>
                    Indicates that the backup chain (i.e. one full backup and zero or more contiguous incremental backups that were taken after it) 
                    supplied in the restore directory contains duplicate backups. 
                    </description>
                </item>
                <item>
                    <term><see cref="F:System.Fabric.FabricErrorCode.RestoreSafeCheckFailed"/></term>
                    <description>
                    If <see cref="F:Microsoft.ServiceFabric.Data.RestorePolicy.Safe"/> is specified as part of <see cref="T:Microsoft.ServiceFabric.Data.RestoreDescription"/>, it 
                    indicates that the backup provided for restore has older data than currently present in service.
                    </description>
                </item>
            </list>
            </exception>
            <returns>
            Task that represents the asynchronous restore operation.
            </returns>
            <remarks>
            This API must be called from OnDataLossAsync method. Only one RestoreAsync API can be inflight per replica at any given point of time.
            
            Note that exceptions thrown by this API differ depending on of underlying state provider. The exceptions that are currently documented for
            this API applies only to out-of-box state providers provided by Service Fabric for Reliable Services and Reliable Actors.
            <para>
            Following exceptions are thrown by this API when invoked in Reliable Service:
            <list type="bullet">
                <item>
                    <description><see cref="T:System.Fabric.FabricMissingFullBackupException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.ArgumentException"/></description>
                </item>
            </list>
            </para>
            <para>
            Following exceptions are thrown by this API when invoked in Actor Service with KvsActorStateProvider as its state provider (which is the
            default state provider for Reliable Actors):
            <list type="bullet">
                <item>
                    <description><see cref="T:System.ArgumentException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.IO.DirectoryNotFoundException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.Fabric.FabricObjectClosedException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.InvalidOperationException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.IO.FileNotFoundException"/></description>
                </item>
                <item>
                    <description><see cref="T:System.Fabric.FabricException"/></description>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.RestoreDescription">
            <summary>
            A RestoreDescription contains all of the information necessary to restore a stateful service replica. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <cref name="RestoreDescription"/> structure
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty, or consist only of whitespace. 
            UNC paths may also be provided.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreDescription.#ctor(System.String,Microsoft.ServiceFabric.Data.RestorePolicy)">
            <summary>
            Initializes a new instance of the RestoreDescription structure.
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty, or consist only of whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="restorePolicy">The restore policy.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.RestoreDescription.BackupFolderPath">
            <summary>
            Gets the directory which will be used to restore the replica's state.
            This parameter cannot be null, empty, or consist only of whitespace. 
            UNC paths may also be provided.
            </summary>
            <remarks>
            Folder must at least contain one full backup.
            In addition, it could include one or more incremental backups.
            </remarks>
            <value>
            The directory which will be used to restore the replica's state.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.RestoreDescription.Policy">
            <summary>
            Gets the restore policy.
            </summary>
            <value>
            Policy to be used for the restore.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.BackupInfo">
            <summary>
            Provides information about the backup.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.#ctor(System.String,Microsoft.ServiceFabric.Data.BackupOption,Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)">
            <summary>
            Initializes a new instance of the <cref name="BackupInfo"/> class.
            </summary>
            <param name="directory">Folder path that contains the backup.</param>
            <param name="option"><cref name="BackupOption"/> that was used to take the backup.</param>
            <param name="version"><cref name="BackupVersion"/> of the backup.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.#ctor(System.String,Microsoft.ServiceFabric.Data.BackupOption,Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion,Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <cref name="BackupInfo"/> class.
            </summary>
            <param name="directory">Folder path that contains the backup.</param>
            <param name="option"><cref name="BackupOption"/> that was used to take the backup.</param>
            <param name="version"><cref name="BackupVersion"/> of the backup.</param>
            <param name="startBackupVersion"><cref name="BackupVersion"/> of first logical log record in the backup.</param>
            <param name="backupId">Id of the backup.</param>
            <param name="parentBackupId">Id of the corresponding full backup in case of incremental backup, Guid.Empty in case this is full backup.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.Directory">
            <summary>
            Gets the directory where the backup was created. 
            </summary>
            <returns>The directory containing the backup.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.Option">
            <summary>
            Gets the backup option used.
            </summary>
            <returns>The <cref name="BackupOption"/> that was used to take the backup.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.Version">
            <summary>
            Gets the latest epoch and LSN included in the backup.
            </summary>
            <returns><cref name="BackupVersion"/> of the backup.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.BackupId">
            <summary>
            Gets the Backup Id
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.StartBackupVersion">
            <summary>
            Gets the first epoch and LSN in the backup
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.ParentBackupId">
            <summary>
            Gets the parent backup ID
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion">
            <summary>
            Represents the version of the backup.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.InvalidBackupVersion">
            <summary>
            Invalid Backup Version.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.#ctor(System.Fabric.Epoch,System.Int64)">
            <summary>
            Initializes a new instance of the <cref name="BackupVersion"/>
            </summary>
            <param name="epoch">The <cref name="Epoch"/> at which the backup was taken.</param>
            <param name="lsn">The last committed logical sequence number included in the backup.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch">
            <summary>
            Gets the <cref name="Epoch"/> at which the backup was taken.
            </summary>
            <value>The <cref name="Epoch"/> at which the backup was taken.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn">
            <summary>
            Gets the last committed logical sequence number included in the backup.
            </summary>
            <returns>The last committed logical sequence number included in the backup.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)">
            <summary>
            Compares this instance with a specified <cref name="BackupVersion"/> object and indicates whether this instance precedes, 
            follows, or appears in the same position in the sort order as the specified <cref name="BackupVersion"/>. 
            </summary>
            <param name="other">An object that evaluates to a <cref name="BackupVersion"/>.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            Less than zero indicates that this instance precedes other in the sort order.
            Zero indicates that this instance occurs in the same position in the sort order as other. 
            Greater than zero indicates that this instance follows other in the sort order.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)">
            <summary>
            Determines whether this instance and another specified <cref name="BackupVersion"/> object have the same value.
            </summary>
            <param name="other">The <cref name="BackupVersion"/> to compare to this instance. </param>
            <returns>
            true if the value of the value parameter is the same as the value of this instance; otherwise, false. 
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(System.Object)">
            <summary>
            Determines whether this instance and another specified <cref name="BackupVersion"/> object have the same value.
            </summary>
            <param name="obj">The <cref name="BackupVersion"/> to compare to this instance. </param>
            <returns>
            true if the value of the value parameter is the same as the value of this instance; otherwise, false. 
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode">
            <summary>
            Returns the hash code for this <cref name="BackupVersion"/>.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.BackupOption">
            <summary>
            Indicates the kind of the backup.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.BackupOption.Full">
            <summary>
            A full backup of all state managed by the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.BackupOption.Incremental">
            <summary>
            Incremental backup of the replica. i.e. only the changes 
            since the last full or incremental backup will be backed up.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1">
            <summary>
            Exposes an <see cref="T:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1"/> 
            which supports an asynchronous iteration over a collection 
            of a specified type.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator">
            <summary>
            Returns an <see cref="T:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1"/> 
            that asynchronously iterates through the collection.
            </summary>
            <returns>An <see cref="T:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1"/> 
            that can be used to asynchronously iterate through the collection.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1">
            <summary>
            Asynchronous enumerator.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current">
            <summary>
            Gets the current element in the enumerator.
            </summary>
            <value>
            Current element in the enumerator.
            </value>
            <remark>
            Calling after <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)"/> 
            has passed the end of the collection is considered
            undefined behavior.
            </remark>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element of the enumerator.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            true if the enumerator was successfully advanced to the next element; false
             if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IReliableStateManagerReplica">
            <summary>
            Defines replica of a reliable state provider. 
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IReliableStateManagerReplica2">
            <summary>
            Defines replica of a reliable state provider. 
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IReliableState">
            <summary>
            Defines methods for interacting with all reliable state in Service Fabric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.IReliableState.Name">
            <summary>
            Gets a value indicating the unique name for the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance.
            </summary>
            <value>
            The <see cref="T:System.Uri"/> name of this <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IReliableStateManager">
            <summary>
            Manages all <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> for a service replica.
            Each replica in a service has its own state manager and thus its own set of <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged">
            <summary>
            Occurs when a transaction's state changes.
            For example, commit of a transaction.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged">
            <summary>
            Occurs when State Manager's state changes.
            For example, creation or delete of reliable state or rebuild of the reliable state manager.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})">
            <summary>
            Registers a custom serializer for all reliable collections.
            </summary>
            <typeparam name="T">Type that will be serialized and deserialized.</typeparam>
            <param name="stateSerializer">
            The state serializer to be added.
            </param>
            <returns>
            True if the custom serializer was added.
            False if a custom serializer for the given type already exists.
            </returns>
            <remarks>
            <para>
            When a reliable collection needs to serialize an object, it asks the state manager for a serializer for the given type.
            The state manager will first check if there is a custom serializer registered for the input type. If not, it will check if one of the built-in
            serializers can serialize the type. The state manager has built-in serializers for the following types: guid, bool, byte, sbyte, char, decimal, double,
            float, int, uint, long, ulong, short, ushort and string. If not, it will use <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </para>
            <para>
            Serializers must be infinitely forwards and backwards compatible. For the types that are using built-in serializers, Service Fabric ensures
            forwards and backwards compatibility. However, if a custom serializer is added for a type with a built-in serializer, the custom serializer
            must be compatible with the built-in serialization format for that type.
            </para>
            <para>
            This method should be called from the constructor of the Stateful Service. 
            This ensures that the Reliable Collections have the necessary serializers before recovery of the persisted state begins.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction">
            <summary>
            Create and start a new transaction that can be used to group operations to be performed atomically.
            </summary>
            <remarks>
            Operations are added to the transaction by passing the <see cref="T:Microsoft.ServiceFabric.Data.ITransaction"/> object in to reliable state methods.
            </remarks>
            <returns>A new transaction.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)">
            <summary>
            Attempts to get an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name.
            </summary>
            <typeparam name="T">
            When specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will
            be cast to the given type.
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not convertible to type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the State Manager cannot retrive a reliable collection.
            <see cref="T:System.Fabric.FabricNotReadableException"/> can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            For example, when a <see cref="F:System.Fabric.ReplicaRole.Primary"/> or <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> looses <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)">
            <summary>
            Attempts to get an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name.
            </summary>
            <typeparam name="T">
            When specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will
            be cast to the given type.
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not convertible to type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the State Manager cannot retrive a reliable collection.
            <see cref="T:System.Fabric.FabricNotReadableException"/> can be thrown in all <see cref="T:System.Fabric.ReplicaRole"/>s.
            For example, when a <see cref="F:System.Fabric.ReplicaRole.Primary"/> or <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> looses <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/>.</exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
            <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
            <returns>Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IStateProviderReplica">
            <summary>
            Defines methods a reliable state provider replica must implement for Service Fabric to interact with it.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync">
            <summary>
            Function called during suspected data-loss.
            </summary>
            <value>
            Function called as part of suspected data loss processing.
            Function takes in CancellationToken and need to return a Task that represents the asynchronous processing of the event.
            Returning true, indicates that the replica's state has been restored.
            False indicates that the replica's state has not been changed.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            Initialize the state provider replica using the service initialization information.
            </summary>
            <remarks>
            No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync.
            </remarks>
            <param name="initializationParameters">Service initialization information such as service name, partition id, replica id, and code package information.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            Open the state provider replica for use.
            </summary>
            <remarks>
            Extended state provider initialization tasks can be started at this time.
            </remarks>
            <param name="openMode">Indicates whether this is a new or existing replica.</param>
            <param name="partition">The partition this replica belongs to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            Task that represents the asynchronous open operation. The result contains the replicator
            responsible for replicating state between other state provider replicas in the partition.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            Notify the state provider replica that its role is changing, for example to Primary or Secondary.
            </summary>
            <param name="newRole">The new replica role, such as primary or secondary.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous change role operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Gracefully close the state provider replica.
            </summary>
            <remarks>
            This generally occurs when the replica's code is being upgrade, the replica is being moved
            due to load balancing, or a transient fault is detected.
            </remarks>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous close operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort">
            <summary>
            Forcefully abort the state provider replica.
            </summary>
            <remarks>
            This generally occurs when a permanent fault is detected on the node, or when
            Service Fabric cannot reliably manage the replica's life-cycle due to internal failures.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs a full backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.
            </summary>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            A FULL backup will be performed with a one-hour timeout.
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs a backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.
            </summary>
            <param name="option">The type of backup to perform.</param>
            <param name="timeout">The timeout for this operation.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <remarks>
            A safe restore will be performed, meaning the restore will only be completed if the data to restore is ahead of state of the current replica.
            </remarks>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="restorePolicy">The restore policy.</param>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IStateProviderReplica2">
            <summary>
            Defines methods a reliable state provider replica must implement for Service Fabric to interact with it.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.IStateProviderReplica2.OnRestoreCompletedAsync">
            <summary>
            Function called after restore has been performed on the replica.
            </summary>
            <value>
            Function called when the replica's state has been restored successfully by the framework
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IStateSerializer`1">
             <summary>
             Represents a custom serializer for type <typeparamref name="T"/>.
             </summary>
             <typeparam name="T">Type to serialize and deserialize.</typeparam>
             <remarks>
             Use <see cref="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})"/> to register a custom serializer.
             </remarks>
             <example>
             In this example, implementation of the Read and Write overloads simply call their counterpart overloads.
             The currentValue and baseValue parameters are not set by the platform and should be ignored.
             <code>
             class Order
             {
                 public byte Warehouse { get; set; }
                 public short District { get; set; }
                 public int Customer { get; set; }
                 public long OrderNumber { get; set; }
             }
            
             class OrderSerializer : IStateSerializer&lt;Order&gt;
             {
                 void Write(Order value, BinaryWriter writer)
                 {
                     writer.Write(value.Warehouse);
                     writer.Write(value.District);
                     writer.Write(value.Customer);
                     writer.Write(value.OrderNumber);
                 }
            
                 Order Read(BinaryReader reader)
                 {
                     Order value = new Order();
            
                     value.Warehouse = reader.ReadByte();
                     value.District = reader.ReadInt16();
                     value.Customer = reader.ReadInt32();
                     value.OrderNumber = reader.ReadInt64();
            
                     return value;
                 }
            
                 void Write(Order currentValue, Order newValue, BinaryWriter writer)
                 {
                     this.Write(newValue, writer);
                 }
            
                 Order Read(Order baseValue, BinaryReader reader)
                 {
                     return this.Read(reader);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Read(System.IO.BinaryReader)">
            <summary>
            Deserializes from the given <see cref="T:System.IO.BinaryReader"/> to <typeparamref name="T"/>.
            </summary>
            <param name="binaryReader">The <see cref="T:System.IO.BinaryReader"/> to deserialize from.</param>
            <returns>The deserialized value.</returns>
            <remarks>
            When accessing the <see cref="T:System.IO.BinaryReader"/> base stream, care must be taken when moving the position in the stream.
            Reading must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Write(`0,System.IO.BinaryWriter)">
            <summary>
            Serializes a value and writes it to the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="binaryWriter">The <see cref="T:System.IO.BinaryWriter"/> to serialize to.</param>
            <remarks>
            When accessing the <see cref="T:System.IO.BinaryWriter"/> base stream, care must be taken when moving the position in the stream.
            Writing must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Read(`0,System.IO.BinaryReader)">
            <summary>
            Deserializes from the given <see cref="T:System.IO.BinaryReader"/> to <typeparamref name="T"/>.
            </summary>
            <param name="baseValue">The base value for the deserialization.</param>
            <param name="binaryReader">The <see cref="T:System.IO.BinaryReader"/> to deserialize from.</param>
            <returns>The deserialized value.</returns>
            <remarks>
            When accessing the <see cref="T:System.IO.BinaryReader"/> base stream, care must be taken when moving the position in the stream.
            Reading must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Write(`0,`0,System.IO.BinaryWriter)">
            <summary>
            Serializes an object and writes it to the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="baseValue">The base value for the serialization.</param>
            <param name="targetValue">The value to serialize.</param>
            <param name="binaryWriter">The <see cref="T:System.IO.BinaryWriter"/> to serialize to.</param>
            <remarks>
            When accessing the <see cref="T:System.IO.BinaryWriter"/> base stream, care must be taken when moving the position in the stream.
            Writing must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ITransaction">
             <summary>
             A sequence of operations performed as a single logical unit of work.
             </summary>
             <remarks>
             A transaction must exhibit the following ACID properties. (see: https://technet.microsoft.com/en-us/library/ms190612)
             <list type="bullet">
                 <item>
                     <description>
                         Atomicity - A transaction must be an atomic unit of work; either all of its data modifications are
                         performed, or none of them is performed.
                     </description>
                 </item>
                 <item>
                     <description>
                         Consistency - When completed, a transaction must leave all data in a consistent state. All
                         internal data structures must be correct at the end of the transaction.
                     </description>
                 </item>
                 <item>
                     <description>
                         Isolation - Modifications made by concurrent transactions must be isolated from the
                         modifications made by any other concurrent transactions. 
                         The isolation level used for an operation within an <see cref="T:Microsoft.ServiceFabric.Data.ITransaction"/> is determined by the
                         <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> performing the operation.
                     </description>
                 </item>
                 <item>
                     <description>
                         Durability - After a transaction has completed, its effects are permanently in place in the system.
                         The modifications persist even in the event of a system failure.
                     </description>
                 </item>
             </list>
             
             <para>
             Any instance member of this type is not guaranteed to be thread safe. 
             This makes transactions the unit of concurrency: Users can have multiple transactions in-flight at any given point of time, but for a given transaction each API must be called one at a time.
             All <see cref="T:IReliableCollection{T}"/> APIs that accept a transaction and return a Task must be awaited one at a time.
             </para>
             
             
             <para>
             Following is an example of a correct usage.
             <code>
             <![CDATA[
             
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (TransactionFaultedException e)
                     {
                         // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                         // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                         Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             ]]>
             </code>
             </para>
             
             <para>
             The following is an example of incorrect usage that has undefined behavior.
             <code>
             <![CDATA[
             using (var txn = this.StateManager.CreateTransaction())
             {
                 List<Task> taskList = new List<Task>();
                 taskList.Add(concurrentQueue.DequeueAsync(txn, cancellationToken));
                 taskList.Add(concurrentQueue.DequeueAsync(txn, cancellationToken));
             
                 await Task.WhenAll(taskList);
                 await txn.CommitAsync();
             }
             ]]>
             </code>
             </para>
             
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber">
            <summary>
            Sequence number for the commit operation.
            </summary>
            <value>
            The sequence number at which the the transaction was committed.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ITransaction.CommitAsync">
            <summary>
            Commit the transaction.
            </summary>
            <remarks>
            You cannot abort a transaction once it has been committed, because all modifications
            have been persisted and replicated.
            </remarks>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            The transaction includes updates to <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> and the <see cref="T:System.Fabric.ReplicaRole"/> is not Primary.
            Only Primary replicas are given write status.
            </exception>
            <returns>
            A task that represents the asynchronous commit operation. 
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ITransaction.Abort">
            <summary>
            Abort (rolls back) the transaction.
            </summary>
            <remarks>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            The transaction includes updates to <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> and the <see cref="T:System.Fabric.ReplicaRole"/> is not Primary.
            Only Primary replicas are given write status.
            </exception>
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ITransaction.TransactionId">
            <summary>
            Gets a value identifying the transaction.
            </summary>
            <returns>The transaction id.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync">
            <summary>
            Gets the visibility sequence number.
            </summary>
            <remarks>
            <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
            </remarks>
            <returns>The visibility sequence number.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ConditionalValue`1">
            <summary>
            Result class returned by Reliable Collections APIs that may or may not return a value.
            </summary>
            <typeparam name="TValue">The type of the value returned by this <cref name="ConditionalValue{TValue}"/>.</typeparam>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.ConditionalValue`1.hasValue">
            <summary>
            Is there a value.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.ConditionalValue`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <cref name="ConditionalValue{TValue}"/> class with the given value.
            </summary>
            <param name="hasValue">Indicates whether the value is valid.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue">
            <summary>
            Gets a value indicating whether the current <cref name="ConditionalValue{TValue}"/> object has a valid value of its underlying type.
            </summary>
            <returns><languageKeyword>true</languageKeyword>: Value is valid, <languageKeyword>false</languageKeyword> otherwise.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ConditionalValue`1.Value">
            <summary>
            Gets the value of the current <cref name="ConditionalValue{TValue}"/> object if it has been assigned a valid underlying value.
            </summary>
            <returns>The value of the object. If HasValue is <languageKeyword>false</languageKeyword>, returns the default value for type of the TValue parameter.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration">
            <summary>
            Configuration object used to create ReliableStateManager.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.#ctor(System.String,System.String,System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Create a new ReliableStateManagerConfiguration.
            </summary>
            <param name="configPackageName">Optional config package name from which to load replicator security/settings.</param>
            <param name="replicatorSecuritySectionName">Optional config section name from which to load replicator security settings.</param>
            <param name="replicatorSettingsSectionName">Optional config section name from which to load replicator settings.</param>
            <param name="onInitializeStateSerializersEvent">
            Optional callback which will fire when custom serializers should be added.
            Used to set the <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.OnInitializeStateSerializersEvent"/> property.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.#ctor(Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Create a new ReliableStateManagerConfiguration.
            </summary>
            <param name="replicatorSettings">Replicator settings used to initialize the ReliableStateManager.</param>
            <param name="onInitializeStateSerializersEvent">
            Optional callback which will fire when custom serializers should be added.
            Used to set the <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.OnInitializeStateSerializersEvent"/> property.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ReplicatorSettings">
            <summary>
            Gets or sets the replicator settings.
            </summary>
            <returns>The replicator settings.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ConfigPackageName">
            <summary>
            Gets the name of the config package in Settings.xml from which to load replicator settings and replicator
            security settings.
            </summary>
            <returns>The config package name.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ReplicatorSecuritySectionName">
            <summary>
            Gets the replicator security settings section name.
            </summary>
            <returns>The section name.</returns>
            <remarks>If present in the config package specified by <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ConfigPackageName"/> in Settings.xml,
            this section will be used to configure replicator security settings.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ReplicatorSettingsSectionName">
            <summary>
            Gets the replicator settings section name.
            </summary>
            <returns>The section name.</returns>
            <remarks>If present in the config package specified by <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ConfigPackageName"/> in Settings.xml,
            this section will be used to configure replicator settings.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.OnInitializeStateSerializersEvent">
            <summary>
            Gets the delegate which will be called when custom serializers can be added.  
            When called, specify custom serializers via <see cref="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})"/>
            </summary>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings">
            <summary>
            Settings that configure the replicator
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.RetryInterval">
            <summary>
            Gets or sets how long the replicator waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message.
            The default value is 5 seconds.
            </summary>
            <returns>The retry interval.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.BatchAcknowledgementInterval">
            <summary>
            Gets or sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.
            The default value is 5 milliseconds.
            </summary>
            <returns>The batch acknowledgment interval.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ReplicatorAddress">
            <summary>
            Gets or sets the address in {ip}:{port} format that this replicator will use when communicating with other replicators.
            The default value is "localhost:0", which picks a dynamic port number in runtime.
            If replicator is running inside a container, you should try setting up <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ReplicatorListenAddress" /> and <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ReplicatorPublishAddress" />.
            </summary>
            <returns>The replicator address.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ReplicatorListenAddress">
            <summary>
            Gets or sets the address in {ip}:{port} format that this replicator will use to receive information from other replicators.
            The default value is "localhost:0", which picks a dynamic port number in runtime.
            {ip} part of the listen address can be obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ServiceListenAddress" />.
            </summary>
            <returns>The replicator address.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ReplicatorPublishAddress">
            <summary>
            Gets or sets the address in {ip}:{port} format that this replicator will use to send information to other replicators.
            The default value is "localhost:0", which picks a dynamic port number in runtime.
            {ip} part of the publish address can be obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ServicePublishAddress" />.
            </summary>
            <returns>The replicator address.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SecurityCredentials">
            <summary>
            Gets or sets the security credentials for securing the traffic between replicators.
            </summary>
            <returns>The security credentials.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InitialCopyQueueSize">
            <summary>
            Gets or sets the initial size of the copy operation queue inside the replicator, which contains copy operations.
            Default value is 64.
            The value is the number of operations in the copy operation queue. Must be a power of 2.
            </summary>
            <returns>The initial copy queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxCopyQueueSize">
            <summary>
            Gets or sets the maximum size of the copy operation queue inside replicator, which contains copy operations.
            Default value is 1024.
            The value is the max number of operations in the copy operation queue. Must be a power of 2.
            </summary>
            <returns>The max copy queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxReplicationMessageSize">
            <summary>
            Gets or sets the max replication message size.
            Default value is 50MB.
            The unit is Bytes.
            </summary>
            <returns>The max replication message size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InitialPrimaryReplicationQueueSize">
            <summary>
            Gets or sets the initial primary replication queue size.
            Default value is 64.
            The value is the number of operations in the primary replication queue. Must be a power of 2.
            </summary>
            <returns>The initial primary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxPrimaryReplicationQueueSize">
            <summary>
            Gets or sets the max primary replication queue size.
            Default value is 1024.
            The value is the max number of operations in the primary replication queue. Must be a power of 2.
            </summary>
            <returns>The max primary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxPrimaryReplicationQueueMemorySize">
            <summary>
            Gets or sets the max primary replication queue memory size.
            Default value is 0, which implies there is no memory limitation.
            The unit is Bytes.
            </summary>
            <returns>The max primary replication queue memory size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InitialSecondaryReplicationQueueSize">
            <summary>
            Gets or sets the initial secondary replication queue size.
            Default value is 64.
            The value is the number of operations in the secondary replication queue. Must be a power of 2.
            </summary>
            <returns>The initial secondary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxSecondaryReplicationQueueSize">
            <summary>
            Gets or sets the max secondary replication queue size.
            Default value is 2048.
            The value is the max number of operations in the secondary replication queue. Must be a power of 2.
            </summary>
            <returns>The max secondary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxSecondaryReplicationQueueMemorySize">
            <summary>
            Gets or sets the max secondary replication queue memory size.
            Default value is 0, which implies there is no memory limitation.
            The unit is Bytes.
            </summary>
            <returns>The max secondary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SharedLogId">
            <summary>
            Gets or sets the GUID identifier for the log container that is shared by a number of replicas on the windows fabric node including this one.
            Default value is "" which causes the replicator to use the global shared log for the node.
            </summary>
            <returns>The shared log id.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SharedLogPath">
            <summary>
            Gets or sets the full pathname to the log container that is shared by a number of replicas on the node including this one.
            Default value is "" which causes the replicator to use the global shared log for the node.
            </summary>
            <returns>The shared log path.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxStreamSizeInMB">
            <summary>
            Deprecated
            </summary>
            <returns>The max stream size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxMetadataSizeInKB">
            <summary>
            Gets or sets the amount of extra persistent storage space reserved for the replicator specified in kilobytes that is associated with this replica. This
            value must be a multiple of 4.
            The default value is 4.
            The unit is KB.
            </summary>
            <returns>The max metadata size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxRecordSizeInKB">
            <summary>
            Gets or sets the largest record size which the replicator may write specified in kilobytes for the log that is associated with this replica. This
            value must be a multiple of 4 and greater than or equal to 128.
            The default value is 1024.
            The unit is KB.
            </summary>
            <returns>The max record size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxWriteQueueDepthInKB">
            <summary>
            Gets or sets the maximum write queue depth that the core logger can use as specified in kilobytes for the log that is associated with this replica. This
            value is the maximum number of bytes that can be outstanding during core logger updates. It may be 0 for the core logger
            to compute an appropriate value or a multiple of 4.
            The default value is 0.
            The unit is KB.
            </summary>
            <returns>The max write queue depth.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB">
            <summary>
            Gets or sets the checkpoint threshold. A checkpoint will be initiated when the log usage exceeds this value.
            Default value is 50.
            The unit is MB.
            </summary>
            <returns>The checkpoint threshold.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxAccumulatedBackupLogSizeInMB">
            <summary>
            Gets or sets the max size for an accumulated backup log across backups.
            An incremental backup requests will fail if the backup logs generated by the request causes the total amount of logs accumulated including the last full backup to be greater than MaxAccumulatedBackupLogSizeInMB.
            In such cases, user is required to take a full backup.
            Default value is 800.
            The unit is MB.
            </summary>
            <returns>The max accumulated backup log size in MB.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.OptimizeForLocalSSD">
            <summary>
            Deprecated
            </summary>
            <returns>If the OptimizeForLocalSSD option is enabled.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.OptimizeLogForLowerDiskUsage">
            <summary>
            Gets or sets a flag, when true indicates the log should optimize in a way where less disk space is used for the log at the cost of IO performance. If false, the log will use more disk space but have better IO performance.
            Default value is true.
            </summary>
            <returns>If the OptimizeLogForLowerDiskUsage option is enabled.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SecondaryClearAcknowledgedOperations">
            <summary>
            Gets or sets a flag, when true indicates the secondary replicator should clear the in-memory queue after acknowledging the operations to the primary (After the operations are flushed to disk).
            Default value is false.
            Settings this to "TRUE" can result in additional disk reads on the new primary, while catching up replicas after a failover.
            </summary>
            <returns>If the SecondaryClearAcknowledgedOperations option is enabled.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SlowApiMonitoringDuration">
            <summary>
            Sets the interval after which the replicator sends a warning health report that the API is slow and is taking longer than expected duration.
            Default value is 5 minutes.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MinLogSizeInMB">
            <summary>
            Gets or sets the minimum log size. A truncation will not be initiated if it would reduce the size of the log to below this value.
            Default value is 0.
            </summary>
            <returns>The minimum log size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.TruncationThresholdFactor">
            <summary>
            Gets or sets the truncation threshold factor. A truncation will be initiated when the log usage exceeds this value times MinLogSizeInMB.
            Default value is 2.
            </summary>
            <returns>The truncation threshold.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ThrottlingThresholdFactor">
            <summary>
            Gets or sets the throttling threshold factor. Throttling will be initiated when the log usage exceeds this value times MinLogSizeInMB.
            Default value is 3.
            </summary>
            <returns>The throttling threshold.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.LogTruncationIntervalSeconds">
            <summary>
            Gets or sets a time interval at which log truncation will be initiated
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.EnableIncrementalBackupsAcrossReplicas">
            <summary>
            Configuration that enables incremental backups to be chained across primary replicas.
            When this flag is turned off, a primary replica can only take an incremental backup if it took the last backup at the same epoch.
            When this flag is turned on, a primary replica can take an incremental backup whether or not it was the replica that took the last backup with the same dataloss number.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.EnableSendWindowSizeInBytes">
            <summary>
            Controls if send window size for primary queues should be in bytes of number of messages
            Default is false
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxReplicationQueueSendWindowSizeInBytes">
            <summary>
            If enableSendWindowSizeInBytes is set then specifies the amount of bytes from replication queue
            that can be put on wire
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxCopyQueueSendWindowSizeInBytes">
            <summary>
            If enableSendWindowSizeInBytes is set then specifies the amount of bytes from copy queue
            that can be put on wire
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.UseIndividualHeapPerReplica">
            <summary>
            Controls if multiple replicas within process should use their own individual heaps or shared heap.
            Default is false
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InitialReplicaHeapSizeInKB">
            <summary>
            Controls the initial size of the heap owned by a replicas in a process, when UseIndividualHeapPerReplica is enabled.
            Default is 0
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified ReplicatorSettings is equal to the current object.
            </summary>
            <param name="obj">
            Object to check against.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/> representing the hash code.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InternalEquals(Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings,Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings)">
            <summary>
            Checks for equality of setting values.
            </summary>
            <param name="old">Old settings.</param>
            <param name="updated">Updated settings.</param>
            <returns>
            TRUE if the settings are equivalent.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.RestorePolicy">
            <summary>
            Policy for restore operation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.RestorePolicy.Safe">
            <summary>
            Ensures that the backed up state being restored is ahead of the current state.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.RestorePolicy.Force">
            <summary>
            Does not check whether backed up state being restored is ahead of the current state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction">
            <summary>
            Describes the action that caused the DictionaryChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction.Add">
            <summary>
            Indicates that the notification is for an add operation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction.Update">
            <summary>
            Indicates that the notification is for an update operation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction.Remove">
            <summary>
            Indicates that the notification is for a remove operation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction.Clear">
            <summary>
            Indicates that the notification is for a clear operation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction.Rebuild">
            <summary>
            Indicates that the notification is for a rebuild operation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event.
            </summary>
            <typeparam name="TKey">The type of the keys in the <cref name="IReliableDictionary"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <cref name="IReliableDictionary"/>.</typeparam>
            <remarks>
            DictionaryChanged notifications are synchronously fired by <cref name="IReliableDictionary"/> as part of applying the operation.
            Holding up the completion of these events can cause the replica to be blocked on the completion of the event.
            It is recommended that the events are handled as fast as possible.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2.#ctor(Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction)">
            <summary>
            Initializes a new instance of the <cref name="NotifyDictionaryChangedEventArgs"/>
            </summary>
            <param name="action">The type of notification.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
            <value>The type of notification.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryTransactionalEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by a transactional operation.
            </summary>
            <typeparam name="TKey">The type of the keys in the <cref name="IReliableDictionary"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <cref name="IReliableDictionary"/>.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryTransactionalEventArgs`2.#ctor(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction)">
            <summary>
            Initializes a new instance of the <cref name="NotifyDictionaryTransactionalEventArgs"/>
            </summary>
            <param name="transaction">Transaction that the operation is related to.</param>
            <param name="action">Type of the change.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryTransactionalEventArgs`2.Transaction">
            <summary>
            Gets the transaction that the operation belongs to.
            </summary>
            <value>The transaction object associated with the notification.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2">
            <summary>
            Provides data for the RebuildNotificationAsyncCallback event caused by a rebuild operation.
            Rebuild notification is fired at the end of recovery, copy or restore of reliable state.
            </summary>
            <typeparam name="TKey">The type of the keys in the <cref name="IReliableDictionary"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <cref name="IReliableDictionary"/>.</typeparam>
            <remarks>
            Note that until this operation completes, rebuild of the <cref name="IReliableDictionary"/> will not complete.
            This can cause the replica to be blocked waiting for the callback to complete before proceeding. 
            Asynchronous iteration over the state may require IO.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2.#ctor(Microsoft.ServiceFabric.Data.IAsyncEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <cref name="NotifyDictionaryRebuildEventArgs"/>
            </summary>
            <param name="enumerableState"><cref name="IAsyncEnumerable"/> that can be used to iterate the new state of the <cref name="IReliableDictionary"/>.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2.State">
            <summary>
            Gets an asynchronous enumerable that contains all items in the <cref name="IReliableDictionary"/>.
            </summary>
            <value>Asynchronous enumerable that contains the new state.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryClearEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by a clear operation.
            </summary>
            <typeparam name="TKey">The type of the keys in the <cref name="IReliableDictionary"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <cref name="IReliableDictionary"/>.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryClearEventArgs`2.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <cref name="NotifyDictionaryClearEventArgs"/>
            </summary>
            <param name="commitSequenceNumber">
            The commit sequence number of the transaction cleared the <cref name="IReliableDictionary"/>
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryClearEventArgs`2.CommitSequenceNumber">
            <summary>
            Gets the commit sequence number for the operation that committed the clear.
            </summary>
            <value>
            Sequence number at which the Clear was committed.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by item addition.
            </summary>
            <typeparam name="TKey">The type of the keys in the <cref name="IReliableDictionary"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <cref name="IReliableDictionary"/>.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2.#ctor(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Initializes a new instance of the <cref name="NotifyDictionaryItemAddedEventArgs"/>
            </summary>
            <param name="transaction">Transaction that the operation is related to.</param>
            <param name="key">Key that was added.</param>
            <param name="value">Value that was added.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by item update.
            </summary>
            <typeparam name="TKey">The type of the keys in the <cref name="IReliableDictionary"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <cref name="IReliableDictionary"/>.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2.#ctor(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Initializes a new instance of the <cref name="NotifyDictionaryItemUpdatedEventArgs"/>
            </summary>
            <param name="transaction">Transaction that the operation is related to.</param>
            <param name="key">Key that was updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemRemovedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by item removal.
            </summary>
            <typeparam name="TKey">The type of the keys in the <cref name="IReliableDictionary"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <cref name="IReliableDictionary"/>.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemRemovedEventArgs`2.#ctor(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Initializes a new instance of the <cref name="NotifyDictionaryItemRemovedEventArgs"/>
            </summary>
            <param name="transaction">Transaction that the operation is related to.</param>
            <param name="key">Key that was removed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemRemovedEventArgs`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction">
            <summary>
            Describes the action that caused the StateManagerChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction.Add">
            <summary> 
            A state provider has been added.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction.Remove">
            <summary> 
            A state provider has been removed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction.Rebuild">
            <summary> 
            State manager has been rebuilt.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs">
            <summary>
            Provides data for the StateManagerChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs.action">
            <summary>
            The action.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs.#ctor(Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction)">
            <summary>
            Initializes a new instance of the <cref name="NotifyStateManagerChangedEventArgs"/>
            </summary>
            <param name="action">Type of the event.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
            <value>
            The type of notification.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs">
            <summary>
            Provides data for the StateManagerChanged event caused by a rebuild.
            Commonly called during recovery, restore and end of copy.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs.reliableStates">
            <summary>
            The state providers.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs.#ctor(Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState})">
            <summary>
            Initializes a new instance of the <cref name="NotifyStateManagerChangedEventArgs"/>
            </summary>
            <param name="reliableStates">
            <cref name="IAsyncEnumerable"/> of all the ReliableState after the rebuild.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs.ReliableStates">
            <summary>
            Enumerable of all the new state providers now in the State Manager.
            </summary>
            <value>
            Asynchronous enumerable that contains the new set of <cref name="IReliableState"/>s.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs">
            <summary>
            Provides data for the DictionaryChanged event caused by a transactional single entity operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs.#ctor(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.IReliableState,Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction)">
            <summary>
            Initializes a new instance of the <cref name="NotifyStateManagerSingleEntityChangedEventArgs"/>
            </summary>
            <param name="transaction">Transaction that the change is related to.</param>
            <param name="reliableState"><cref name="IReliableState"/> that was changed.</param>
            <param name="action">The type of the change.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>
            The transaction associated with the operation.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs.ReliableState">
            <summary>
            Gets the reliable state
            </summary>
            <value>
            The <cref name="IReliableState"/> associated with the notification.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedAction">
            <summary>
            Describes the action that caused the TransactionChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedAction.Commit">
            <summary> 
            Transaction has committed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs">
            <summary>
            Event arguments for transactions.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs.#ctor(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedAction)">
            <summary>
            Initializes a new instance of the <cref name="NotifyStateManagerSingleEntityChangedEventArgs"/>
            </summary>
            <param name="transaction">Transaction that the change is related to.</param>
            <param name="action">The type of notification.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs.Action">
            <summary>
            Type of action for which the event was created.
            </summary>
            <value>
            The type of notification.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>
            The transaction associated with the operation.
            </value>
        </member>
    </members>
</doc>
